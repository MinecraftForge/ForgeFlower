From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Thu, 1 Oct 2015 20:00:53 -0700
Subject: [PATCH] Detect if the itterator is being used elseware before
 creating an enhanced for loop.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index 3172b5e6754fc9e2d5570f1d7110dc452b77b510..5ba4dcd0944696d200a8a5857d7afccc3737e5fb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -458,6 +458,14 @@ public class MergeHelper {
           return false;
         }
 
+        InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
+        InvocationExprent hnext = (InvocationExprent)getUncast(drillNots(stat.getConditionExprent()));
+        if (next.getInstance().type != Exprent.EXPRENT_VAR ||
+            hnext.getInstance().type != Exprent.EXPRENT_VAR ||
+            isVarReferenced((VarExprent)initDoExprent.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+          return false;
+        }
+
         InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initDoExprent).getRight();
 
         holder.getInstance().addBytecodeOffsets(initDoExprent.bytecode);
@@ -487,6 +495,12 @@ public class MergeHelper {
           return false;
         }
 
+        AssignmentExprent itr = (AssignmentExprent)stat.getInitExprent();
+        InvocationExprent hnext = (InvocationExprent)exp;
+        if (itr.getLeft().type != Exprent.EXPRENT_VAR || hnext.getInstance().type != Exprent.EXPRENT_VAR) {
+          return false;
+        }
+
         AssignmentExprent ass = (AssignmentExprent)stat.getIncExprent();
         if (!isNextCall(ass.getRight()) || ass.getLeft().type != Exprent.EXPRENT_VAR) {
 
@@ -495,6 +509,12 @@ public class MergeHelper {
             return false;
           }
 
+          InvocationExprent next = (InvocationExprent)getUncast(firstDoExprent.getRight());
+          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
+              isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+            return false;
+          }
+
           //Move the inc exprent back to the end of the body and remove the .next call
           Statement last = getLastDirectData(stat.getFirst());
           InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
@@ -511,6 +531,12 @@ public class MergeHelper {
           stat.setIncExprent(holder.getInstance());
         }
         else {
+          InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
+          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
+              isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+            return false;
+          }
+
           InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
 
           holder.getInstance().addBytecodeOffsets(stat.getInitExprent().bytecode);
@@ -579,6 +605,53 @@ public class MergeHelper {
     return true;
   }
 
+  private static boolean isVarReferenced(VarExprent var, Statement stat, VarExprent... whitelist) {
+    if (stat.getExprents() == null) {
+      for (Object obj : stat.getSequentialObjects()) {
+        if (obj instanceof Statement) {
+          if (isVarReferenced(var, (Statement)obj, whitelist)) {
+            return true;
+          }
+        }
+        else if (obj instanceof Exprent) {
+          if (isVarReferenced(var, (Exprent)obj, whitelist)) {
+            return true;
+          }
+        }
+      }
+    }
+    else {
+      for (Exprent exp : stat.getExprents()) {
+        if (isVarReferenced(var, exp, whitelist)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  private static boolean isVarReferenced(VarExprent target, Exprent exp, VarExprent... whitelist) {
+    List<Exprent> lst = exp.getAllExprents(true);
+    lst.add(exp);
+    for (Exprent ex : lst) {
+      if (ex != target && ex.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)ex;
+        if (var.getIndex() == target.getIndex() && var.getVersion() == target.getVersion()) {
+          boolean allowed = false;
+          for (VarExprent white : whitelist) {
+            if (var == white) {
+              allowed = true;
+            }
+          }
+          if (!allowed) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }
+
   private static boolean isType(Exprent exp, int type) { //This is just a helper macro, Wish java had real macros.
     return exp != null && exp.type == type;
   }
