From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JDLogic <jrd2558@gmail.com>
Date: Mon, 31 May 2021 21:28:33 -0600
Subject: [PATCH] Fixup J9 string concat


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index dbee9d14a323279ca226e5e6f32f0f4182d22dc9..6e642b683d504ade9edef4ea32c154fbd4a219c9 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -161,6 +161,10 @@ public class MethodProcessorRunnable implements Runnable {
     }
     while (new PPandMMHelper(varProc).findPPandMM(root));
 
+    if (cl.isVersion(CodeConstants.BYTECODE_JAVA_9)) {
+      ConcatenationHelper.simplifyStringConcat(root);
+    }
+
     while (true) {
       LabelHelper.cleanUpEdges(root);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
index f1f3e7c7e903dd0571c2a18f1ed976999cff99da..e44fa1ffd3929428524c31fdac14f1df2e6a6431 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
@@ -4,6 +4,7 @@ package org.jetbrains.java.decompiler.modules.decompiler;
 import org.jetbrains.java.decompiler.ClassNameConstants;
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.*;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 import org.jetbrains.java.decompiler.struct.consts.PooledConstant;
 import org.jetbrains.java.decompiler.struct.consts.PrimitiveConstant;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
@@ -22,6 +23,38 @@ public final class ConcatenationHelper {
   private static final VarType builderType = new VarType(CodeConstants.TYPE_OBJECT, 0, "java/lang/StringBuilder");
   private static final VarType bufferType = new VarType(CodeConstants.TYPE_OBJECT, 0, "java/lang/StringBuffer");
 
+  public static void simplifyStringConcat(Statement stat) {
+    for (Statement s : stat.getStats()) {
+      simplifyStringConcat(s);
+    }
+
+    if (stat.getExprents() != null) {
+      for (int i = 0; i < stat.getExprents().size(); ++i) {
+        Exprent ret = simplifyStringConcat(stat.getExprents().get(i));
+        if (ret != null) {
+          stat.getExprents().set(i, ret);
+        }
+      }
+    }
+  }
+
+  private static Exprent simplifyStringConcat(Exprent exprent) {
+    for (Exprent cexp : exprent.getAllExprents()) {
+      Exprent ret = simplifyStringConcat(cexp);
+      if (ret != null) {
+        exprent.replaceExprent(cexp, ret);
+      }
+    }
+
+    if (exprent.type == Exprent.EXPRENT_INVOCATION) {
+      Exprent ret = ConcatenationHelper.contractStringConcat(exprent);
+      if (!exprent.equals(ret)) {
+        return ret;
+      }
+    }
+
+    return null;
+  }
 
   public static Exprent contractStringConcat(Exprent expr) {
 
@@ -150,6 +183,7 @@ public final class ConcatenationHelper {
         StringBuilder acc = new StringBuilder();
         int parameterId = 0;
         int bootstrapArgumentId = 1;
+        int nonString = 0;
         for (int i = 0; i < recipe.length(); i++) {
           char c = recipe.charAt(i);
 
@@ -172,13 +206,12 @@ public final class ConcatenationHelper {
             if (c == TAG_ARG) {
               Exprent exprent = parameters.get(parameterId++);
 
-              if ((exprent instanceof VarExprent) && res.isEmpty()) {
-                VarExprent varExprent = (VarExprent) exprent;
-
-                if (!VarType.VARTYPE_STRING.equals(varExprent.getVarType())) {
-                  // First item of concatenation is a variable and variable's type is not a String.
+              if (!VarType.VARTYPE_STRING.equals(exprent.getExprType())) {
+                nonString++;
+                if (nonString == 2 && i == 1) {
+                  // First two items of concatenation are a variable and variable's type is not a String.
                   // Prepend it with empty string literal to force resulting expression type to be String.
-                  res.add(new ConstExprent(VarType.VARTYPE_STRING, "", expr.bytecode));
+                  res.add(0, new ConstExprent(VarType.VARTYPE_STRING, "", expr.bytecode));
                 }
               }
 
diff --git a/src/org/jetbrains/java/decompiler/struct/StructClass.java b/src/org/jetbrains/java/decompiler/struct/StructClass.java
index 3e0cbd0fbcbc29ff619d4b2441b13047bb803d11..f174c06886eb5b928abcaf3cedd3b459df9d463b 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructClass.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructClass.java
@@ -286,6 +286,10 @@ public class StructClass extends StructMember {
     return isVersion16() || (isVersion14() && isPreviewVersion());
   }
 
+  public boolean isVersion(int minVersion) {
+    return majorVersion >= minVersion;
+  }
+
   @Override
   public String toString() {
     return qualifiedName;
diff --git a/testData/classes/java11/TestJava11StringConcatEmptyAffix.class b/testData/classes/java11/TestJava11StringConcatEmptyAffix.class
index 2b481af59af9a1e2faa68fef62e1f8cf79533791..2f75b2305743bf363663d8b29ff7f7aacc54a929 100644
GIT binary patch
literal 1730
zcmb7^+foxj5QhIrAiKtJFbJref(BS15~3(-5QPY3EId?&(hIMaFu+3CP3=x7c@rN)
zudK?258y*t_RJ<Euv1#*qUVrr{{E+XYJdH1{sgd!tt9%8P1D?xVLlBeXH3pwau$=b
zIPRy>BSRc{8I}zc3_M^+tU0bD)*0f~{6~hKlDE$p26h~mziXWCaevp|tI<wc@IY*x
z*2Vb;pC341%C2A-w#xH6$M%_>ui5Tlz9M|bJuK4x6*&BZVb+S$T7f<((3NPgvu<lC
zL*znvsx%JBQ!8;uT-sN91h+Y*7jo^bq)b7Gy4Z+S*56DW45{|P3vG3KhB>SJKer5B
zsI19~*YK-++mQvI*(E=3sJ4Ydh?G3HYKPa|khfiug-@X$0}O+ko+kp~+x53x9C`b}
zKmrd<tfcS=Loy7Tcx+<T#1pxiF!5B585y3DWhqrC<o}hD5_P)$e(#u9MG{4<F)+q3
zdTO8W(B&sb9MLQgwkrY#qpsczF$N1-t%}JbCc9YAY2Jpe2L_%?*BcDkju*#0^G<l{
z0frW~?W*wna|0!M<U5{s(x@|}%C5`(Qq2wmPQJc&=WJ<&1$=G0`!yb9!-K_WL%Vh^
z9o#*ya}EBviw_G|?0)zyiIQEbRUE;K242w%h}=)-jbZZd9Hx<?Z-o5y(RYE~3&lZN
zP0+|_>|OW)_MIjSHz+35W}IRgLlh-CMPrOcW2`C1Z&zS><R*r%!i!D%(nR1SVIx}Q
zo+#W;@TgX~Hww$o-Yu=N#`7q_x3$U|&*KE&(JCjRHZlZ{X_bvAoF#Z%wL;c8L)E49
zFvrH5Fr&0Z^rW7?7Nv7UPmyNW!;W^YiDZ;sCT==P=cwh^qx1^-yh~1FxQCZC%C4?s
a6ECQ!Gqld27qhfCr{aQ&iz?<+T>1kmcx4y>

literal 2271
zcma)+-BQy)6vzMDmNu61VO3B-1SwEHq@XBj5rs;nSiqTf@WQK50t8CZX|{~KiI1UI
z&h)|u@Sz;f?xs*kqU7T2*)!+-_P@I)`}<Gx7l0+~#L<PhB>7K;d6ond9ur<jcp>41
zv6Mtam@r-m^E!rX49g7BWz#bG3PU(OwaXC6+4}}VPtmlD?Z)YzQ7`LzRf;5wc15r5
z>UC4h-C%?tnGVBL@mN387Zx&Q!{M9KE%CZ(9p-GSqVx6B8b4n>I559viNh&JMn2UI
z3KcBQa4%g@j7(Lx4l}Blk~_}yYJ(PM1<JWrsFD~a(sK1HmA<f~H;<u9P}`LBUd~$!
zNW~;miY_(8K3p{_<4RoeD7lp<c`C0Jii;&EMee*WT?p9vfmwIxXrhi$v8{auNm6Ak
z(#2x(uo))P1@9hx&q6aTzN^l*(~;HgOd^$DsV`o#8}*8jH$@MOm;ZCWbD|Ft=td9e
zU9)XYY`wN+@FRQQ>51ZvhLr@~qEDCs4evCpYFHDqF%3B}riFP=d%0mt(Ly3qUH{JB
zu~Ff1tRqiN!x;Kc^%FyN;b)T{k>_yT;?%RTnruJHi805$)Q~9A*u{L(r?vcUD~1n3
z^+$%(r54jVvri1Smz9LPUg38AJccd0*P?BoG-?cqf@K-?Tvc}*gLHjsU(;o%1KiN9
z{i@-lRAJV8(`}I}h2`^_;gkNQEngj6w!K$eL{6_(OC~qywb-T(@a)e|8^iFw^Dv48
zJzL`IqNj@bg={a)GBh$8JEnhv{U9fV+hn6M7>0P^5-I_AaF=HEC!&w6D9+LtqA@nu
z6ytYt+smV}yicXL<&=zm+^0f@2N<{xnrYHg=>f$9L4y)B<f|y+1$764l%j{eiaNZY
zWFSZ>8unG>b4LAvAf@P$uOgo_8VUp{MI*k7qTa2I1cH>JQC~$dFDMlVQi>j9%)S0R
zwFqqq+Tc(VnwON8q!E>K(MTFnvXQ6`<K%^iHsQ~_<z>#^m^q2GN9Sx4aW8W|fH`%c
za~gwE=Zu#*OFvPkm$`UDW*D>b_j`g(8snsR14R_*C(F=$1Ra>C*n+f+(mt2=g|sjK
E0;Ip6ssI20

diff --git a/testData/results/TestJava11StringConcatEmptyAffix.dec b/testData/results/TestJava11StringConcatEmptyAffix.dec
index 6f9349f9123c863be861abde8f29aea3fe0496a9..fb1527258dda5a52c16827ff2439162f0764c272 100644
--- a/testData/results/TestJava11StringConcatEmptyAffix.dec
+++ b/testData/results/TestJava11StringConcatEmptyAffix.dec
@@ -42,7 +42,7 @@ public class TestJava11StringConcatEmptyAffix {
    }
 
    public String testIntString(int intValue, String stringValue) {
-      return "" + intValue + stringValue;// 48
+      return intValue + stringValue;// 48
    }
 
    public String testStringInt(int intValue, String stringValue) {
diff --git a/testData/src/java11/TestJava11StringConcatEmptyAffix.java b/testData/src/java11/TestJava11StringConcatEmptyAffix.java
index b53609095131d2f029c6d6d7e03f773107f6e1e3..90e3f54180a4f2767daecf9b4a86cba4c4c53284 100644
--- a/testData/src/java11/TestJava11StringConcatEmptyAffix.java
+++ b/testData/src/java11/TestJava11StringConcatEmptyAffix.java
@@ -45,7 +45,7 @@ public class TestJava11StringConcatEmptyAffix {
     }
 
     public String testIntString(int intValue, String stringValue) {
-        return "" + intValue + stringValue;
+        return intValue + stringValue;
     }
 
     public String testStringInt(int intValue, String stringValue) {
