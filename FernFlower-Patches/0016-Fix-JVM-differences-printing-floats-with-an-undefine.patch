From b44392c8602fca4597fc52d98955a3be4d32ee77 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Mon, 3 Aug 2015 15:43:39 -0700
Subject: [PATCH 016/122] Fix JVM differences printing floats with an undefined
 number of trailing zeros. (Some JVMs do 0.1F and some do 0.10F)

---
 .../modules/decompiler/exps/ConstExprent.java | 28 +++++++++++++------
 1 file changed, 19 insertions(+), 9 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 4b9b687..5a751f9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -210,7 +210,7 @@ public class ConstExprent extends Exprent {
             doublefield = "MIN_VALUE";
           }
           else {
-            return new TextBuffer(value.toString()).append("D");
+            return new TextBuffer(trimZeros(value.toString())).append("D");
           }
           return new FieldExprent(doublefield, "java/lang/Double", true, null, FieldDescriptor.DOUBLE_DESCRIPTOR, bytecode).toJava(0, tracer);
         case CodeConstants.TYPE_FLOAT:
@@ -247,7 +247,7 @@ public class ConstExprent extends Exprent {
             floatfield = "MIN_VALUE";
           }
           else {
-            return new TextBuffer(value.toString()).append("F");
+            return new TextBuffer(trimZeros(value.toString())).append("F");
           }
           return new FieldExprent(floatfield, "java/lang/Float", true, null, FieldDescriptor.FLOAT_DESCRIPTOR, bytecode).toJava(0, tracer);
         case CodeConstants.TYPE_NULL:
@@ -275,6 +275,16 @@ public class ConstExprent extends Exprent {
     throw new RuntimeException("invalid constant type");
   }
 
+  private static String trimZeros(String value) {
+      int i = value.length() - 1;
+      while (i >= 0 && value.charAt(i) == '0') {
+          i--;
+      }
+      if (value.charAt(i) == '.')
+        i++;
+      return value.substring(0, i + 1);
+  }
+
   private static String convertStringToJava(String value, boolean ascii) {
     char[] arr = value.toCharArray();
     StringBuilder buffer = new StringBuilder(arr.length);
@@ -400,20 +410,20 @@ public class ConstExprent extends Exprent {
   public boolean isBoolPermitted() {
     return boolPermitted;
   }
-  
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
-  
+
   public boolean match(MatchNode matchNode, MatchEngine engine) {
 
     if(!super.match(matchNode, engine)) {
       return false;
     }
-    
+
     for(Entry<MatchProperties, RuleValue> rule : matchNode.getRules().entrySet()) {
       RuleValue rule_value = rule.getValue();
-      
+
       switch(rule.getKey()) {
       case EXPRENT_CONSTTYPE:
         if(!rule_value.value.equals(this.constType)) {
@@ -425,12 +435,12 @@ public class ConstExprent extends Exprent {
           if(!engine.checkAndSetVariableValue(rule_value.value.toString(), this.value)) {
             return false;
           }
-        } 
+        }
         break;
       }
     }
-    
+
     return true;
   }
-  
+
 }
-- 
2.21.0.windows.1

