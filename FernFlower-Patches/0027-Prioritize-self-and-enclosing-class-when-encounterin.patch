From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Sep 2018 03:01:05 -0700
Subject: [PATCH] Prioritize self and enclosing class when encountering
 inconsistent InnerClass attributes.

The compiler encodes all REFERENCED inner classes into the class. The first found used to win, but now ThisClass > EnclosingClass > Others AccessTransformers only edit the targeted class as it can't find all references.
Fixes AccessTransformers.

diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 615b7a37610e6498e04eb971768df0ea57284383..69b1dc49a54a4f114e04dee27c019d7b09028220 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -28,6 +28,7 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.*;
+import java.util.stream.Collectors;
 
 public class ClassWriter {
   private final PoolInterceptor interceptor;
@@ -1000,6 +1001,10 @@ public class ClassWriter {
     }
   }
 
+  public static String getModifiers(int flags) {
+    return MODIFIERS.entrySet().stream().filter(e -> (e.getKey() & flags) != 0).map(Map.Entry::getValue).collect(Collectors.joining(" "));
+  }
+
   public static void appendTypeParameters(TextBuffer buffer, List<String> parameters, List<List<VarType>> bounds) {
     buffer.append('<');
 
diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 6b6e38f72a51e3f426b812060511e71142860263..c5cfa74b683deb347d5733ba306628561e013cc3 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -41,10 +41,20 @@ public class ClassesProcessor implements CodeConstants {
     private String simpleName;
     private int type;
     private int accessFlags;
+    private String source;
 
     private static boolean equal(Inner o1, Inner o2) {
       return o1.type == o2.type && o1.accessFlags == o2.accessFlags && InterpreterUtil.equalObjects(o1.simpleName, o2.simpleName);
     }
+
+    @Override
+    public String toString() {
+      return simpleName + " " + ClassWriter.getModifiers(accessFlags) + " " + getType() + " " + source;
+    }
+
+    private String getType() {
+        return type == ClassNode.CLASS_ANONYMOUS ? "ANONYMOUS" : type == ClassNode.CLASS_LAMBDA ? "LAMBDA" : type == ClassNode.CLASS_LOCAL ? "LOCAL" : type == ClassNode.CLASS_MEMBER ? "MEMBER" : type == ClassNode.CLASS_ROOT ? "ROOT" : "UNKNOWN(" + type +")";
+    }
   }
 
   public ClassesProcessor(StructContext context) {
@@ -87,6 +97,7 @@ public class ClassesProcessor implements CodeConstants {
               rec.simpleName = simpleName;
               rec.type = entry.simpleNameIdx == 0 ? ClassNode.CLASS_ANONYMOUS : entry.outerNameIdx == 0 ? ClassNode.CLASS_LOCAL : ClassNode.CLASS_MEMBER;
               rec.accessFlags = entry.accessFlags;
+              rec.source = cl.qualifiedName;
 
               // nested class type
               if (entry.innerName != null) {
@@ -131,6 +142,13 @@ public class ClassesProcessor implements CodeConstants {
                 else if (!Inner.equal(existingRec, rec)) {
                   String message = "Inconsistent inner class entries for " + innerName + "!";
                   DecompilerContext.getLogger().writeMessage(message, IFernflowerLogger.Severity.WARN);
+                  DecompilerContext.getLogger().writeMessage("  Old: " + existingRec.toString(), IFernflowerLogger.Severity.WARN);
+                  DecompilerContext.getLogger().writeMessage("  New: " + rec.toString(), IFernflowerLogger.Severity.WARN);
+                  int oldPriority = existingRec.source.equals(innerName) ? 1 : existingRec.source.equals(enclClassName) ? 2 : 3;
+                  int newPriority = rec.source.equals(innerName) ? 1 : rec.source.equals(enclClassName) ? 2 : 3;
+                  if (newPriority < oldPriority) {
+                      mapInnerClasses.put(innerName, rec);
+                  }
                 }
 
                 // reference to the nested class
