From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 17 Nov 2021 13:09:07 -0800
Subject: [PATCH] Search generics when finding where to inject local classes.


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index f9d15e108cfff05be4f38b10a00814259364a849..ece03f96d212c2ba26d7a7c6d9caab6ca93cd626 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -28,6 +28,7 @@ import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTableAttribute.LocalVariable;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.util.DotExporter;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
@@ -80,7 +81,7 @@ public class NestedClassProcessor {
 
         if (child.type == ClassNode.CLASS_LOCAL && child.enclosingMethod != null) {
           MethodWrapper enclosingMethodWrapper = node.getWrapper().getMethods().getWithKey(child.enclosingMethod);
-          if(enclosingMethodWrapper != null) { // e.g. in case of switch-on-enum. FIXME: some proper handling of multiple enclosing classes 
+          if(enclosingMethodWrapper != null) { // e.g. in case of switch-on-enum. FIXME: some proper handling of multiple enclosing classes
             setLocalClassDefinition(enclosingMethodWrapper, child);
           }
         }
@@ -1057,9 +1058,15 @@ public class NestedClassProcessor {
         case Exprent.EXPRENT_VAR:
           VarExprent varExpr = (VarExprent)expr;
           if (varExpr.isDefinition()) {
-            VarType varType = varExpr.getVarType();
-            if (classType.equals(varType) || (varType.arrayDim > 0 && classType.value.equals(varType.value))) {
-              res = true;
+            Stack<VarType> stack = new Stack<>();
+            stack.push(varExpr.getDefinitionType());
+            while (!stack.isEmpty()) {
+              VarType varType = stack.pop();
+              if (classType.equals(varType) || (varType.arrayDim > 0 && classType.value.equals(varType.value))) {
+                res = true;
+              } else if (varType.isGeneric()) {
+                ((GenericType)varType).getArguments().forEach(stack::push);
+              }
             }
           }
       }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index c8bf497f5cac2bb9e3c7b2187a4b70d392ef9e7c..a7bf7eb3b499d623d11914bcca98702328e57329 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -153,7 +153,8 @@ public class VarExprent extends Exprent {
   }
   */
 
-  private void appendDefinitionType(TextBuffer buffer) {
+
+  public VarType getDefinitionType() {
     if (DecompilerContext.getOption(IFernflowerPreferences.USE_DEBUG_VAR_NAMES)) {
 
       if (lvt != null) {
@@ -161,13 +162,11 @@ public class VarExprent extends Exprent {
           if (lvt.getSignature() != null) {
             GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(lvt.getSignature());
             if (descriptor != null) {
-              buffer.append(ExprProcessor.getCastTypeName(descriptor.type));
-              return;
+              return descriptor.type;
             }
           }
         }
-        buffer.append(ExprProcessor.getCastTypeName(getVarType()));
-        return;
+        return getVarType();
       }
 
       MethodWrapper method = (MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
@@ -187,8 +186,7 @@ public class VarExprent extends Exprent {
               if (signature != null) {
                 GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(signature);
                 if (descriptor != null) {
-                  buffer.append(ExprProcessor.getCastTypeName(descriptor.type));
-                  return;
+                  return descriptor.type;
                 }
               }
             }
@@ -199,15 +197,17 @@ public class VarExprent extends Exprent {
           if (attr != null) {
             String descriptor = attr.getDescriptor(originalIndex, visibleOffset);
             if (descriptor != null) {
-              buffer.append(ExprProcessor.getCastTypeName(new VarType(descriptor)));
-              return;
+              return new VarType(descriptor);
             }
           }
         }
       }
     }
+    return getVarType();
+  }
 
-    buffer.append(ExprProcessor.getCastTypeName(getVarType()));
+  private void appendDefinitionType(TextBuffer buffer) {
+    buffer.append(ExprProcessor.getCastTypeName(getDefinitionType()));
   }
 
   @Override
