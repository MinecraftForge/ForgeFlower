From da700502cecd6e05622a5f61112f9c9ea0a7dc23 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 25 Oct 2015 14:08:33 -0400
Subject: [PATCH 107/122] Bulk decompilation test for all to use

---
 build.gradle                                  |  42 +++++
 .../MinecraftDecompilationTest.java           | 154 +++++++++++-------
 2 files changed, 141 insertions(+), 55 deletions(-)

diff --git a/build.gradle b/build.gradle
index bc211f2..cf3d8ec 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,6 +17,11 @@ sourceSets {
 
 repositories {
     mavenCentral()
+   maven {
+       name = "mc"
+       url = "https://libraries.minecraft.net/"
+   }
+
 }
 
 configurations {
@@ -28,10 +33,47 @@ dependencies {
     testCompile 'org.hamcrest:hamcrest-core:1.3'
     testCompile 'org.hamcrest:hamcrest-library:1.3'
 
+  // MC test only
+  testRuntime "oshi-project:oshi-core:1.1"
+  testRuntime "net.java.dev.jna:jna:3.4.0"
+  testRuntime "net.java.dev.jna:platform:3.4.0"
+  testRuntime "com.ibm.icu:icu4j-core-mojang:51.2"
+  testRuntime "net.sf.jopt-simple:jopt-simple:4.6"
+  testRuntime "com.paulscode:codecjorbis:20101023"
+  testRuntime "com.paulscode:codecwav:20101023"
+  testRuntime "com.paulscode:libraryjavasound:20101123"
+  testRuntime "com.paulscode:librarylwjglopenal:20100824"
+  testRuntime "com.paulscode:soundsystem:20120107"
+  testRuntime "io.netty:netty-all:4.0.23.Final"
+  testRuntime "com.google.guava:guava:17.0"
+  testRuntime "org.apache.commons:commons-lang3:3.3.2"
+  testRuntime "commons-io:commons-io:2.4"
+  testRuntime "commons-codec:commons-codec:1.9"
+  testRuntime "net.java.jinput:jinput:2.0.5"
+  testRuntime "net.java.jutils:jutils:1.0.0"
+  testRuntime "com.google.code.gson:gson:2.2.4"
+  testRuntime "com.mojang:authlib:1.5.21"
+  testRuntime "com.mojang:realms:1.7.39"
+  testRuntime "org.apache.commons:commons-compress:1.8.1"
+  testRuntime "org.apache.httpcomponents:httpclient:4.3.3"
+  testRuntime "commons-logging:commons-logging:1.1.3"
+  testRuntime "org.apache.httpcomponents:httpcore:4.3.2"
+  testRuntime "org.apache.logging.log4j:log4j-api:2.0-beta9"
+  testRuntime "org.apache.logging.log4j:log4j-core:2.0-beta9"
+  testRuntime "org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209"
+  testRuntime "org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209"
+  testRuntime "tv.twitch:twitch:6.5"
+
     // maven deployment
     deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
 }
 
+test {
+    systemProperties System.properties
+	onOutput {
+		descriptor, event -> logger.lifecycle("TESTOUTPUT:" + event.message)
+	}
+}
 compileJava.options.encoding = "utf-8"
 compileJava.options.deprecation = true
 
diff --git a/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java b/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
index 660d031..0d68e88 100644
--- a/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
+++ b/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
@@ -16,8 +16,12 @@
 package org.jetbrains.java.decompiler;
 
 import org.hamcrest.Matchers;
+import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler;
+import org.jetbrains.java.decompiler.main.extern.IAbstractParameterRenamer;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.junit.After;
 import org.junit.Assert;
@@ -34,11 +38,17 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 public class MinecraftDecompilationTest {
+  public static final Pattern p = Pattern.compile("func_(\\d+)_.*");
   private DecompilerTestFixture fixture;
+  public static final int LOOPS = Integer.parseInt(System.getProperty("fftestloops","50"));
+  public static final String OUTROOT = System.getProperty("fftestout","C:/TEMP/FFTEST");
+  public static final String MD5IN = System.getProperty("ffmd5in",null);
 
   private static final String MC_JAR = "minecraft_ff_in.jar";
   @Before
@@ -46,7 +56,7 @@ public class MinecraftDecompilationTest {
     fixture = new DecompilerTestFixture() {
       @Override
       public File getRandomDir() {
-        return new File("/run/user/1000/fftest");
+        return new File(OUTROOT,"fftest");
       }
     };
     Map<String,Object> mcFFOptions = new HashMap<String,Object>() {{
@@ -56,9 +66,24 @@ public class MinecraftDecompilationTest {
         put(IFernflowerPreferences.INCLUDE_ENTIRE_CLASSPATH, "1");
         put(IFernflowerPreferences.REMOVE_BRIDGE, "1");
         put(IFernflowerPreferences.REMOVE_SYNTHETIC, "1");
-        put(IFernflowerPreferences.NEW_LINE_SEPARATOR, "0");
+        put(IFernflowerPreferences.NEW_LINE_SEPARATOR, "1");
+        put(IFernflowerPreferences.LITERALS_AS_IS, "0");
     }};
     fixture.setUp(mcFFOptions);
+    DecompilerContext.setProperty("abstractparamrenamer", new IAbstractParameterRenamer() {
+        @Override
+        public String renameParameter(String orig, int index, MethodWrapper wrapper, int flags) {
+            String result = orig;
+            if ((flags & CodeConstants.ACC_ABSTRACT) != 0) {
+                String methName = wrapper.methodStruct.getName();
+                Matcher m = p.matcher(methName);
+                if (m.matches()) {
+                    result = String.format("p_%s_%d_", m.group(1),index);
+                }
+            }
+            return result;
+        }
+    });
     if (!new File(fixture.getTestDataDir(), MC_JAR).exists()) {
       throw new RuntimeException("Missing "+MC_JAR+" in testData dir - aborting");
     }
@@ -85,28 +110,44 @@ public class MinecraftDecompilationTest {
   @Test
   public void testJar() throws IOException {
     Map<String,String> md5s = new HashMap<String,String>();
-	MessageDigest md5;
+    MessageDigest md5;
     try {
-	  md5 = MessageDigest.getInstance("MD5");
-	} catch (NoSuchAlgorithmException e1) {
+      md5 = MessageDigest.getInstance("MD5");
+    } catch (NoSuchAlgorithmException e1) {
       md5 = null;
-	}
-
-    System.out.println("Decompiling base");
+    }
+    System.out.printf("TEST SETUP: MD5: %s, OUTPUT: %s, LOOPS %d\n",MD5IN, OUTROOT, LOOPS);
     ConsoleDecompiler decompiler = fixture.getDecompiler();
-    decompiler.addSpace(new File(fixture.getTestDataDir(), MC_JAR), true);
-    decompiler.decompileContext();
+    Map<String, String> valid = new HashMap<String,String>();
+    if (MD5IN != null) {
+        byte[] bytes = InterpreterUtil.getBytes(new File(MD5IN));
+        String md5list = new String(bytes,"UTF-8");
+        for (String line : md5list.split("\n")) {
+            String[] parts = line.split(",");
+            md5s.put(parts[0],parts[1]);
+        }
+    } else {
 
-    Map<String, HashSet<String>> variants = new HashMap<String, HashSet<String>>();
+        System.out.println("Decompiling base");
+        decompiler.addSpace(new File(fixture.getTestDataDir(), MC_JAR), true);
+        decompiler.decompileContext();
 
-    Map<String, String> valid = readJar(new File(fixture.getTargetDir(), MC_JAR),md5s,md5);
-    
-    File outRoot = new File("/run/user/1000/ffbulk");
+
+        readJar(new File(fixture.getTargetDir(), MC_JAR),md5s,md5);
+        File outmd5 = new File(fixture.getRandomDir(),"md5s.csv");
+        FileWriter fos = new FileWriter(outmd5);
+        for (Entry<String, String> md5sum : md5s.entrySet()) {
+          fos.write(String.format("%s,%s\n", md5sum.getKey(),md5sum.getValue()));
+        }
+        fos.close();
+    }
+    Map<String, HashSet<String>> variants = new HashMap<String, HashSet<String>>();
+    File outRoot = new File(OUTROOT,"ffbulk");
     outRoot.mkdirs();
-    for (int x = 0; x < 10000; x++) {
+    for (int x = 0; x < LOOPS; x++) {
       this.tearDown();
       this.setUp();
-      System.out.println(x + "/10000 Starting Decompile");
+      System.out.printf("%d/%s Starting Decompile",x,LOOPS);
       decompiler = fixture.getDecompiler();
       decompiler.addSpace(new File(fixture.getTestDataDir(), MC_JAR), true);
       decompiler.decompileContext();
@@ -115,29 +156,32 @@ public class MinecraftDecompilationTest {
       Map<String, String> data = readJar(new File(fixture.getTargetDir(), MC_JAR),null,null);
 
       for (Entry<String, String> e : data.entrySet()) {
+        String fname = e.getKey();
         String found = e.getValue();
-        String expected = valid.get(e.getKey());
-        if (!found.equals(expected)) {
-          HashSet<String> set = variants.get(e.getKey());
-          if (set == null) {
-            set = new HashSet<String>();
-            set.add(expected);
-            variants.put(e.getKey(), set);
-          }
-          String md5digest = md5digest(found, md5);
-		if (!set.contains(found)) {
-            System.out.println("New Variant: " + e.getKey());
-            set.add(found);
-            System.out.println("Orig md5:"+md5s.get(e.getKey()));
-            System.out.println("Variant md5: "+md5digest);
-            writeFile(expected,e.getKey(),outRoot);
-            writeFile(found,e.getKey()+"."+md5digest,outRoot);
-          }
-          else
-          {
-            System.out.println("Existing Variant: " + e.getKey());
+        String md5digest = md5digest(found, md5);
+        String expected = null;
+        if (md5digest.equals(md5s.get(fname)) && !valid.containsKey(fname)) {
+          valid.put(fname, found);
+          expected = found;
+        } else if (valid.containsKey(fname)) {
+          expected = valid.get(fname);
+        }
+        HashSet<String> set = variants.get(fname);
+        if (set == null) {
+          set = new HashSet<String>();
+          set.add(md5s.get(fname));
+          variants.put(fname, set);
+        }
+        if (!set.contains(md5digest)) {
+            System.out.println("New Variant: " + fname);
+            set.add(md5digest);
+            System.out.println("Orig md5:"+md5s.get(fname));
             System.out.println("Variant md5: "+md5digest);
-          }
+            writeFile(expected,fname,outRoot);
+            writeFile(found,fname+"."+md5digest,outRoot);
+        } else if (!md5digest.equals(md5s.get(fname))) {
+          System.out.println("Existing Variant: " + fname);
+          System.out.println("Variant md5: "+md5digest);
         }
       }
     }
@@ -145,15 +189,15 @@ public class MinecraftDecompilationTest {
   }
 
   private static void writeFile(String fl, String path, File outRoot) {
-	  File out = new File(outRoot,path);
-	  out.getParentFile().mkdirs();
+      File out = new File(outRoot,path);
+      out.getParentFile().mkdirs();
       try {
-		FileWriter fw = new FileWriter(out.getAbsoluteFile());
-		  fw.write(fl);
-		  fw.close();
-	} catch (IOException e) {
-		e.printStackTrace();
-	}
+        FileWriter fw = new FileWriter(out.getAbsoluteFile());
+          fw.write(fl);
+          fw.close();
+    } catch (IOException e) {
+        e.printStackTrace();
+    }
   }
   private static Map<String, String> readJar(File archive, Map<String, String> md5s, MessageDigest md5) {
     Map<String, String> ret = new HashMap<String, String>();
@@ -170,10 +214,10 @@ public class MinecraftDecompilationTest {
             out.close();
             in.close();
             String fileContent = new String(out.toByteArray());
-			ret.put(entry.getName(), fileContent);
-			if (md5!=null && md5s != null) {
-				md5s.put(entry.getName(), md5digest(fileContent, md5));
-			}
+            ret.put(entry.getName(), fileContent);
+            if (md5!=null && md5s != null) {
+                md5s.put(entry.getName(), md5digest(fileContent, md5));
+            }
           }
         }
       }
@@ -187,11 +231,11 @@ public class MinecraftDecompilationTest {
     return ret;
   }
   private static String md5digest(String input, MessageDigest md5) {
-	  md5.reset();
-	  try {
-		return String.format("0%032x",new BigInteger(1,md5.digest(input.getBytes("UTF-8"))));
-	} catch (UnsupportedEncodingException e) {
-		return null;
-	}
+      md5.reset();
+      try {
+        return String.format("0%032x",new BigInteger(1,md5.digest(input.getBytes("UTF-8"))));
+    } catch (UnsupportedEncodingException e) {
+        return null;
+    }
   }
 }
-- 
2.21.0.windows.1

