From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Thu, 17 Sep 2015 17:13:17 -0400
Subject: [PATCH] More tweaks to merging. It's pretty decent. But still no
 where near good enough.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 8c42c0c192cd73d7aef3632e22eaa74a3fff20e1..ca27e4718c556a478242a60df896f6f61db6e915 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -550,10 +550,18 @@ public class VarDefinitionHelper {
               // no common supertype, skip the remapping
               continue;
           }
-          if (type.typeFamily == CodeConstants.TYPE_FAMILY_OBJECT && mapExprentMaxTypes.get(old) != null && mapExprentMaxTypes.get(new_) != null) {
-              type = VarType.getCommonMinType(mapExprentMaxTypes.get(old), mapExprentMaxTypes.get(new_));
-          } else if (type.typeFamily == CodeConstants.TYPE_FAMILY_OBJECT) {
-              continue;
+          if (type.typeFamily == CodeConstants.TYPE_FAMILY_OBJECT) {
+              if (mapExprentMaxTypes.get(old) != null && mapExprentMaxTypes.get(new_) != null) {
+                  type = VarType.getCommonMinType(mapExprentMaxTypes.get(old), mapExprentMaxTypes.get(new_));
+              } else if (firstMinType.arrayDim != secondMinType.arrayDim) {
+                  continue;
+              } else {
+                  type = VarType.getCommonMinType(firstMinType, secondMinType);
+                  // couldn't find a sane common supertype, we're not gonna be able to merge
+                  if (type == null || type == VarType.VARTYPE_NULL) {
+                      continue;
+                  }
+              }
           }
           var.setIndex(new_.var);
           var.setVersion(new_.version);
@@ -563,6 +571,11 @@ public class VarDefinitionHelper {
                   ce.setConstType(type);
               }
           }
+          if (constExprents.containsKey(new_)) {
+              for (ConstExprent ce : constExprents.get(new_)) {
+                  ce.setConstType(type);
+              }
+          }
         }
       }
     }
