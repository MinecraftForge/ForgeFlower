From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: covers1624 <laughlan.cov@internode.on.net>
Date: Sat, 20 Jun 2020 00:48:35 +0930
Subject: [PATCH] Make decomp threaded

`-thr <number>` anything < 1 is treaded as single threaded.
`-thr AUTO` to auto select, (default)

diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 305b06903b36bc4cdb740a8f050543403e6406fe..e734afaf2fb87c2e9d6ede6925f4ca6b3d560773 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -37,7 +37,8 @@ public class ClassesProcessor implements CodeConstants {
   public static final int AVERAGE_CLASS_SIZE = 16 * 1024;
 
   private final StructContext context;
-  private final Map<String, ClassNode> mapRootClasses = new HashMap<>();
+  //TODO, This is synchronized because LambdaProcessor adds classes to this. Figure out a way to not sync this map.
+  private final Map<String, ClassNode> mapRootClasses = Collections.synchronizedMap(new HashMap<>());
   private final Set<String> whitelist = new HashSet<>();
 
   private static class Inner {
@@ -401,7 +402,7 @@ public class ClassesProcessor implements CodeConstants {
     return true;
   }
 
-  public void writeClass(StructClass cl, TextBuffer buffer) throws IOException {
+  public void processClass(StructClass cl) throws IOException {
     ClassNode root = mapRootClasses.get(cl.qualifiedName);
     if (root.type != ClassNode.CLASS_ROOT) {
       return;
@@ -410,25 +411,12 @@ public class ClassesProcessor implements CodeConstants {
     boolean packageInfo = cl.isSynthetic() && "package-info".equals(root.simpleName);
     boolean moduleInfo = cl.hasModifier(CodeConstants.ACC_MODULE) && cl.hasAttribute(StructGeneralAttribute.ATTRIBUTE_MODULE);
 
-    DecompilerContext.getLogger().startReadingClass(cl.qualifiedName);
-    try {
+    DecompilerContext.getLogger().startProcessingClass(cl.qualifiedName);
+    {
       ImportCollector importCollector = new ImportCollector(root);
       DecompilerContext.startClass(importCollector);
 
-      if (packageInfo) {
-        ClassWriter.packageInfoToJava(cl, buffer);
-
-        importCollector.writeImports(buffer, false);
-      }
-      else if (moduleInfo) {
-        TextBuffer moduleBuffer = new TextBuffer(AVERAGE_CLASS_SIZE);
-        ClassWriter.moduleInfoToJava(cl, moduleBuffer);
-
-        importCollector.writeImports(buffer, true);
-
-        buffer.append(moduleBuffer);
-      }
-      else {
+      if (!packageInfo && !moduleInfo) {
         new LambdaProcessor().processClass(root);
 
         // add simple class names to implicit import
@@ -440,7 +428,36 @@ public class ClassesProcessor implements CodeConstants {
         new NestedClassProcessor().processClass(root, root);
 
         new NestedMemberAccess().propagateMemberAccess(root);
+      }
 
+      DecompilerContext.getLogger().endProcessingClass();
+    }
+  }
+
+  public void writeClass(StructClass cl, TextBuffer buffer) throws IOException {
+    ClassNode root = mapRootClasses.get(cl.qualifiedName);
+    if (root.type != ClassNode.CLASS_ROOT) {
+      return;
+    }
+
+    boolean packageInfo = cl.isSynthetic() && "package-info".equals(root.simpleName);
+    boolean moduleInfo = cl.hasModifier(CodeConstants.ACC_MODULE) && cl.hasAttribute(StructGeneralAttribute.ATTRIBUTE_MODULE);
+    DecompilerContext.getLogger().startReadingClass(cl.qualifiedName);
+    try {
+      if (packageInfo) {
+        ClassWriter.packageInfoToJava(cl, buffer);
+
+        DecompilerContext.getImportCollector().writeImports(buffer, false);
+      }
+      else if (moduleInfo) {
+        TextBuffer moduleBuffer = new TextBuffer(AVERAGE_CLASS_SIZE);
+        ClassWriter.moduleInfoToJava(cl, moduleBuffer);
+
+        DecompilerContext.getImportCollector().writeImports(buffer, true);
+
+        buffer.append(moduleBuffer);
+      }
+      else {
         TextBuffer classBuffer = new TextBuffer(AVERAGE_CLASS_SIZE);
         new ClassWriter().classToJava(root, classBuffer, 0, null);
 
@@ -450,7 +467,7 @@ public class ClassesProcessor implements CodeConstants {
           buffer.append("package ").append(packageName).append(';').appendLineSeparator().appendLineSeparator();
         }
 
-        importCollector.writeImports(buffer, true);
+        DecompilerContext.getImportCollector().writeImports(buffer, true);
 
         int offsetLines = buffer.countLines();
 
diff --git a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
index bb7b5b4e4a590219939a8f7e883b9c259c1adf73..458d119056f3fa7eceec7215fa577018d7f8cb8c 100644
--- a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
+++ b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
@@ -11,6 +11,7 @@ import org.jetbrains.java.decompiler.main.extern.IVariableNamingFactory;
 import org.jetbrains.java.decompiler.modules.renamer.PoolInterceptor;
 import org.jetbrains.java.decompiler.struct.StructContext;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
 
@@ -29,12 +30,14 @@ public class DecompilerContext {
   private final ClassesProcessor classProcessor;
   private final PoolInterceptor poolInterceptor;
   private final IVariableNamingFactory renamerFactory;
+  private final int threads;
   private ImportCollector importCollector;
   private VarProcessor varProcessor;
   private CounterContainer counterContainer;
   private BytecodeSourceMapper bytecodeSourceMapper;
 
   public DecompilerContext(Map<String, Object> properties,
+                           int threads,
                            IFernflowerLogger logger,
                            StructContext structContext,
                            ClassesProcessor classProcessor,
@@ -46,6 +49,7 @@ public class DecompilerContext {
     Objects.requireNonNull(classProcessor);
 
     this.properties = properties;
+    this.threads = threads;
     this.logger = logger;
     this.structContext = structContext;
     this.classProcessor = classProcessor;
@@ -54,6 +58,18 @@ public class DecompilerContext {
     this.counterContainer = new CounterContainer();
   }
 
+  //Safe to not copy some of the fields.
+  @SuppressWarnings ("CopyConstructorMissesField")
+  private DecompilerContext(DecompilerContext other) {
+    this.properties = new HashMap<>(other.properties);
+    this.logger = other.logger;
+    this.structContext = other.structContext;
+    this.classProcessor = other.classProcessor;
+    this.poolInterceptor = other.poolInterceptor;
+    this.renamerFactory = other.renamerFactory;
+    this.threads = other.threads;
+  }
+
   // *****************************************************************************
   // context setup and update
   // *****************************************************************************
@@ -68,6 +84,14 @@ public class DecompilerContext {
     currentContext.set(context);
   }
 
+  public static void cloneContext(DecompilerContext root) {
+    DecompilerContext current = getCurrentContext();
+    if (current == null) {
+      current = new DecompilerContext(root);
+      setCurrentContext(current);
+    }
+  }
+
   public static void setProperty(String key, Object value) {
     getCurrentContext().properties.put(key, value);
   }
@@ -102,6 +126,10 @@ public class DecompilerContext {
            IFernflowerPreferences.LINE_SEPARATOR_UNX : IFernflowerPreferences.LINE_SEPARATOR_WIN;
   }
 
+  public static int getThreads() {
+    return getCurrentContext().threads;
+  }
+
   public static IFernflowerLogger getLogger() {
     return getCurrentContext().logger;
   }
diff --git a/src/org/jetbrains/java/decompiler/main/Fernflower.java b/src/org/jetbrains/java/decompiler/main/Fernflower.java
index 469b313a958cf8aca35fe98fc809880d12db671e..eefcf79cedb6148f5c02b8077914a467f3d58b64 100644
--- a/src/org/jetbrains/java/decompiler/main/Fernflower.java
+++ b/src/org/jetbrains/java/decompiler/main/Fernflower.java
@@ -25,7 +25,24 @@ public class Fernflower implements IDecompiledData {
   private final IIdentifierRenamer helper;
   private final IdentifierConverter converter;
 
+  private static int getThreads(Map<String, Object> options, final String def) {
+    String thr = options != null ? (String) options.getOrDefault(IFernflowerPreferences.THREADS, def) : def;
+    if ("AUTO".equals(thr)) {
+      return Runtime.getRuntime().availableProcessors();
+    } else {
+      try {
+        return Integer.parseInt(thr);
+      } catch (NumberFormatException e) {
+        throw new RuntimeException("Malformed threads option: " + thr);
+      }
+    }
+  }
+
   public Fernflower(IBytecodeProvider provider, IResultSaver saver, Map<String, Object> customProperties, IFernflowerLogger logger) {
+    this(provider, saver, customProperties, logger, getThreads(customProperties, "AUTO"));
+  }
+
+  public Fernflower(IBytecodeProvider provider, IResultSaver saver, Map<String, Object> customProperties, IFernflowerLogger logger, int threads) {
     Map<String, Object> properties = new HashMap<>(IFernflowerPreferences.DEFAULTS);
     if (customProperties != null) {
       properties.putAll(customProperties);
@@ -70,7 +87,7 @@ public class Fernflower implements IDecompiledData {
       }
     }
 
-    DecompilerContext context = new DecompilerContext(properties, logger, structContext, classProcessor, interceptor, renamerFactory);
+    DecompilerContext context = new DecompilerContext(properties, threads, logger, structContext, classProcessor, interceptor, renamerFactory);
     DecompilerContext.setCurrentContext(context);
 
     String vendor = System.getProperty("java.vendor", "missing vendor");
@@ -138,6 +155,17 @@ public class Fernflower implements IDecompiledData {
     }
   }
 
+  @Override
+  public boolean processClass(StructClass cl) {
+    try {
+      classProcessor.processClass(cl);
+      return true;
+    } catch (Throwable t) {
+      DecompilerContext.getLogger().writeMessage("Class " + cl.qualifiedName + " couldn't be processed.", t);
+      return false;
+    }
+  }
+
   @Override
   public String getClassContent(StructClass cl) {
     try {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
index 92e27999009de17e1ba1e6475b1fac1b13ecc337..0b607e86f96bef987c949612fa9410d0dfc3aa02 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
@@ -109,7 +109,7 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
       return;
     }
 
-    PrintStreamLogger logger = new PrintStreamLogger(System.out);
+    IFernflowerLogger logger = new ThreadedPrintStreamLogger(System.out);
     ConsoleDecompiler decompiler = new ConsoleDecompiler(destination, mapOptions, logger);
 
     for (File library : libraries) {
@@ -147,7 +147,9 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
 
   protected ConsoleDecompiler(File destination, Map<String, Object> options, IFernflowerLogger logger) {
     root = destination;
-    engine = new Fernflower(this, root.isDirectory() ? this : new SingleFileSaver(destination), options, logger);
+
+    IResultSaver saver = root.isDirectory() ? this : new SingleFileSaver(destination);
+    engine = new Fernflower(this, saver, options, logger);
   }
 
   public void addSource(File source) {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/PrintStreamLogger.java b/src/org/jetbrains/java/decompiler/main/decompiler/PrintStreamLogger.java
index ff3b9b3dd27f5f07ebc80f6ca4ac3c632c93c83d..4398128ff456563af17a51479e563bb90f5badcb 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/PrintStreamLogger.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/PrintStreamLogger.java
@@ -31,6 +31,22 @@ public class PrintStreamLogger extends IFernflowerLogger {
     }
   }
 
+  @Override
+  public void startProcessingClass(String className) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("PreProcessing class " + className, Severity.INFO);
+      ++indent;
+    }
+  }
+
+  @Override
+  public void endProcessingClass() {
+    if (accepts(Severity.INFO)) {
+      --indent;
+      writeMessage("... done", Severity.INFO);
+    }
+  }
+
   @Override
   public void startReadingClass(String className) {
     if (accepts(Severity.INFO)) {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
new file mode 100644
index 0000000000000000000000000000000000000000..f76d2c1611ec48375c25d489d9713bd876ffcb83
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
@@ -0,0 +1,213 @@
+// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.java.decompiler.main.decompiler;
+
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
+import org.jetbrains.java.decompiler.main.extern.IResultSaver;
+import org.jetbrains.java.decompiler.util.InterpreterUtil;
+
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.jar.JarFile;
+import java.util.jar.Manifest;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import java.util.zip.ZipOutputStream;
+
+/**
+ * File saver supporting both, Threaded saving and 'SingleFile' mode.
+ */
+//TODO, Split off default impl inside ConsoleDecompiler and make this extend that.
+public class ThreadSafeResultSaver implements IResultSaver {
+
+  private final Map<String, ArchiveContext> archiveContexts = new HashMap<>();
+  private final File target;
+  private final boolean archiveMode;//Latch for Archive mode.
+  private ArchiveContext singeArchiveCtx;
+
+  public ThreadSafeResultSaver(File target) {
+    this.target = target;
+    this.archiveMode = !target.isDirectory();
+  }
+
+  private ArchiveContext getCtx(String path) {
+    if (archiveMode) {
+      return singeArchiveCtx;
+    }
+    return archiveContexts.get(path);
+  }
+
+  @Override
+  public void createArchive(String path, String archiveName, Manifest manifest) {
+    if (archiveMode && singeArchiveCtx != null) {
+      throw new UnsupportedOperationException("Attempted to write multiple archives at the same time.");
+    }
+    File file = archiveMode ? target : new File(getAbsolutePath(path), archiveName);
+    ArchiveContext ctx = getCtx(file.getPath());
+    if (ctx != null) {
+      throw new RuntimeException("Archive already open for: " + file);
+    }
+    try {
+      if (!(file.createNewFile() || file.isFile())) {
+        throw new IOException("Cannot create file " + file);
+      }
+      FileOutputStream fos = new FileOutputStream(file);
+      ZipOutputStream zos = new ZipOutputStream(fos);
+      if (manifest != null) {
+        final ZipEntry manifestEntry = new ZipEntry(JarFile.MANIFEST_NAME);
+        manifestEntry.setTime(STABLE_ZIP_TIMESTAMP);
+        zos.putNextEntry(manifestEntry);
+        manifest.write(zos);
+        zos.closeEntry();
+      }
+      ctx = new ArchiveContext(file, zos);
+      if (archiveMode) {
+        singeArchiveCtx = ctx;
+      } else {
+        archiveContexts.put(file.getPath(), ctx);
+      }
+    } catch (IOException e) {
+      DecompilerContext.getLogger().writeMessage("Cannot create archive " + file, e);
+    }
+  }
+
+  @Override
+  public void saveDirEntry(String path, String archiveName, String entryName) {
+    saveClassEntry(path, archiveName, null, entryName, null);
+  }
+
+  @Override
+  public void copyEntry(String source, String path, String archiveName, String entryName) {
+    String file = new File(getAbsolutePath(path), archiveName).getPath();
+    ArchiveContext ctx = getCtx(file);
+    if (ctx == null) {
+      throw new RuntimeException("Archive closed and tried to copy entry '" + entryName + "' from '" + source + "' to '" + file + "'.");
+    }
+    if (!ctx.addEntry(entryName)) {
+      return;
+    }
+    try (ZipFile srcArchive = new ZipFile(new File(source))) {
+      ZipEntry entry = srcArchive.getEntry(entryName);
+      if (entry != null) {
+        try (InputStream in = srcArchive.getInputStream(entry)) {
+          final ZipEntry newEntry = new ZipEntry(entryName);
+          newEntry.setTime(entry.getTime());
+          ctx.stream.putNextEntry(newEntry);
+          InterpreterUtil.copyStream(in, ctx.stream);
+        }
+      }
+    } catch (IOException e) {
+      DecompilerContext.getLogger().writeMessage("Cannot copy entry " + entryName + " from " + source + " to " + file, e);
+    }
+  }
+
+  @Override
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+    String file = new File(getAbsolutePath(path), archiveName).getPath();
+    ArchiveContext ctx = getCtx(file);
+    if (ctx == null) {
+      throw new RuntimeException("Archive closed and tried to write entry '" + entryName + "' to '" + file + "'.");
+    }
+    if (!ctx.addEntry(entryName)) {
+      return;
+    }
+    try {
+      ZipEntry entry = new ZipEntry(entryName);
+      entry.setTime(STABLE_ZIP_TIMESTAMP);
+      ctx.stream.putNextEntry(entry);
+      if (content != null) {
+        ctx.stream.write(content.getBytes(StandardCharsets.UTF_8));
+      }
+    } catch (IOException e) {
+      DecompilerContext.getLogger().writeMessage("Cannot write entry " + entryName + " to " + file, e);
+    }
+  }
+
+  @Override
+  public void closeArchive(String path, String archiveName) {
+    String file = new File(getAbsolutePath(path), archiveName).getPath();
+    ArchiveContext ctx = getCtx(file);
+    if (ctx == null) {
+      throw new RuntimeException("Tried to close closed archive '" + file + "'.");
+    }
+    try {
+      ctx.stream.close();
+    } catch (IOException e) {
+      DecompilerContext.getLogger().writeMessage("Cannot close " + file, IFernflowerLogger.Severity.WARN, e);
+    }
+
+    if (archiveMode) {
+      singeArchiveCtx = null;
+    } else {
+      //We are done.
+      archiveContexts.remove(file);
+    }
+  }
+
+  @Override
+  public void saveFolder(String path) {
+    if (archiveMode) {
+      if (!"".equals(path)) {
+        throw new UnsupportedOperationException("Targeted a single output, but tried to create a directory");
+      }
+      return;
+    }
+    File dir = new File(getAbsolutePath(path));
+    if (!(dir.mkdirs() || dir.isDirectory())) {
+      throw new RuntimeException("Cannot create directory " + dir);
+    }
+  }
+
+  @Override
+  public void copyFile(String source, String path, String entryName) {
+    if (archiveMode) {
+      throw new UnsupportedOperationException("Targeted a single output, but tried to copy file");
+    }
+    try {
+      InterpreterUtil.copyFile(new File(source), new File(getAbsolutePath(path), entryName));
+    } catch (IOException ex) {
+      DecompilerContext.getLogger().writeMessage("Cannot copy " + source + " to " + entryName, ex);
+    }
+  }
+
+  @Override
+  public void saveClassFile(String path, String qualifiedName, String entryName, String content, int[] mapping) {
+    if (archiveMode) {
+      throw new UnsupportedOperationException("Targeted a single output, but tried to save a class file");
+    }
+    File file = new File(getAbsolutePath(path), entryName);
+    try (Writer out = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8)) {
+      out.write(content);
+    } catch (IOException ex) {
+      DecompilerContext.getLogger().writeMessage("Cannot write class file " + file, ex);
+    }
+  }
+
+  private String getAbsolutePath(String path) {
+    return new File(target, path).getAbsolutePath();
+  }
+
+  private static class ArchiveContext {
+
+    public final File file;
+    public final ZipOutputStream stream;
+    public final Set<String> savedEntries = new HashSet<>();
+
+    private ArchiveContext(File file, ZipOutputStream stream) {
+      this.file = file;
+      this.stream = stream;
+    }
+
+    public boolean addEntry(String entryName) {
+      boolean added = savedEntries.add(entryName);
+      if (!added) {
+        DecompilerContext.getLogger().writeMessage("Zip entry " + entryName + " already exists in " + file, IFernflowerLogger.Severity.WARN);
+      }
+      return added;
+    }
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadedPrintStreamLogger.java b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadedPrintStreamLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe8608901ab47ede002a24b3ad2199150bc8bbf0
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadedPrintStreamLogger.java
@@ -0,0 +1,114 @@
+// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.java.decompiler.main.decompiler;
+
+import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
+import org.jetbrains.java.decompiler.util.TextUtil;
+
+import java.io.PrintStream;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ThreadedPrintStreamLogger extends IFernflowerLogger {
+
+  private final PrintStream stream;
+  private final ThreadLocal<AtomicInteger> indent = ThreadLocal.withInitial(AtomicInteger::new);
+
+  public ThreadedPrintStreamLogger(PrintStream printStream) {
+    stream = printStream;
+  }
+
+  @Override
+  public void writeMessage(String message, Severity severity) {
+    if (accepts(severity)) {
+      Thread th = Thread.currentThread();
+      stream.println(th.getName() + ": " + severity.prefix + TextUtil.getIndentString(indent.get().get()) + message);
+    }
+  }
+
+  @Override
+  public void writeMessage(String message, Severity severity, Throwable t) {
+    if (accepts(severity)) {
+      writeMessage(message, severity);
+      t.printStackTrace(stream);
+    }
+  }
+
+  @Override
+  public void startProcessingClass(String className) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("PreProcessing class " + className, Severity.INFO);
+      indent.get().incrementAndGet();
+    }
+  }
+
+  @Override
+  public void endProcessingClass() {
+    if (accepts(Severity.INFO)) {
+      indent.get().decrementAndGet();
+      writeMessage("... done", Severity.INFO);
+    }
+  }
+
+  @Override
+  public void startReadingClass(String className) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("Decompiling class " + className, Severity.INFO);
+      indent.get().incrementAndGet();
+    }
+  }
+
+  @Override
+  public void endReadingClass() {
+    if (accepts(Severity.INFO)) {
+      indent.get().decrementAndGet();
+      writeMessage("... done", Severity.INFO);
+    }
+  }
+
+  @Override
+  public void startClass(String className) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("Processing class " + className, Severity.TRACE);
+      indent.get().decrementAndGet();
+    }
+  }
+
+  @Override
+  public void endClass() {
+    if (accepts(Severity.INFO)) {
+      indent.get().decrementAndGet();
+      writeMessage("... proceeded", Severity.TRACE);
+    }
+  }
+
+  @Override
+  public void startMethod(String methodName) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("Processing method " + methodName, Severity.TRACE);
+      indent.get().decrementAndGet();
+    }
+  }
+
+  @Override
+  public void endMethod() {
+    if (accepts(Severity.INFO)) {
+      indent.get().decrementAndGet();
+      writeMessage("... proceeded", Severity.TRACE);
+    }
+  }
+
+  @Override
+  public void startWriteClass(String className) {
+    if (accepts(Severity.INFO)) {
+      writeMessage("Writing class " + className, Severity.TRACE);
+      indent.get().decrementAndGet();
+    }
+  }
+
+  @Override
+  public void endWriteClass() {
+    if (accepts(Severity.INFO)) {
+      indent.get().decrementAndGet();
+      writeMessage("... written", Severity.TRACE);
+    }
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerLogger.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerLogger.java
index c9ece039b0d986c1d84b62426a65e6780ddc80e1..3ca43800b47e1d26a1dc036f21cb6e6e83ed5138 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerLogger.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerLogger.java
@@ -31,6 +31,10 @@ public abstract class IFernflowerLogger {
     writeMessage(message, Severity.ERROR, t);
   }
 
+  public void startProcessingClass(String className) {}
+
+  public void endProcessingClass() { }
+
   public void startReadingClass(String className) { }
 
   public void endReadingClass() { }
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 86fd580e52b9534c2750139512ba84739308eead..7bcb5652188642db925a5915f8b743fd14b0e328 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -39,6 +39,7 @@ public interface IFernflowerPreferences {
   String QUALIFY_INNER_CLASSES = "qin";
   String EXPLICIT_GENERIC_ARGUMENTS = "ega";
   String INLINE_SIMPLE_LAMBDAS = "isl";
+  String THREADS = "thr";
 
   String LOG_LEVEL = "log";
   String MAX_PROCESSING_METHOD = "mpm";
@@ -94,6 +95,7 @@ public interface IFernflowerPreferences {
     defaults.put(QUALIFY_INNER_CLASSES, "1");
     defaults.put(EXPLICIT_GENERIC_ARGUMENTS, "0");
     defaults.put(INLINE_SIMPLE_LAMBDAS, "1");
+    defaults.put(THREADS, "AUTO");
 
     defaults.put(LOG_LEVEL, IFernflowerLogger.Severity.INFO.name());
     defaults.put(MAX_PROCESSING_METHOD, "0");
diff --git a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
index c33a9aa83f61a22940b1864d6bbfcdd7ba78e38d..4e64b70da8fe886801e027a7ae6c0e59f94cf62a 100644
--- a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
+++ b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
@@ -14,8 +14,14 @@ import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 import java.util.zip.ZipFile;
 
 public class ContextUnit {
@@ -121,7 +127,10 @@ public class ContextUnit {
           }
           String entryName = decompiledData.getClassEntryName(cl, classEntries.get(i));
           if (entryName != null) {
-            String content = decompiledData.getClassContent(cl);
+            String content = null;
+            if (decompiledData.processClass(cl)) {
+              content = decompiledData.getClassContent(cl);
+            }
             if (content != null) {
               int[] mapping = null;
               if (DecompilerContext.getOption(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING)) {
@@ -152,13 +161,51 @@ public class ContextUnit {
           }
         }
 
+        //Whooo threads!
+        int threads = DecompilerContext.getThreads();
+        DecompilerContext rootContext = DecompilerContext.getCurrentContext();
+        ExecutorService executor = threads > 0 ? Executors.newFixedThreadPool(threads) : Executors.newSingleThreadExecutor();
+
+        //Compute the classes we need to decomp.
+        List<ClassContext> toProcess = IntStream.range(0, classes.size()).parallel()
+          .mapToObj(i -> {
+            StructClass cl = classes.get(i);
+            return new ClassContext(cl, decompiledData.getClassEntryName(cl, classEntries.get(i)));
+          })
+          .filter(e -> e.entryName != null)
+          .collect(Collectors.toList());
+        List<Future<?>> futures = new ArrayList<>(toProcess.size());
+
+        //Submit preprocessor jobs.
+        for (ClassContext clCtx : toProcess) {
+          futures.add(executor.submit(() -> {
+            DecompilerContext.cloneContext(rootContext);
+            clCtx.ctx = DecompilerContext.getCurrentContext();
+            clCtx.shouldContinue = decompiledData.processClass(clCtx.cl);
+            DecompilerContext.setCurrentContext(null);
+          }));
+        }
+
+        //Ask the executor to shutdown
+        waitForAll(futures);
+        futures.clear();
+
         // classes
-        for (int i = 0; i < classes.size(); i++) {
-          StructClass cl = classes.get(i);
-          String entryName = decompiledData.getClassEntryName(cl, classEntries.get(i));
-          if (entryName != null) {
-            String content = decompiledData.getClassContent(cl);
-            resultSaver.saveClassEntry(archivePath, filename, cl.qualifiedName, entryName, content);
+        for (ClassContext clCtx : toProcess) {
+          if (clCtx.shouldContinue) {
+            futures.add(executor.submit(() -> {
+              DecompilerContext.setCurrentContext(clCtx.ctx);
+              clCtx.classContent = decompiledData.getClassContent(clCtx.cl);
+              DecompilerContext.setCurrentContext(null);
+            }));
+          }
+        }
+        executor.shutdown();
+        waitForAll(futures);
+
+        for (final ClassContext clCtx : toProcess) {
+          if (clCtx.shouldContinue) {
+            resultSaver.saveClassEntry(archivePath, filename, clCtx.cl.qualifiedName, clCtx.entryName, clCtx.classContent);
           }
         }
 
@@ -166,6 +213,16 @@ public class ContextUnit {
     }
   }
 
+  private static void waitForAll(List<Future<?>> futures) {
+    for (Future<?> future : futures) {
+      try {
+        future.get();
+      } catch (InterruptedException | ExecutionException e) {
+        throw new RuntimeException(e);
+      }
+    }
+  }
+
   public void setManifest(Manifest manifest) {
     this.manifest = manifest;
   }
@@ -177,4 +234,18 @@ public class ContextUnit {
   public List<StructClass> getClasses() {
     return classes;
   }
+
+  private static class ClassContext {
+    public final StructClass cl;
+    public final String entryName;
+    public boolean shouldContinue;
+    public DecompilerContext ctx;
+    String classContent;
+
+    private ClassContext(StructClass cl, String entryName) {
+      this.cl = cl;
+      this.entryName = entryName;
+    }
+  }
+
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/IDecompiledData.java b/src/org/jetbrains/java/decompiler/struct/IDecompiledData.java
index b3b38dd0c7fca39a4b90d2dd0bf9b91fb8ec2568..356a2a40d9e2834bbdf114c5b4745e72570e8ac6 100644
--- a/src/org/jetbrains/java/decompiler/struct/IDecompiledData.java
+++ b/src/org/jetbrains/java/decompiler/struct/IDecompiledData.java
@@ -5,5 +5,7 @@ public interface IDecompiledData {
 
   String getClassEntryName(StructClass cl, String entryname);
 
+  boolean processClass(StructClass cl);
+
   String getClassContent(StructClass cl);
 }
