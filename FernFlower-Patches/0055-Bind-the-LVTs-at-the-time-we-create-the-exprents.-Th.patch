From b065f7aef331543501429be47e0f36a22933c617 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Thu, 24 Sep 2015 12:48:31 -0400
Subject: [PATCH 055/122] Bind the LVTs at the time we create the exprents. The
 offset is absolute at that point, and won't be incorrect.

---
 .../decompiler/modules/decompiler/ExprProcessor.java | 10 +++++++---
 .../modules/decompiler/vars/LocalVariableTable.java  |  8 ++------
 .../modules/decompiler/vars/VarDefinitionHelper.java |  3 +--
 .../modules/decompiler/vars/VarProcessor.java        | 12 +++++++++---
 test/org/jetbrains/java/decompiler/LVTTest.java      |  6 +++---
 5 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 0425fbc..7b94e5b 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -382,7 +382,9 @@ public class ExprProcessor implements CodeConstants {
         case opc_fload:
         case opc_dload:
         case opc_aload:
-          pushEx(stack, exprlist, new VarExprent(instr.getOperand(0), vartypes[instr.opcode - opc_iload], varProcessor));
+          VarExprent varExprent = new VarExprent(instr.getOperand(0), vartypes[instr.opcode - opc_iload], varProcessor);
+          varProcessor.findLVT(varExprent, bytecode_offset+instr.length());
+          pushEx(stack, exprlist, varExprent);
           break;
         case opc_iaload:
         case opc_laload:
@@ -412,8 +414,9 @@ public class ExprProcessor implements CodeConstants {
         case opc_astore:
           Exprent top = stack.pop();
           int varindex = instr.getOperand(0);
-          AssignmentExprent assign =
-            new AssignmentExprent(new VarExprent(varindex, vartypes[instr.opcode - opc_istore], varProcessor), top, bytecode_offsets);
+          varExprent = new VarExprent(varindex, vartypes[instr.opcode - opc_istore], varProcessor);
+          varProcessor.findLVT(varExprent, bytecode_offset+instr.length());
+          AssignmentExprent assign = new AssignmentExprent(varExprent, top, bytecode_offsets);
           exprlist.add(assign);
           break;
         case opc_iastore:
@@ -475,6 +478,7 @@ public class ExprProcessor implements CodeConstants {
           break;
         case opc_iinc:
           VarExprent vevar = new VarExprent(instr.getOperand(0), VarType.VARTYPE_INT, varProcessor);
+          varProcessor.findLVT(vevar,bytecode_offset+instr.length());
           exprlist.add(new AssignmentExprent(vevar, new FunctionExprent(
             instr.getOperand(1) < 0 ? FunctionExprent.FUNCTION_SUB : FunctionExprent.FUNCTION_ADD, Arrays
             .asList(vevar.copy(), new ConstExprent(VarType.VARTYPE_INT, Math.abs(instr.getOperand(1)), null)),
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index fe45b11..4193f56 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -41,11 +41,7 @@ public class LocalVariableTable {
     mapLVT = null; // Invalidate the cache and rebuild it.
   }
 
-  public LVTVariable find(int index, Statement stat) {
-    BitSet values = new BitSet();
-    MethodProcessorRunnable.getOffset(stat, values);
-    int start = values.nextSetBit(0);
-    int end = values.length()-1;
+  public LVTVariable find(int index, Integer bytecodeOffset) {
     //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
 
     Map<Integer, List<LVTVariable>> map = getMapVarNames();
@@ -53,7 +49,7 @@ public class LocalVariableTable {
       return null;
     }
     for (LVTVariable lvt : map.get(index)) {
-      if (lvt.start >= start && lvt.end <= end) {
+      if (lvt.start == bytecodeOffset) {
         return lvt;
       }
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 9ecb28b..6d8ab12 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -133,7 +133,7 @@ public class VarDefinitionHelper {
     for (Entry<Integer, Statement> en : mapVarDefStatements.entrySet()) {
       Statement stat = en.getValue();
       Integer index = en.getKey();
-      setupLVTs(stat);
+//      setupLVTs(stat);
 
       if (implDefVars.contains(index)) {
         // already implicitly defined
@@ -452,7 +452,6 @@ if (mt.getName().equals("func_180655_c")){
     }
     return null;
   }
-
   private VPPEntry mergeVars(Statement stat, Map<Integer, VarVersionPair> parent, Map<Integer, VarVersionPair> leaked, Map<VarVersionPair, VarVersionPair> blacklist) {
     Map<Integer, VarVersionPair> this_vars = new HashMap<Integer, VarVersionPair>();
     if (parent.size() > 0)
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index 691797e..bbf17ad 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -17,6 +17,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.vars;
 
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.VarNamesCollector;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 import org.jetbrains.java.decompiler.struct.StructMethod;
@@ -125,7 +126,9 @@ public class VarProcessor {
   }
 
   public void setVarType(VarVersionPair pair, VarType type) {
-    varVersions.setVarType(pair, type);
+    if (varVersions != null) {
+        varVersions.setVarType(pair, type);
+    }
   }
 
   public String getVarName(VarVersionPair pair) {
@@ -160,8 +163,11 @@ public class VarProcessor {
     return this.lvt;
   }
 
-  public LVTVariable findLVT(int index, Statement stat) {
-    return this.lvt == null ? null : lvt.find(index, stat);
+  public void findLVT(VarExprent varExprent, int bytecodeOffset) {
+    LVTVariable var = this.lvt == null ? null : lvt.find(varExprent.getIndex(), bytecodeOffset);
+    if (var != null) {
+        varExprent.setLVT(var);
+    }
   }
 
   public int getRemapped(int index) {
diff --git a/test/org/jetbrains/java/decompiler/LVTTest.java b/test/org/jetbrains/java/decompiler/LVTTest.java
index 52428c7..d4771bb 100644
--- a/test/org/jetbrains/java/decompiler/LVTTest.java
+++ b/test/org/jetbrains/java/decompiler/LVTTest.java
@@ -42,13 +42,13 @@ public class LVTTest extends SingleClassesTestBase {
 //  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
 //  @Test public void testMCGuiCmdBlock() { doTest("net/minecraft/client/gui/GuiCommandBlock"); }
 
-//  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
+  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
 
 //  @Test public void testMCGuiCmdBlock() { doTest("net/minecraft/client/gui/GuiCommandBlock"); }
 
 //  @Test public void testMCBlockFence() { doTest("net/minecraft/block/BlockFence"); }
 
 //  @Test public void testMCAbstractTexture() { doTest("net/minecraft/client/multiplayer/ServerAddress"); }
-//  @Test public void testMCAbstractTexture() { doTest("net/minecraft/client/resources/AbstractResourcePack"); }
-  @Test public void testMCGuiShareToLan() { doTest("net/minecraft/client/gui/GuiShareToLan"); }
+//  @Test public void testMCAbstractResourcePack() { doTest("net/minecraft/client/resources/AbstractResourcePack"); }
+//  @Test public void testMCGuiShareToLan() { doTest("net/minecraft/client/gui/GuiShareToLan"); }
 }
-- 
2.21.0.windows.1

