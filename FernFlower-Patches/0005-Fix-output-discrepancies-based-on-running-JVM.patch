From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Apr 2017 10:08:10 -0700
Subject: [PATCH] Fix output discrepancies based on running JVM


diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 0041f13df8b5336da5b9891df0e399cbc2de4e3c..a34758940dbce0c5bac8dff269386af752c63d91 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -229,6 +229,7 @@ public class ClassesProcessor implements CodeConstants {
                 stack.add(nestedClass);
               }
             }
+            Collections.sort(superNode.nested);
           }
         }
       }
@@ -424,7 +425,7 @@ public class ClassesProcessor implements CodeConstants {
   }
 
 
-  public static class ClassNode {
+  public static class ClassNode implements Comparable<ClassNode> {
     public static final int CLASS_ROOT = 0;
     public static final int CLASS_MEMBER = 1;
     public static final int CLASS_ANONYMOUS = 2;
@@ -506,6 +507,12 @@ public class ClassesProcessor implements CodeConstants {
       return node.wrapper;
     }
 
+    @Override
+    public int compareTo(ClassNode o) {
+      //TODO: Take line numbers into account?
+      return this.classStruct.qualifiedName.compareTo(o.classStruct.qualifiedName);
+    }
+
     public static class LambdaInformation {
       public String method_name;
       public String method_descriptor;
diff --git a/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
index fd0f261cf8fb07c523b5a870e8a4c3a54a96f2ef..36156fe90fcde67b25a50af529eca1209cfbce55 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
@@ -108,6 +108,8 @@ public class LambdaProcessor {
       mt.releaseResources();
     }
 
+    Collections.sort(node.nested);
+
     // build class hierarchy on lambda
     for (ClassNode nd : node.nested) {
       if (nd.type == ClassNode.CLASS_LAMBDA) {
@@ -117,6 +119,7 @@ public class LambdaProcessor {
 
           parent_class.nested.add(nd);
           nd.parent = parent_class;
+          Collections.sort(parent_class.nested);
         }
       }
     }
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index da175324e5b04e7980225f97d1b30d729d5d46a2..3625c482744fe98f41fda3736355c50b7ed514e6 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -217,6 +217,7 @@ public class NestedClassProcessor {
       if (setEnclosing.contains(node.classStruct.qualifiedName)) {
         node.nested.add(child);
         child.parent = node;
+        Collections.sort(node.nested);
 
         return true;
       }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
index 2c5e3eb49c1e030cb847c803bcf984909b37e414..bc3cb3311e6b132f46025ed498a6fc7e6d583d02 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
@@ -193,7 +193,7 @@ public class DomHelper {
 
     RootStatement root = graphToStatement(graph);
 
-    if (!processStatement(root, new HashMap<>())) {
+    if (!processStatement(root, new LinkedHashMap<>())) {
 
       //			try {
       //				DotExporter.toDotFile(root.getFirst().getStats().get(13), new File("c:\\Temp\\stat1.dot"));
@@ -203,7 +203,7 @@ public class DomHelper {
       throw new RuntimeException("parsing failure!");
     }
 
-    LabelHelper.lowContinueLabels(root, new HashSet<>());
+    LabelHelper.lowContinueLabels(root, new LinkedHashSet<>());
 
     SequenceHelper.condenseSequences(root);
     root.buildMonitorFlags();
@@ -466,11 +466,11 @@ public class DomHelper {
 
         boolean same = (post == head);
 
-        HashSet<Statement> setNodes = new HashSet<>();
+        HashSet<Statement> setNodes = new LinkedHashSet<>();
         HashSet<Statement> setPreds = new HashSet<>();
 
         // collect statement nodes
-        HashSet<Statement> setHandlers = new HashSet<>();
+        HashSet<Statement> setHandlers = new LinkedHashSet<>();
         setHandlers.add(head);
         while (true) {
 
@@ -615,7 +615,7 @@ public class DomHelper {
               set.removeAll(setOldNodes);
 
               if (setOldNodes.contains(key)) {
-                mapExtPost.computeIfAbsent(newid, k -> new HashSet<>()).addAll(set);
+                mapExtPost.computeIfAbsent(newid, k -> new LinkedHashSet<>()).addAll(set);
                 mapExtPost.remove(key);
               }
               else {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 966cd442c8b991aeae0055a114f01426debb59da..010566ba18cc005e72ddcbf7eea17f0f533a87d9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -797,6 +797,7 @@ public class ExprProcessor implements CodeConstants {
     }
 
     TextBuffer buf = new TextBuffer();
+    lst = Exprent.sortIndexed(lst);
 
     for (Exprent expr : lst) {
       if (buf.length() > 0 && expr.type == Exprent.EXPRENT_VAR && ((VarExprent)expr).isClassDef()) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
index 240ee3e49c333d052cad169661a1e241042ee55b..bcd6a6c52620e19cf9f7cba7679dfe493ee54528 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
@@ -486,10 +486,17 @@ public class FinallyProcessor {
     // so remove dummy exit
     startBlocks.remove(graph.getLast());
     startBlocks.removeAll(tryBlocks);
+    List<BasicBlock> starts = new ArrayList<BasicBlock>(startBlocks);
+    Collections.sort(starts, new Comparator<BasicBlock>() {
+      @Override
+      public int compare(BasicBlock o1, BasicBlock o2) {
+        return o2.id - o1.id;
+      }
+    });
 
     List<Area> lstAreas = new ArrayList<>();
 
-    for (BasicBlock start : startBlocks) {
+    for (BasicBlock start : starts) {
 
       Area arr = compareSubgraphsEx(graph, start, catchBlocks, first, finallytype, mapLast, skippedFirst);
       if (arr == null) {
@@ -512,8 +519,17 @@ public class FinallyProcessor {
     //			DotExporter.toDotFile(graph, new File("c:\\Temp\\fern5.dot"), true);
     //		} catch(Exception ex){ex.printStackTrace();}
 
+    List<Entry<BasicBlock, Boolean>> lasts = new ArrayList<Entry<BasicBlock, Boolean>>(mapLast.entrySet());
+    // We must sort here to prevent decompile differences deriving from hash maps.
+    Collections.sort(lasts, new Comparator<Entry<BasicBlock, Boolean>>() {
+      @Override
+      public int compare(Entry<BasicBlock, Boolean> o1, Entry<BasicBlock, Boolean> o2) {
+        return o1.getKey().id - o2.getKey().id;
+      }
+    });
+
     // INFO: empty basic blocks may remain in the graph!
-    for (Entry<BasicBlock, Boolean> entry : mapLast.entrySet()) {
+    for (Entry<BasicBlock, Boolean> entry : lasts) {
       BasicBlock last = entry.getKey();
 
       if (entry.getValue()) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
index 9c150b51644beabafdf832a7fdcdbddecbfe9500..017218b7bee3fbf993b890b4e007f65c0a84f177 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
@@ -19,7 +19,7 @@ public class LabelHelper {
 
     liftClosures(root);
 
-    lowContinueLabels(root, new HashSet<>());
+    lowContinueLabels(root, new LinkedHashSet<>());
 
     lowClosures(root);
   }
@@ -117,7 +117,7 @@ public class LabelHelper {
         lowContinueLabels(st, edges);
       }
       else {
-        lowContinueLabels(st, new HashSet<>());
+        lowContinueLabels(st, new LinkedHashSet<>());
       }
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
index d8b587fff8b748fd4187453c31a5b39e43bc8ecb..318d95cd5427cda3ec721797c181fe68cb95b6db 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
@@ -13,10 +13,10 @@ public class DominatorTreeExceptionFilter {
   private final Statement statement;
 
   // idom, nodes
-  private final Map<Integer, Set<Integer>> mapTreeBranches = new HashMap<>();
+  private final Map<Integer, Set<Integer>> mapTreeBranches = new LinkedHashMap<>();
 
   // handler, range nodes
-  private final Map<Integer, Set<Integer>> mapExceptionRanges = new HashMap<>();
+  private final Map<Integer, Set<Integer>> mapExceptionRanges = new LinkedHashMap<>();
 
   // handler, head dom
   private Map<Integer, Integer> mapExceptionDoms = new HashMap<>();
@@ -66,7 +66,7 @@ public class DominatorTreeExceptionFilter {
     for (int index = lstKeys.size() - 1; index >= 0; index--) {
       Integer key = lstKeys.get(index);
       Integer idom = orderedIDoms.get(index);
-      mapTreeBranches.computeIfAbsent(idom, k -> new HashSet<>()).add(key);
+      mapTreeBranches.computeIfAbsent(idom, k -> new LinkedHashSet<>()).add(key);
     }
 
     Integer firstid = statement.getFirst().id;
@@ -78,7 +78,7 @@ public class DominatorTreeExceptionFilter {
       List<Statement> lstPreds = stat.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD);
       if (!lstPreds.isEmpty()) {
 
-        Set<Integer> set = new HashSet<>();
+        Set<Integer> set = new LinkedHashSet<>();
 
         for (Statement st : lstPreds) {
           set.add(st.id);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
index 71ef24b4bf403112f7c5438c135ec06c7e452c80..e8568f4a93c65c6ac1f7b102ac800724531d9d05 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
@@ -14,9 +14,9 @@ public class FastExtendedPostdominanceHelper {
 
   private List<Statement> lstReversePostOrderList;
 
-  private HashMap<Integer, FastFixedSet<Integer>> mapSupportPoints = new HashMap<>();
+  private HashMap<Integer, FastFixedSet<Integer>> mapSupportPoints = new LinkedHashMap<>();
 
-  private final HashMap<Integer, FastFixedSet<Integer>> mapExtPostdominators = new HashMap<>();
+  private final HashMap<Integer, FastFixedSet<Integer>> mapExtPostdominators = new LinkedHashMap<>();
 
   private Statement statement;
 
@@ -26,7 +26,7 @@ public class FastExtendedPostdominanceHelper {
 
     this.statement = statement;
 
-    HashSet<Integer> set = new HashSet<>();
+    HashSet<Integer> set = new LinkedHashSet<>();
     for (Statement st : statement.getStats()) {
       set.add(st.id);
     }
@@ -54,7 +54,9 @@ public class FastExtendedPostdominanceHelper {
     Set<Entry<Integer, FastFixedSet<Integer>>> entries = mapExtPostdominators.entrySet();
     HashMap<Integer, Set<Integer>> res = new HashMap<>(entries.size());
     for (Entry<Integer, FastFixedSet<Integer>> entry : entries) {
-      res.put(entry.getKey(), entry.getValue().toPlainSet());
+      List<Integer> lst = new ArrayList<>(entry.getValue().toPlainSet());
+      Collections.sort(lst); // Order Matters!
+      res.put(entry.getKey(), new LinkedHashSet<>(lst));
     }
 
     return res;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 9fa58125289555ee7a4c565574acf74afcc413d0..691d613050f89cce24136dc957a38b65cc51fc4c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -177,15 +177,15 @@ public class ConstExprent extends Exprent {
           }
         }
         else if (Float.isNaN(floatVal)) {
-          return new TextBuffer("0.0F / 0.0");
+          return new TextBuffer("0.0F / 0.0F");
         }
         else if (floatVal == Float.POSITIVE_INFINITY) {
-          return new TextBuffer("1.0F / 0.0");
+          return new TextBuffer("1.0F / 0.0F");
         }
         else if (floatVal == Float.NEGATIVE_INFINITY) {
-          return new TextBuffer("-1.0F / 0.0");
+          return new TextBuffer("-1.0F / 0.0F");
         }
-        return new TextBuffer(value.toString()).append('F');
+        return new TextBuffer(trimZeros(value.toString())).append('F');
 
       case CodeConstants.TYPE_DOUBLE:
         double doubleVal = (Double)value;
@@ -207,15 +207,15 @@ public class ConstExprent extends Exprent {
           }
         }
         else if (Double.isNaN(doubleVal)) {
-          return new TextBuffer("0.0D / 0.0");
+          return new TextBuffer("0.0D / 0.0D");
         }
         else if (doubleVal == Double.POSITIVE_INFINITY) {
-          return new TextBuffer("1.0D / 0.0");
+          return new TextBuffer("1.0D / 0.0D");
         }
         else if (doubleVal == Double.NEGATIVE_INFINITY) {
-          return new TextBuffer("-1.0D / 0.0");
+          return new TextBuffer("-1.0D / 0.0D");
         }
-        return new TextBuffer(value.toString()).append('D');
+        return new TextBuffer(trimZeros(value.toString())).append('D');
 
       case CodeConstants.TYPE_NULL:
         return new TextBuffer("null");
@@ -233,6 +233,18 @@ public class ConstExprent extends Exprent {
 
     throw new RuntimeException("invalid constant type: " + constType);
   }
+  
+  // Different JVM implementations/version display Floats and Doubles with different number of trailing zeros.
+  // This trims them all down to only the necessary amount.
+  private static String trimZeros(String value) {
+      int i = value.length() - 1;
+      while (i >= 0 && value.charAt(i) == '0') {
+          i--;
+      }
+      if (value.charAt(i) == '.')
+        i++;
+      return value.substring(0, i + 1);
+  }
 
   public boolean isNull() {
     return CodeConstants.TYPE_NULL == constType.type;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index cc1f537e71af0748b7b97d7d8489198e2a677cc9..0994d9466eda95b46d3f234bf977e8e9aa0e0899 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -15,7 +15,10 @@ import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map.Entry;
@@ -131,6 +134,38 @@ public class Exprent implements IMatchable {
     }
   }
 
+  public static List<? extends Exprent> sortIndexed(List<? extends Exprent> lst) {
+      List<Exprent> ret = new ArrayList<Exprent>();
+      List<VarExprent> defs = new ArrayList<VarExprent>();
+
+      Comparator<VarExprent> comp = new Comparator<VarExprent>() {
+        public int compare(VarExprent o1, VarExprent o2) {
+          return o1.getIndex() - o2.getIndex();
+        }
+      };
+
+      for (Exprent exp : lst) {
+        boolean isDef = exp instanceof VarExprent && ((VarExprent)exp).isDefinition();
+        if (!isDef) {
+          if (defs.size() > 0) {
+            Collections.sort(defs, comp);
+            ret.addAll(defs);
+            defs.clear();
+          }
+          ret.add(exp);
+        }
+        else {
+          defs.add((VarExprent)exp);
+        }
+      }
+
+      if (defs.size() > 0) {
+        Collections.sort(defs, comp);
+        ret.addAll(defs);
+      }
+      return ret;
+    }
+  
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
index 29e7030a24be3d75161885ae1adf38cf5a94a001..6efce5e4b043b2dcb58b4dc21f85da9ac9081a7a 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
@@ -22,6 +22,7 @@ import org.jetbrains.java.decompiler.util.SFormsFastMapDirect;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.ArrayList;
 import java.util.Map.Entry;
 
 public class SSAConstructorSparseEx {
@@ -56,7 +57,7 @@ public class SSAConstructorSparseEx {
     // DotExporter.toDotFile(dgraph, new File("c:\\Temp\\gr12_my.dot"));
     // } catch(Exception ex) {ex.printStackTrace();}
 
-    HashSet<Integer> setInit = new HashSet<>();
+    List<Integer> setInit = new ArrayList<>();
     for (int i = 0; i < 64; i++) {
       setInit.add(i);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
index 4edec05872a22da324cb24961825b9d66811a5e2..f5719d1a14fc0fd41393e44fe84e0d3c9370d323 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
@@ -71,7 +71,7 @@ public class SSAUConstructorSparseEx {
     FlattenStatementsHelper flatthelper = new FlattenStatementsHelper();
     DirectGraph dgraph = flatthelper.buildDirectGraph(root);
 
-    HashSet<Integer> setInit = new HashSet<>();
+    List<Integer> setInit = new ArrayList<>();
     for (int i = 0; i < 64; i++) {
       setInit.add(i);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
index 0891a4758e43affe4c8f7df991a79bd9475cafc8..c098f3be7e2b67de21ea499ca5e12f120b47572e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
@@ -5,7 +5,8 @@ import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.Collection;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.Set;
 
 
 public class GeneralStatement extends Statement {
@@ -25,7 +26,7 @@ public class GeneralStatement extends Statement {
     first = head;
     stats.addWithKey(head, head.id);
 
-    HashSet<Statement> set = new HashSet<>(statements);
+    Set<Statement> set = new LinkedHashSet<>(statements);
     set.remove(head);
 
     for (Statement st : set) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
index ab48eccfcad8e5b0f58ad6bb401587b1d71bab2d..e14648190ba6e309992149b9a60105a53caacf9f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
@@ -63,7 +63,15 @@ public class SwitchStatement extends Statement {
 
     default_edge = head.getSuccessorEdges(Statement.STATEDGE_DIRECT_ALL).get(0);
 
-    for (Statement st : lstNodes) {
+    //We need to use set above in case we have multiple edges to the same node. But HashSets iterator is not ordered, so sort
+    List<Statement> sorted = new ArrayList<>(lstNodes);
+    Collections.sort(sorted, new Comparator<Statement>() {
+      @Override
+      public int compare(Statement o1, Statement o2) {
+        return o1.id - o2.id;
+      }
+    });
+    for (Statement st : sorted) {
       stats.addWithKey(st, st.id);
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
index adbb6fd39f8dca8e6ef97916354e3cb4e59340c9..c211d680fe9d488b302c92e0ad1ba37f233675ec 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
@@ -215,7 +215,10 @@ public class VarVersionsProcessor {
     Map<Integer, Integer> mapOriginalVarIndices = new HashMap<>();
 
     // map var-version pairs on new var indexes
-    for (VarVersionPair pair : new ArrayList<>(mapExprentMinTypes.keySet())) {
+    List<VarVersionPair> vvps = new ArrayList<>(mapExprentMinTypes.keySet());
+    Collections.sort(vvps, (o1, o2) -> o1.var != o2.var ?  o1.var - o2.var : o1.version - o2.version);
+
+    for (VarVersionPair pair : vvps) {
 
       if (pair.version >= 0) {
         int newIndex = pair.version == 1 ? pair.var : counters.getCounterAndIncrement(CounterContainer.VAR_COUNTER);
diff --git a/testData/results/MoreAnnotations.dec b/testData/results/MoreAnnotations.dec
index 37302cc3db53fe0bbcfdab2e7a9653812a320235..069c0334a1df23c17159f8f199045438559b7687 100644
--- a/testData/results/MoreAnnotations.dec
+++ b/testData/results/MoreAnnotations.dec
@@ -34,8 +34,8 @@ public @interface MoreAnnotations {
    @MoreAnnotations(
       intArray = {1, 0, 2147483647, -2147483648},
       byteArray = {1, 0, 127, -128, -1},
-      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0, 1.0F / 0.0, -1.0F / 0.0},
-      doubleArray = {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0, 1.0D / 0.0, -1.0D / 0.0},
+      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F},
+      doubleArray = {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0D, 1.0D / 0.0D, -1.0D / 0.0D},
       booleanArray = {true, false},
       shortArray = {1, 0, 32767, -32768, -1},
       longArray = {1L, 0L, 9223372036854775807L, -9223372036854775808L},
@@ -51,9 +51,9 @@ public @interface MoreAnnotations {
 
    byte byteValue() default 1;
 
-   float floatValue() default 1.0F / 0.0;
+   float floatValue() default 1.0F / 0.0F;
 
-   double doubleValue() default 0.0D / 0.0;
+   double doubleValue() default 0.0D / 0.0D;
 
    boolean booleanValue() default true;
 
@@ -75,9 +75,9 @@ public @interface MoreAnnotations {
 
    byte[] byteArray() default {1, 0, 127, -128, -1};
 
-   float[] floatArray() default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0, 1.0F / 0.0, -1.0F / 0.0};
+   float[] floatArray() default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F};
 
-   double[] doubleArray() default {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0, 1.0D / 0.0, -1.0D / 0.0};
+   double[] doubleArray() default {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0D, 1.0D / 0.0D, -1.0D / 0.0D};
 
    boolean[] booleanArray() default {true, false};
 
@@ -95,13 +95,13 @@ public @interface MoreAnnotations {
 
    Class<? extends CharSequence>[] classArray() default {CharSequence.class, String.class, StringBuilder.class};
 
+   public @interface NestedAnnotation {
+      String value() default "MyString";
+   }
+
    public static enum TestEnum {
       FirstValue,
       SecondValue;
    }
-
-   public @interface NestedAnnotation {
-      String value() default "MyString";
-   }
 }
 
diff --git a/testData/results/TestAnonymousClass.dec b/testData/results/TestAnonymousClass.dec
index 924b7641e3454daf3ce738de750dfcfa587fa18d..14c92f960012ea63747096f9237fca7ee5e70ced 100644
--- a/testData/results/TestAnonymousClass.dec
+++ b/testData/results/TestAnonymousClass.dec
@@ -67,15 +67,8 @@ public abstract class TestAnonymousClass {
       boolean var1 = true;// 39
    }// 40
 
-   static class InnerRecursive {
-      TestAnonymousClass.InnerRecursive r;
-
-      public InnerRecursive(TestAnonymousClass.InnerRecursive var1) {
-         this.r = var1;// 105
-      }// 106
-
-      void foo() {
-      }// 110
+   interface I {
+      void foo() throws Exception;
    }
 
    private static class Inner {
@@ -87,8 +80,15 @@ public abstract class TestAnonymousClass {
       };
    }
 
-   interface I {
-      void foo() throws Exception;
+   static class InnerRecursive {
+      TestAnonymousClass.InnerRecursive r;
+
+      public InnerRecursive(TestAnonymousClass.InnerRecursive var1) {
+         this.r = var1;// 105
+      }// 106
+
+      void foo() {
+      }// 110
    }
 }
 
@@ -180,24 +180,24 @@ class 'pkg/TestAnonymousClass' {
    }
 }
 
+class 'pkg/TestAnonymousClass$Inner$1' {
+   method 'run ()V' {
+      0      76
+      1      76
+      2      77
+      3      77
+      4      78
+   }
+}
+
 class 'pkg/TestAnonymousClass$InnerRecursive' {
    method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
-      6      73
-      9      74
+      6      86
+      9      87
    }
 
    method 'foo ()V' {
-      0      77
-   }
-}
-
-class 'pkg/TestAnonymousClass$Inner$1' {
-   method 'run ()V' {
-      0      83
-      1      83
-      2      84
-      3      84
-      4      85
+      0      90
    }
 }
 
@@ -223,9 +223,9 @@ Lines mapping:
 53 <-> 18
 54 <-> 19
 55 <-> 20
-66 <-> 84
-67 <-> 85
-68 <-> 86
+66 <-> 77
+67 <-> 78
+68 <-> 79
 75 <-> 24
 76 <-> 25
 77 <-> 26
@@ -234,9 +234,9 @@ Lines mapping:
 91 <-> 37
 92 <-> 38
 93 <-> 39
-105 <-> 74
-106 <-> 75
-110 <-> 78
+105 <-> 87
+106 <-> 88
+110 <-> 91
 Not mapped:
 18
 104
diff --git a/testData/results/TestAnonymousClassConstructor.dec b/testData/results/TestAnonymousClassConstructor.dec
index 66960ce40f72703d3577549847d033f011007834..63abd4acbe8cf73eb9628724b632af1a9ca231a3 100644
--- a/testData/results/TestAnonymousClassConstructor.dec
+++ b/testData/results/TestAnonymousClassConstructor.dec
@@ -65,16 +65,16 @@ class TestAnonymousClassConstructor {
       System.out.println("n(): " + s);// 53
    }// 54
 
-   static class InnerStaticPublic {
-      public InnerStaticPublic(long a, int b) {
-         TestAnonymousClassConstructor.n(a + "+" + b);// 100
-      }// 101
+   class InnerPrivate {
+      private InnerPrivate(long a, int b) {
+         TestAnonymousClassConstructor.n(a + "+" + b);// 64
+      }// 65
    }
 
-   static class InnerStaticPublicString {
-      public InnerStaticPublicString(String s) {
-         TestAnonymousClassConstructor.n(s);// 94
-      }// 95
+   class InnerPrivateString {
+      private InnerPrivateString(String s) {
+         TestAnonymousClassConstructor.n(s);// 58
+      }// 59
    }
 
    class InnerPublic {
@@ -101,16 +101,16 @@ class TestAnonymousClassConstructor {
       }// 71
    }
 
-   class InnerPrivate {
-      private InnerPrivate(long a, int b) {
-         TestAnonymousClassConstructor.n(a + "+" + b);// 64
-      }// 65
+   static class InnerStaticPublic {
+      public InnerStaticPublic(long a, int b) {
+         TestAnonymousClassConstructor.n(a + "+" + b);// 100
+      }// 101
    }
 
-   class InnerPrivateString {
-      private InnerPrivateString(String s) {
-         TestAnonymousClassConstructor.n(s);// 58
-      }// 59
+   static class InnerStaticPublicString {
+      public InnerStaticPublicString(String s) {
+         TestAnonymousClassConstructor.n(s);// 94
+      }// 95
    }
 }
 
@@ -190,19 +190,19 @@ class 'pkg/TestAnonymousClassConstructor' {
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerStaticPublic' {
-   method '<init> (JI)V' {
-      f      69
-      18      69
-      1b      69
-      1e      70
+class 'pkg/TestAnonymousClassConstructor$InnerPrivate' {
+   method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
+      14      69
+      1e      69
+      21      69
+      24      70
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerStaticPublicString' {
-   method '<init> (Ljava/lang/String;)V' {
-      5      75
-      8      76
+class 'pkg/TestAnonymousClassConstructor$InnerPrivateString' {
+   method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
+      a      75
+      d      76
    }
 }
 
@@ -238,19 +238,19 @@ class 'pkg/TestAnonymousClassConstructor$InnerStaticPrivateString' {
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerPrivate' {
-   method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
-      14      105
-      1e      105
-      21      105
-      24      106
+class 'pkg/TestAnonymousClassConstructor$InnerStaticPublic' {
+   method '<init> (JI)V' {
+      f      105
+      18      105
+      1b      105
+      1e      106
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerPrivateString' {
-   method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
-      a      111
-      d      112
+class 'pkg/TestAnonymousClassConstructor$InnerStaticPublicString' {
+   method '<init> (Ljava/lang/String;)V' {
+      5      111
+      8      112
    }
 }
 
@@ -281,10 +281,10 @@ Lines mapping:
 50 <-> 62
 53 <-> 65
 54 <-> 66
-58 <-> 112
-59 <-> 113
-64 <-> 106
-65 <-> 107
+58 <-> 76
+59 <-> 77
+64 <-> 70
+65 <-> 71
 70 <-> 100
 71 <-> 101
 76 <-> 94
@@ -293,10 +293,10 @@ Lines mapping:
 83 <-> 89
 88 <-> 82
 89 <-> 83
-94 <-> 76
-95 <-> 77
-100 <-> 70
-101 <-> 71
+94 <-> 112
+95 <-> 113
+100 <-> 106
+101 <-> 107
 Not mapped:
 57
 63
diff --git a/testData/results/TestClassSimpleBytecodeMapping.dec b/testData/results/TestClassSimpleBytecodeMapping.dec
index 8883fab6ffd4b5f8b8b656b96e9a5c45d0e1bfb9..d5f7070f5b6618b11ea075941af29d4278059b59 100644
--- a/testData/results/TestClassSimpleBytecodeMapping.dec
+++ b/testData/results/TestClassSimpleBytecodeMapping.dec
@@ -33,17 +33,17 @@ public class TestClassSimpleBytecodeMapping {
       var1.run();// 49
    }// 50
 
-   public class InnerClass2 {
-      public void print() {
-         System.out.println("Inner2");// 54
-      }// 55
-   }
-
    public class InnerClass {
       public void print() {
          System.out.println("Inner");// 44
       }// 45
    }
+
+   public class InnerClass2 {
+      public void print() {
+         System.out.println("Inner2");// 54
+      }// 55
+   }
 }
 
 class 'pkg/TestClassSimpleBytecodeMapping$1' {
@@ -96,7 +96,7 @@ class 'pkg/TestClassSimpleBytecodeMapping' {
    }
 }
 
-class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
+class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
    method 'print ()V' {
       0      37
       3      37
@@ -105,7 +105,7 @@ class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
    }
 }
 
-class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
+class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
    method 'print ()V' {
       0      43
       3      43
@@ -130,11 +130,11 @@ Lines mapping:
 36 <-> 25
 38 <-> 27
 40 <-> 30
-44 <-> 44
-45 <-> 45
+44 <-> 38
+45 <-> 39
 49 <-> 33
 50 <-> 34
-54 <-> 38
-55 <-> 39
+54 <-> 44
+55 <-> 45
 Not mapped:
 39
diff --git a/testData/results/TestConstants.dec b/testData/results/TestConstants.dec
index 28df2c294ca1c0818ffad43052919c61c262c16a..1170f1a5876121e55bc5c58a2d10afeac8d1527f 100644
--- a/testData/results/TestConstants.dec
+++ b/testData/results/TestConstants.dec
@@ -16,14 +16,14 @@ public class TestConstants {
    static final int IMax = 2147483647;
    static final long LMin = -9223372036854775808L;
    static final long LMax = 9223372036854775807L;
-   static final float FNan = 0.0F / 0.0;
-   static final float FNeg = -1.0F / 0.0;
-   static final float FPos = 1.0F / 0.0;
+   static final float FNan = 0.0F / 0.0F;
+   static final float FNeg = -1.0F / 0.0F;
+   static final float FPos = 1.0F / 0.0F;
    static final float FMin = 1.4E-45F;
    static final float FMax = 3.4028235E38F;
-   static final double DNan = 0.0D / 0.0;
-   static final double DNeg = -1.0D / 0.0;
-   static final double DPos = 1.0D / 0.0;
+   static final double DNan = 0.0D / 0.0D;
+   static final double DNeg = -1.0D / 0.0D;
+   static final double DPos = 1.0D / 0.0D;
    static final double DMin = 4.9E-324D;
    static final double DMax = 1.7976931348623157E308D;
 
diff --git a/testData/results/TestExtendingSubclass.dec b/testData/results/TestExtendingSubclass.dec
index 5e13985808328287c750d776eee29041bec8e3fe..2caf74011a7beee7fd2a9fdebe1873be625a8f1a 100644
--- a/testData/results/TestExtendingSubclass.dec
+++ b/testData/results/TestExtendingSubclass.dec
@@ -1,35 +1,35 @@
 package pkg;
 
 public class TestExtendingSubclass {
+   class Subclass1 {
+      Subclass1(String name) {
+      }// 9
+   }
+
    class Subclass2 extends TestExtendingSubclass.Subclass1 {
       Subclass2(String name) {
          super(name);// 14
       }// 15
    }
-
-   class Subclass1 {
-      Subclass1(String name) {
-      }// 9
-   }
 }
 
-class 'pkg/TestExtendingSubclass$Subclass2' {
+class 'pkg/TestExtendingSubclass$Subclass1' {
    method '<init> (Lpkg/TestExtendingSubclass;Ljava/lang/String;)V' {
-      8      5
-      b      6
+      9      5
    }
 }
 
-class 'pkg/TestExtendingSubclass$Subclass1' {
+class 'pkg/TestExtendingSubclass$Subclass2' {
    method '<init> (Lpkg/TestExtendingSubclass;Ljava/lang/String;)V' {
-      9      11
+      8      10
+      b      11
    }
 }
 
 Lines mapping:
-9 <-> 12
-14 <-> 6
-15 <-> 7
+9 <-> 6
+14 <-> 11
+15 <-> 12
 Not mapped:
 8
 13
diff --git a/testData/results/TestInnerLocal.dec b/testData/results/TestInnerLocal.dec
index af4fb30496706a46dcc578948b4c66ef90b6d65e..f728ad7e3493b296f88d919a028b646096f733c7 100644
--- a/testData/results/TestInnerLocal.dec
+++ b/testData/results/TestInnerLocal.dec
@@ -30,6 +30,14 @@ public class TestInnerLocal {
       new TestInnerLocal.Inner1Static.Inner2Static("test");// 26
    }// 27
 
+   class Inner1 {
+      final String x;
+
+      public Inner1(String var2) {
+         this.x = var2;// 46
+      }// 47
+   }
+
    static class Inner1Static {
       final String x;
 
@@ -45,14 +53,6 @@ public class TestInnerLocal {
          }// 46
       }
    }
-
-   class Inner1 {
-      final String x;
-
-      public Inner1(@Deprecated String x) {
-         this.x = x;// 32
-      }// 33
-   }
 }
 
 class 'pkg/TestInnerLocal$1Inner' {
@@ -86,47 +86,47 @@ class 'pkg/TestInnerLocal$2Inner' {
    }
 }
 
-class 'pkg/TestInnerLocal$Inner1Static' {
-   method '<init> (Ljava/lang/String;)V' {
-      6      36
-      9      37
+class 'TestInnerLocal$Inner1' {
+   method '<init> (LTestInnerLocal;Ljava/lang/String;)V' {
+      b      34
+      e      35
    }
 }
 
-class 'pkg/TestInnerLocal$Inner1Static$Inner2Static' {
+class 'TestInnerLocal$Inner1Static' {
    method '<init> (Ljava/lang/String;)V' {
-      6      43
-      9      44
+      6      42
+      9      43
    }
 }
 
-class 'pkg/TestInnerLocal$Inner1' {
-   method '<init> (Lpkg/TestInnerLocal;Ljava/lang/String;)V' {
-      b      52
-      e      53
+class 'pkg/TestInnerLocal$Inner1Static$Inner2Static' {
+   method '<init> (Ljava/lang/String;)V' {
+      6      49
+      9      50
    }
 }
 
 Lines mapping:
-8 <-> 9
-9 <-> 10
-11 <-> 13
-12 <-> 14
-13 <-> 15
-14 <-> 16
-20 <-> 23
-21 <-> 24
-23 <-> 27
-24 <-> 28
-25 <-> 29
-26 <-> 30
-27 <-> 31
-32 <-> 53
-33 <-> 54
-39 <-> 37
-40 <-> 38
-45 <-> 44
-46 <-> 45
+22 <-> 7
+23 <-> 8
+25 <-> 11
+26 <-> 12
+27 <-> 13
+28 <-> 14
+34 <-> 21
+35 <-> 22
+37 <-> 25
+38 <-> 26
+39 <-> 27
+40 <-> 28
+41 <-> 29
+46 <-> 35
+47 <-> 36
+53 <-> 43
+54 <-> 44
+59 <-> 50
+60 <-> 51
 Not mapped:
 7
 19
diff --git a/testData/results/TestInnerSignature.dec b/testData/results/TestInnerSignature.dec
index b2e4d0f757e55cd9ab6bd77aa9ed0afb33989e7d..8aab3c2b9f56368f1350f1ac98262c761bf6ed19 100644
--- a/testData/results/TestInnerSignature.dec
+++ b/testData/results/TestInnerSignature.dec
@@ -11,18 +11,6 @@ public class TestInnerSignature<A, B, C> {
       this.c = c;// 11
    }// 12
 
-   public static class InnerStatic<A, B, C> {
-      A a;
-      B b;
-      C c;
-
-      public InnerStatic(A a, @Deprecated B b, C c) {
-         this.a = a;// 32
-         this.b = b;// 33
-         this.c = c;// 34
-      }// 35
-   }
-
    public class Inner {
       A a;
       B b;
@@ -34,6 +22,18 @@ public class TestInnerSignature<A, B, C> {
          this.c = c;// 22
       }// 23
    }
+
+   public static class InnerStatic<A, B, C> {
+      A a;
+      B b;
+      C c;
+
+      public InnerStatic(A var1, B var2, C var3) {
+         this.a = var1;// 46
+         this.b = var2;// 47
+         this.c = var3;// 48
+      }// 49
+   }
 }
 
 class 'pkg/TestInnerSignature' {
@@ -45,37 +45,37 @@ class 'pkg/TestInnerSignature' {
    }
 }
 
-class 'pkg/TestInnerSignature$InnerStatic' {
-   method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
-      6      19
-      b      20
-      10      21
-      13      22
+class 'TestInnerSignature$Inner' {
+   method '<init> (LTestInnerSignature;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      b      17
+      10      18
+      16      19
+      19      20
    }
 }
 
-class 'pkg/TestInnerSignature$Inner' {
-   method '<init> (Lpkg/TestInnerSignature;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
-      b      31
-      10      32
-      16      33
-      19      34
+class 'TestInnerSignature$InnerStatic' {
+   method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      6      29
+      b      30
+      10      31
+      13      32
    }
 }
 
 Lines mapping:
-9 <-> 9
-10 <-> 10
-11 <-> 11
-12 <-> 12
-20 <-> 32
-21 <-> 33
-22 <-> 34
-23 <-> 35
-32 <-> 20
-33 <-> 21
-34 <-> 22
-35 <-> 23
+23 <-> 7
+24 <-> 8
+25 <-> 9
+26 <-> 10
+34 <-> 18
+35 <-> 19
+36 <-> 20
+37 <-> 21
+46 <-> 30
+47 <-> 31
+48 <-> 32
+49 <-> 33
 Not mapped:
 8
 19
diff --git a/testData/results/TestMethodParameters.dec b/testData/results/TestMethodParameters.dec
index 21f0f129d1bc260e2dbc7ce77f07ece57711bf75..af7ce865f5d946980010ee02c3e5be384a041064 100644
--- a/testData/results/TestMethodParameters.dec
+++ b/testData/results/TestMethodParameters.dec
@@ -21,6 +21,14 @@ public class TestMethodParameters {
 
    }// 39
 
+   class C1 {
+      C1(@Deprecated int var2) {
+      }// 24
+
+      void m(@Deprecated int var1) {
+      }// 25
+   }
+
    static class C2 {
       C2(@Deprecated int var1) {
       }// 29
@@ -31,14 +39,6 @@ public class TestMethodParameters {
       static void m2(@Deprecated int var0) {
       }// 31
    }
-
-   class C1 {
-      C1(@Deprecated int var2) {
-      }// 24
-
-      void m(@Deprecated int var1) {
-      }// 25
-   }
 }
 
 class 'pkg/TestMethodParameters' {
@@ -69,26 +69,26 @@ class 'pkg/TestMethodParameters$1Local' {
    }
 }
 
-class 'pkg/TestMethodParameters$C2' {
-   method '<init> (I)V' {
-      4      25
+class 'pkg/TestMethodParameters$C1' {
+   method '<init> (Lpkg/TestMethodParameters;I)V' {
+      9      25
    }
 
-   method 'm1 (I)V' {
+   method 'm (I)V' {
       0      28
    }
+}
 
-   method 'm2 (I)V' {
-      0      31
+class 'pkg/TestMethodParameters$C2' {
+   method '<init> (I)V' {
+      4      33
    }
-}
 
-class 'pkg/TestMethodParameters$C1' {
-   method '<init> (Lpkg/TestMethodParameters;I)V' {
-      9      36
+   method 'm1 (I)V' {
+      0      36
    }
 
-   method 'm (I)V' {
+   method 'm2 (I)V' {
       0      39
    }
 }
@@ -97,11 +97,11 @@ Lines mapping:
 19 <-> 5
 20 <-> 8
 21 <-> 11
-24 <-> 37
-25 <-> 40
-29 <-> 26
-30 <-> 29
-31 <-> 32
+24 <-> 26
+25 <-> 29
+29 <-> 34
+30 <-> 37
+31 <-> 40
 36 <-> 16
 37 <-> 19
 39 <-> 22
diff --git a/testData/results/TestSwitchOnEnum.dec b/testData/results/TestSwitchOnEnum.dec
index b6984c399ceff5434ddf72837649389341a00ea5..34064819cc6a520a13bc3fd718a046861414ae4c 100644
--- a/testData/results/TestSwitchOnEnum.dec
+++ b/testData/results/TestSwitchOnEnum.dec
@@ -36,15 +36,15 @@ public class TestSwitchOnEnum {
 
       }// 46
 
-      static enum B {
-         B1,
-         B2;
-      }
-
       static enum A {
          A1,
          A2;
       }
+
+      static enum B {
+         B1,
+         B2;
+      }
    }
 }
 
