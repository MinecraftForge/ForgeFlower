From c45318da6da9d2d073e1979350e67042d03d4b81 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Fri, 14 Aug 2015 15:56:08 -0700
Subject: [PATCH 034/122] Hook in LVT to VarExprent and print generic types.

---
 .../decompiler/main/rels/ClassWrapper.java    | 13 ++++++++--
 .../modules/decompiler/ExprProcessor.java     |  7 ++++++
 .../decompiler/exps/InvocationExprent.java    |  3 +++
 .../modules/decompiler/exps/VarExprent.java   | 24 +++++++++++++++----
 .../modules/decompiler/vars/LVTVariable.java  | 14 ++++++++---
 .../decompiler/vars/LocalVariableTable.java   | 11 ++++-----
 .../decompiler/vars/VarDefinitionHelper.java  | 10 ++++++++
 .../modules/decompiler/vars/VarProcessor.java |  4 ++++
 .../StructLocalVariableTableAttribute.java    |  4 ++--
 9 files changed, 73 insertions(+), 17 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/main/rels/ClassWrapper.java b/src/org/jetbrains/java/decompiler/main/rels/ClassWrapper.java
index 01b9292..c302cfc 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/ClassWrapper.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/ClassWrapper.java
@@ -81,6 +81,16 @@ public class ClassWrapper {
 
       RootStatement root = null;
 
+      // if debug information present and should be used
+      if (DecompilerContext.getOption(IFernflowerPreferences.USE_DEBUG_VAR_NAMES)) {
+        StructLocalVariableTableAttribute attr = (StructLocalVariableTableAttribute)mt.getAttributes().getWithKey(
+          StructGeneralAttribute.ATTRIBUTE_LOCAL_VARIABLE_TABLE);
+
+        if (attr != null) {
+          varProc.setLVT(attr.getLVT());
+        }
+      }
+
       boolean isError = false;
 
       try {
@@ -169,12 +179,11 @@ public class ClassWrapper {
           StructGeneralAttribute.ATTRIBUTE_LOCAL_VARIABLE_TABLE);
 
         if (attr != null) {
-          varProc.setLVT(attr.getLVT());
           varProc.setDebugVarNames(attr.getMapVarNames());
         }
       }
 
-      MethodProcessorRunnable.printMethod(root, mt.getClassStruct().qualifiedName+"."+mt.getName()+mt.getDescriptor(),varProc);
+      //MethodProcessorRunnable.printMethod(root, mt.getClassStruct().qualifiedName+"."+mt.getName()+mt.getDescriptor(),varProc);
 
       DecompilerContext.getLogger().endMethod();
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index f33e438..0425fbc 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -38,6 +38,8 @@ import org.jetbrains.java.decompiler.struct.consts.PooledConstant;
 import org.jetbrains.java.decompiler.struct.consts.PrimitiveConstant;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 
 import java.util.*;
 
@@ -725,6 +727,11 @@ public class ExprProcessor implements CodeConstants {
       return "void";
     }
     else if (tp == CodeConstants.TYPE_OBJECT) {
+      //if (type.signatureDebugGens != null) {
+      //  GenericType gen = new GenericType(type.signatureDebugGens);
+      //  return GenericMain.getGenericCastTypeName(gen);
+      //}
+
       String ret = buildJavaClassName(type.value);
       if (getShort) {
         ret = DecompilerContext.getImportCollector().getShortName(ret);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index 7cf83be..9d16de2 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -241,6 +241,9 @@ public class InvocationExprent extends Exprent {
         if (super_qualifier != null) {
           TextUtil.writeQualifiedSuper(buf, super_qualifier);
         }
+        //else if (getExprType().equals(VarType.VARTYPE_OBJECT) && instance instanceof FunctionExprent && ((FunctionExprent)instance).getFuncType() == FunctionExprent.FUNCTION_CAST) {
+        //  buf.append(((FunctionExprent)instance).getLstOperands().get(0).toJava(indent, tracer));
+        //} // THis in theory removes casts that are not needed... ignore it for now.
         else if (instance != null) {
           TextBuffer res = instance.toJava(indent, tracer);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index 969a03e..6c973af 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -22,13 +22,15 @@ import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.LVTVariable;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
-import org.jetbrains.java.decompiler.struct.match.IMatchable.MatchProperties;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
@@ -48,6 +50,7 @@ public class VarExprent extends Exprent {
   private int version = 0;
   private boolean classDef = false;
   private boolean stack = false;
+  private LVTVariable lvt = null;
 
   public VarExprent(int index, VarType varType, VarProcessor processor) {
     super(EXPRENT_VAR);
@@ -94,7 +97,10 @@ public class VarExprent extends Exprent {
     }
     else {
       String name = null;
-      if (processor != null) {
+      if (lvt != null) {
+        name = lvt.name;
+      }
+      else if (processor != null) {
         name = processor.getVarName(new VarVersionPair(index, version));
       }
 
@@ -102,7 +108,12 @@ public class VarExprent extends Exprent {
         if (processor != null && processor.getVarFinal(new VarVersionPair(index, version)) == VarTypeProcessor.VAR_EXPLICIT_FINAL) {
           buffer.append("final ");
         }
-        buffer.append(ExprProcessor.getCastTypeName(getVarType())).append(" ");
+        if (lvt != null && lvt.getSig() != null) {
+          buffer.append(GenericMain.getGenericCastTypeName(new GenericType(lvt.getSig()))).append(" ");
+        }
+        else {
+          buffer.append(ExprProcessor.getCastTypeName(getVarType())).append(" ");
+        }
       }
       buffer.append(name == null ? ("var" + index + (version == 0 ? "" : "_" + version)) : name);
     }
@@ -136,6 +147,7 @@ public class VarExprent extends Exprent {
 
   public VarType getVarType() {
     VarType vt = null;
+
     if (processor != null) {
       vt = processor.getVarType(new VarVersionPair(index, version));
     }
@@ -217,9 +229,13 @@ public class VarExprent extends Exprent {
     return true;
   }
 
+  public void setLVT(LVTVariable lvt) {
+    this.lvt = lvt;
+  }
+
   @Override
   public String toString() {
-    return "var_" + index + "_" + version;
+    return lvt != null ? lvt.name :  "var_" + index + "_" + version;
   }
 
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
index 13cfa70..dc7783c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
@@ -68,7 +68,15 @@ public class LVTVariable implements Comparable<LVTVariable> {
     return 0;
   }
   @Override
-    public String toString() {
-        return "\'("+index+","+start+")"+desc+(sig!=null ? "<"+sig+"> ":" ")+name+"\'";
-    }
+  public String toString() {
+    return "\'("+index+","+start+")"+desc+(sig!=null ? "<"+sig+"> ":" ")+name+"\'";
+  }
+
+  public String getDesc() {
+    return desc;
+  }
+
+  public String getSig() {
+    return sig;
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index e5fbec8..270def3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -9,7 +9,7 @@ import java.util.Set;
 public class LocalVariableTable {
   private Map<Integer, Set<LVTVariable>> startpoints;
   private ArrayList<LVTVariable> allLVT;
-private Map<Integer, List<LVTVariable>> mapLVT;
+  private Map<Integer, List<LVTVariable>> mapLVT;
 
   public LocalVariableTable(int len) {
     startpoints = new HashMap<Integer,Set<LVTVariable>>(len);
@@ -35,15 +35,14 @@ private Map<Integer, List<LVTVariable>> mapLVT;
     mapLVT = null; // Invalidate the cache and rebuild it.
   }
 
-  public LVTVariable find(Integer index, List<Integer> offsets) {
+  public LVTVariable find(int index, List<Integer> offsets) {
     for (Integer offset : offsets) {
       Set<LVTVariable> lvs = startpoints.get(offset);
       if (lvs == null || lvs.isEmpty())
         continue;
-      int idx = index.intValue();
 
       for (LVTVariable lv : lvs) {
-        if (lv.index == idx)
+        if (lv.index == index)
           return lv;
       }
     }
@@ -75,7 +74,7 @@ private Map<Integer, List<LVTVariable>> mapLVT;
     }
   }
 
-public List<LVTVariable> getCandidates(int index) {
+  public List<LVTVariable> getCandidates(int index) {
     return mapLVT.get(index);
-}
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index aa2ef6e..53201ed 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -185,6 +185,16 @@ public class VarDefinitionHelper {
       // search for the first assignement to var [index]
       int addindex = 0;
       for (Exprent expr : lst) {
+        LVTVariable lvt = varproc.findLVT(index, first.getBasichead().getBlock().getInstrOldOffsets());
+        if (lvt != null) {
+          for (Exprent exp : expr.getAllExprents(true)) {
+            if (exp.type == Exprent.EXPRENT_VAR && ((VarExprent)exp).getIndex() == index) {
+              ((VarExprent)exp).setLVT(lvt);
+              break;
+            }
+          }
+        }
+
         if (setDefinition(expr, index)) {
           defset = true;
           break;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index 0f530f9..0a619d0 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -160,6 +160,10 @@ public class VarProcessor {
     return this.lvt;
   }
 
+  public LVTVariable findLVT(int index, List<Integer> instructionOffsets) {
+    return this.lvt == null ? null : lvt.find(index, instructionOffsets);
+  }
+
   public int getRemapped(int index) {
     VarVersionPair res = varVersions.getMapOriginalVarIndices().get(index);
     if (res == null) return index;
diff --git a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
index a654359..771ec7a 100644
--- a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
+++ b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
@@ -69,7 +69,7 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
     return lvt == null ? EMPTY_LVT : lvt.getMapVarNames();
   }
 
-public LocalVariableTable getLVT() {
+  public LocalVariableTable getLVT() {
     return lvt;
-}
+  }
 }
-- 
2.21.0.windows.1

