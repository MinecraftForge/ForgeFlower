From 78afb4580567df9f7d1e6245dc9735eba714a3b2 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 13 Sep 2015 18:26:04 -0400
Subject: [PATCH 045/122] Change begin/end detection. Less derpy.

---
 .../modules/decompiler/stats/DoStatement.java |  6 +++++
 .../modules/decompiler/stats/IfStatement.java | 15 ++++++++-----
 .../decompiler/stats/RootStatement.java       |  6 +++++
 .../decompiler/stats/SequenceStatement.java   |  6 +++++
 .../modules/decompiler/stats/Statement.java   | 22 ++++++++++++-------
 .../decompiler/stats/SwitchStatement.java     | 12 ++++++++++
 .../decompiler/vars/LocalVariableTable.java   | 17 +++++---------
 .../modules/decompiler/vars/StartEndPair.java | 15 +++++++++++++
 .../decompiler/vars/VarDefinitionHelper.java  | 14 +++++++-----
 9 files changed, 82 insertions(+), 31 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
index 8359284..0768912 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
@@ -21,6 +21,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -241,4 +242,9 @@ public class DoStatement extends Statement {
   public void setLooptype(int looptype) {
     this.looptype = looptype;
   }
+
+  @Override
+    public StartEndPair getStartEndRange() {
+        return super.getStartEndRange();
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
index 8be0dcc..f216b73 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
@@ -22,6 +22,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -425,18 +426,18 @@ public class IfStatement extends Statement {
   public StatEdge getElseEdge() {
     return elseedge;
   }
-  
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
-  
+
   public IMatchable findObject(MatchNode matchNode, int index) {
 
     IMatchable object = super.findObject(matchNode, index);
     if(object != null) {
       return object;
     }
-    
+
     if(matchNode.getType() == MatchNode.MATCHNODE_EXPRENT) {
       String position = (String)matchNode.getRuleValue(MatchProperties.EXPRENT_POSITION);
       if("head".equals(position)) {
@@ -459,8 +460,12 @@ public class IfStatement extends Statement {
         return false;
       }
     }
-        
+
     return true;
   }
-  
+
+  @Override
+    public StartEndPair getStartEndRange() {
+        return StartEndPair.join(super.getStartEndRange(),ifstat != null ? ifstat.getStartEndRange() : null,elsestat != null ? elsestat.getStartEndRange(): null);
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
index 7193f9a..0a1e798 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
@@ -18,6 +18,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.stats;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 
 public class RootStatement extends Statement {
@@ -46,4 +47,9 @@ public class RootStatement extends Statement {
   public void setDummyExit(DummyExitStatement dummyExit) {
     this.dummyExit = dummyExit;
   }
+
+  @Override
+    public StartEndPair getStartEndRange() {
+        return first.getStartEndRange();
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
index 7d2ee43..b3785fb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
@@ -20,6 +20,7 @@ import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.DecHelper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 import java.util.Arrays;
 import java.util.List;
@@ -137,4 +138,9 @@ public class SequenceStatement extends Statement {
   public Statement getSimpleCopy() {
     return new SequenceStatement();
   }
+
+  @Override
+    public StartEndPair getStartEndRange() {
+        return super.getStartEndRange();
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index c126050..806c4d5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -24,6 +24,7 @@ import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.StrongConnectivityHelper;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -938,12 +939,17 @@ public class Statement implements IMatchable {
     return true;
   }
 
-  private SequenceStatement parentSeqStat;
-public SequenceStatement getParentSequenceStat() {
-    if (parentSeqStat == null) {
-        parentSeqStat = (getParent()!=null && getParent().type == TYPE_SEQUENCE) ? (SequenceStatement)getParent() : new SequenceStatement(Arrays.asList(this));
-    }
-    return parentSeqStat;
-}
-
+  private StartEndPair endpoints;
+  public StartEndPair getStartEndRange() {
+      if (endpoints == null) {
+          int start = Integer.MAX_VALUE;
+          int end = Integer.MIN_VALUE;
+          for (Statement st : getStats()) {
+              start = Math.min(start, st.getBasichead().getBlock().getStartInstruction());
+              end = Math.max(end, st.getBasichead().getBlock().getEndInstruction());
+          }
+          endpoints = new StartEndPair(start,end);
+      }
+      return endpoints;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
index 5916490..8d7127c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
@@ -27,6 +27,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.SwitchExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.*;
@@ -365,4 +366,15 @@ public class SwitchStatement extends Statement {
   public List<List<ConstExprent>> getCaseValues() {
     return caseValues;
   }
+
+  @Override
+    public StartEndPair getStartEndRange() {
+      StartEndPair[] sepairs = new StartEndPair[caseStatements.size() + 1];
+      int i = 0;
+      sepairs[i++] = super.getStartEndRange();
+      for (Statement st : caseStatements) {
+          sepairs[i++] = st.getStartEndRange();
+      }
+      return StartEndPair.join(sepairs);
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index 1de7181..fe45b11 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -3,6 +3,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.vars;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -88,18 +89,10 @@ public class LocalVariableTable {
     return getMapVarNames().get(index);
   }
 
-  public Map<Integer, LVTVariable> getVars(SequenceStatement sequenceStatement) {
-      if (sequenceStatement == null) return new HashMap<Integer, LVTVariable>();
-      int start = Integer.MAX_VALUE;
-      int end = Integer.MIN_VALUE;
-      for (Statement st : sequenceStatement.getStats()) {
-          start = Math.min(start, st.getBasichead().getBlock().getStartInstruction());
-          end = Math.max(end, st.getBasichead().getBlock().getEndInstruction());
-      }
-    //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
-
-    StartEndPair sepair = new StartEndPair(start, end);
-    Map<Integer, LVTVariable> ret = new HashMap<Integer, LVTVariable>();
+  public Map<Integer, LVTVariable> getVars(Statement statement) {
+      HashMap<Integer,LVTVariable> ret = new HashMap<Integer,LVTVariable>();
+      if (statement == null) return ret;
+      StartEndPair sepair = statement.getStartEndRange();
     if (endpoints.containsKey(sepair)) {
         for (LVTVariable lvt : endpoints.get(sepair)) {
             ret.put(lvt.index,lvt);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
index 23a3929..32c8799 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
@@ -15,4 +15,19 @@ public class StartEndPair {
     public int hashCode() {
         return start * 31 + end;
     }
+    @Override
+    public String toString() {
+        return String.format("%d->%d",start,end);
+    }
+
+    public static StartEndPair join(StartEndPair... pairs) {
+        int start = Integer.MAX_VALUE;
+        int end = Integer.MIN_VALUE;
+        for (StartEndPair pair : pairs) {
+            if (pair == null) continue;
+            start = Math.min(start, pair.start);
+            end = Math.max(end, pair.end);
+        }
+        return new StartEndPair(start, end);
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 2436d6d..56061fe 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -127,13 +127,13 @@ public class VarDefinitionHelper {
   public void setVarDefinitions() {
     VarNamesCollector vc = DecompilerContext.getVarNamesCollector();
 
-    Map<SequenceStatement,Map<Integer,VarExprent>> trackingMap = new HashMap<SequenceStatement,Map<Integer,VarExprent>>();
+    Map<Statement,Map<Integer,VarExprent>> trackingMap = new HashMap<Statement,Map<Integer,VarExprent>>();
     for (Entry<Integer, Statement> en : mapVarDefStatements.entrySet()) {
       Statement stat = en.getValue();
-      if (!trackingMap.containsKey(stat.getParentSequenceStat())) {
-          trackingMap.put(stat.getParentSequenceStat(), new HashMap<Integer,VarExprent>());
+      if (!trackingMap.containsKey(stat)) {
+          trackingMap.put(stat, new HashMap<Integer,VarExprent>());
       }
-      Map<Integer, VarExprent> scopedMap = trackingMap.get(stat.getParentSequenceStat());
+      Map<Integer, VarExprent> scopedMap = trackingMap.get(stat);
       Integer index = en.getKey();
       int newindex = varproc.getRemapped(index);
       setupLVTs(stat);
@@ -221,7 +221,7 @@ public class VarDefinitionHelper {
         var.setDefinition(true);
 
         if (varproc.getLVT() != null) {
-          Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat.getParentSequenceStat());
+          Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat);
           if (vars.containsKey(var.getIndex())) {
               var.setLVT(vars.get(var.getIndex()));
           }
@@ -388,7 +388,7 @@ public class VarDefinitionHelper {
       return;
     }
 
-    Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat.getParentSequenceStat());
+    Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat);
 
     if (stat.getExprents() == null) {
       for (Object obj : stat.getSequentialObjects()) {
@@ -421,6 +421,8 @@ public class VarDefinitionHelper {
         LVTVariable lvt = lvts.get(index);
         if (lvt != null) {
           var.setLVT(lvt);
+        } else {
+            System.currentTimeMillis();
         }
       }
     }
-- 
2.21.0.windows.1

