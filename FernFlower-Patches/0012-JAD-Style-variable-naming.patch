From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Tue, 11 Apr 2017 22:37:40 -0700
Subject: [PATCH] JAD Style variable naming


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 2fcabdcd9ce1130a778754b318bf874922f02e12..4817f055906bfa4bfa4f7bfa9b590f88e984c3a1 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -701,6 +701,11 @@ public class ClassWriter {
             else {
               parameterName = methodWrapper.varproc.getVarName(new VarVersionPair(index, 0));
             }
+
+            if ((flags & (CodeConstants.ACC_ABSTRACT | CodeConstants.ACC_NATIVE)) != 0) {
+              parameterName = methodWrapper.methodStruct.getVariableNamer().renameAbstractParameter(parameterName, index);
+            }
+
             buffer.append(parameterName == null ? "param" + index : parameterName); // null iff decompiled with errors
 
             paramCount++;
diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index a34758940dbce0c5bac8dff269386af752c63d91..6b6e38f72a51e3f426b812060511e71142860263 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -11,6 +11,7 @@ import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.main.extern.IIdentifierRenamer;
 import org.jetbrains.java.decompiler.main.rels.ClassWrapper;
 import org.jetbrains.java.decompiler.main.rels.LambdaProcessor;
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.main.rels.NestedClassProcessor;
 import org.jetbrains.java.decompiler.main.rels.NestedMemberAccess;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
@@ -414,6 +415,7 @@ public class ClassesProcessor implements CodeConstants {
   private static void destroyWrappers(ClassNode node) {
     node.wrapper = null;
     node.classStruct.releaseResources();
+    node.classStruct.getMethods().forEach(m -> m.clearVariableNamer());
 
     for (ClassNode nd : node.nested) {
       destroyWrappers(nd);
@@ -472,7 +474,7 @@ public class ClassesProcessor implements CodeConstants {
 
       anonymousClassType = new VarType(lambda_class_name, true);
 
-      boolean is_method_reference = (content_class_name != classStruct.qualifiedName);
+      boolean is_method_reference = !classStruct.qualifiedName.equals(content_class_name);
       if (!is_method_reference) { // content method in the same class, check synthetic flag
         StructMethod mt = classStruct.getMethod(content_method_name, content_method_descriptor);
         is_method_reference = !mt.isSynthetic(); // if not synthetic -> method reference
@@ -527,4 +529,4 @@ public class ClassesProcessor implements CodeConstants {
       public boolean is_content_method_static;
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
index bf0fe47e7d48b21acd758449b67612e250f19554..95baa7dfec5a9c8dcde30a288499aa127aeffa4b 100644
--- a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
+++ b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
@@ -7,6 +7,7 @@ import org.jetbrains.java.decompiler.main.collectors.ImportCollector;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor;
+import org.jetbrains.java.decompiler.main.extern.IVariableNamingFactory;
 import org.jetbrains.java.decompiler.modules.renamer.PoolInterceptor;
 import org.jetbrains.java.decompiler.struct.StructContext;
 
@@ -19,12 +20,14 @@ public class DecompilerContext {
   public static final String CURRENT_CLASS_NODE = "CURRENT_CLASS_NODE";
   public static final String CURRENT_METHOD_WRAPPER = "CURRENT_METHOD_WRAPPER";
   public static final String CURRENT_VAR_PROCESSOR = "CURRENT_VAR_PROCESSOR";
+  public static final String RENAMER_FACTORY = "RENAMER_FACTORY";
 
   private final Map<String, Object> properties;
   private final IFernflowerLogger logger;
   private final StructContext structContext;
   private final ClassesProcessor classProcessor;
   private final PoolInterceptor poolInterceptor;
+  private final IVariableNamingFactory renamerFactory;
   private ImportCollector importCollector;
   private VarProcessor varProcessor;
   private CounterContainer counterContainer;
@@ -34,7 +37,8 @@ public class DecompilerContext {
                            IFernflowerLogger logger,
                            StructContext structContext,
                            ClassesProcessor classProcessor,
-                           PoolInterceptor interceptor) {
+                           PoolInterceptor interceptor,
+                           IVariableNamingFactory renamerFactory) {
     Objects.requireNonNull(properties);
     Objects.requireNonNull(logger);
     Objects.requireNonNull(structContext);
@@ -45,6 +49,7 @@ public class DecompilerContext {
     this.structContext = structContext;
     this.classProcessor = classProcessor;
     this.poolInterceptor = interceptor;
+    this.renamerFactory = renamerFactory;
     this.counterContainer = new CounterContainer();
   }
 
@@ -112,6 +117,10 @@ public class DecompilerContext {
     return getCurrentContext().poolInterceptor;
   }
 
+  public static IVariableNamingFactory getNamingFactory() {
+    return getCurrentContext().renamerFactory;
+  }
+
   public static ImportCollector getImportCollector() {
     return getCurrentContext().importCollector;
   }
diff --git a/src/org/jetbrains/java/decompiler/main/Fernflower.java b/src/org/jetbrains/java/decompiler/main/Fernflower.java
index f8c413c7b7302b201a739310677d0103e2878d3e..ab8c1a60acfdef8c6ffb3082efbfbc1315d2c0bc 100644
--- a/src/org/jetbrains/java/decompiler/main/Fernflower.java
+++ b/src/org/jetbrains/java/decompiler/main/Fernflower.java
@@ -10,6 +10,7 @@ import org.jetbrains.java.decompiler.struct.IDecompiledData;
 import org.jetbrains.java.decompiler.struct.StructClass;
 import org.jetbrains.java.decompiler.struct.StructContext;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader;
+import org.jetbrains.java.decompiler.util.JADNameProvider;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.util.ClasspathScanner;
 
@@ -52,7 +53,24 @@ public class Fernflower implements IDecompiledData {
       converter = null;
     }
 
-    DecompilerContext context = new DecompilerContext(properties, logger, structContext, classProcessor, interceptor);
+    IVariableNamingFactory renamerFactory = null;
+    String factoryClazz = (String) properties.get(DecompilerContext.RENAMER_FACTORY);
+    if (factoryClazz != null) {
+      try {
+        renamerFactory = Class.forName(factoryClazz).asSubclass(IVariableNamingFactory.class).getDeclaredConstructor().newInstance();
+      } catch (Exception e) {
+        logger.writeMessage("Error loading renamer factory class: " + factoryClazz, e);
+      }
+    }
+    if (renamerFactory == null) {
+      if("1".equals(properties.get(IFernflowerPreferences.USE_JAD_VARNAMING))) {
+        renamerFactory = new JADNameProvider.JADNameProviderFactory();
+      } else {
+        renamerFactory = new IdentityRenamerFactory();
+      }
+    }
+
+    DecompilerContext context = new DecompilerContext(properties, logger, structContext, classProcessor, interceptor, renamerFactory);
     DecompilerContext.setCurrentContext(context);
 
     String vendor = System.getProperty("java.vendor", "missing vendor");
diff --git a/src/org/jetbrains/java/decompiler/main/IdentityRenamerFactory.java b/src/org/jetbrains/java/decompiler/main/IdentityRenamerFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b62af8a0587083fedc44fc7fd5032ee32513700
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/IdentityRenamerFactory.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.main;
+
+import java.util.Map;
+
+import org.jetbrains.java.decompiler.main.extern.IVariableNameProvider;
+import org.jetbrains.java.decompiler.main.extern.IVariableNamingFactory;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
+import org.jetbrains.java.decompiler.struct.StructMethod;
+
+public class IdentityRenamerFactory implements IVariableNamingFactory, IVariableNameProvider {
+  @Override
+  public IVariableNameProvider createFactory(StructMethod method) {
+    return this;
+  }
+
+  @Override
+  public String renameAbstractParameter(String abstractParam, int index) {
+    return abstractParam;
+  }
+
+  @Override
+  public Map<VarVersionPair, String> rename(Map<VarVersionPair, String> variables) {
+    return null;
+  }
+
+  @Override
+  public void addParentContext(IVariableNameProvider renamer) {
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index bdd34f0382b06687ef7fb3237bbc96ac322bdd5c..206f62766c52572b6d5583c7822da22a25130adc 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -51,6 +51,8 @@ public interface IFernflowerPreferences {
   String LINE_SEPARATOR_WIN = "\r\n";
   String LINE_SEPARATOR_UNX = "\n";
 
+  String USE_JAD_VARNAMING = "jvn";
+
   Map<String, Object> DEFAULTS = getDefaults();
 
   static Map<String, Object> getDefaults() {
@@ -93,7 +95,8 @@ public interface IFernflowerPreferences {
     defaults.put(BANNER, "");
     defaults.put(UNIT_TEST_MODE, "0");
     defaults.put(DUMP_ORIGINAL_LINES, "0");
+    defaults.put(USE_JAD_VARNAMING, "0");
 
     return Collections.unmodifiableMap(defaults);
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IVariableNameProvider.java b/src/org/jetbrains/java/decompiler/main/extern/IVariableNameProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e6ab2bfc651c25b095f16f9eabc4a81ef10d605
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/extern/IVariableNameProvider.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.main.extern;
+
+import java.util.Map;
+
+import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
+
+public interface IVariableNameProvider {
+  public Map<VarVersionPair,String> rename(Map<VarVersionPair,String> variables);
+  public String renameAbstractParameter(String abstractParam, int index);
+  public void addParentContext(IVariableNameProvider renamer);
+}
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IVariableNamingFactory.java b/src/org/jetbrains/java/decompiler/main/extern/IVariableNamingFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc1d7d67864ab12e894fcdf0ed8e1297ce057bee
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/extern/IVariableNamingFactory.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.main.extern;
+
+import org.jetbrains.java.decompiler.struct.StructMethod;
+
+public interface IVariableNamingFactory {
+  public IVariableNameProvider createFactory(StructMethod structMethod);
+}
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 58bf5152299a7ca6f4d22a2e1f8b95b6393e6242..9942e125766f6162506ff6418f00e8bcbe6d8072 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -545,7 +545,11 @@ public class NestedClassProcessor {
         Map<VarVersionPair, VarType> mapNewTypes = new HashMap<>();  // local var types
         Map<VarVersionPair, LocalVariable> mapNewLVTs = new HashMap<>(); // local var table entries
 
-        Map<Integer, VarVersionPair> mapParamsToNewVars = new HashMap<>();
+        if (enclosingMethod != null) {
+          method.methodStruct.getVariableNamer().addParentContext(enclosingMethod.methodStruct.getVariableNamer());
+        }
+
+        final Map<Integer, VarVersionPair> mapParamsToNewVars = new HashMap<>();
         if (method.synthParameters != null) {
           int index = 0, varIndex = 1;
           MethodDescriptor md = MethodDescriptor.parseDescriptor(method.methodStruct.getDescriptor());
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 89f1c9709d9002701c3ec8b4563d345337995dac..06d6cbad98176e0b86eaa464e799620ca51fd25c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -2,6 +2,7 @@
 package org.jetbrains.java.decompiler.modules.decompiler.vars;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.VarNamesCollector;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
@@ -11,7 +12,9 @@ import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.ExitExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.FieldExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.NewExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph.ExprentIterator;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchAllStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.DoStatement;
@@ -24,6 +27,7 @@ import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
 import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
+import org.jetbrains.java.decompiler.util.StatementIterator;
 
 import java.util.*;
 import java.util.Map.Entry;
@@ -848,6 +852,44 @@ public class VarDefinitionHelper {
     for (Entry<VarVersionPair, VarInfo> e : types.entrySet()) {
       typeNames.put(e.getKey(), e.getValue().getCast());
     }
+
+    Map<VarVersionPair, String> renames = this.mt.getVariableNamer().rename(typeNames);
+
+    // Stuff the parent context into enclosed child methods
+    StatementIterator.iterate(root, (exprent) -> {
+      List<StructMethod> methods = new ArrayList<>();
+      if (exprent.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)exprent;
+        if (var.isClassDef()) {
+          ClassNode child = DecompilerContext.getClassProcessor().getMapRootClasses().get(var.getVarType().value);
+          if (child != null)
+            methods.addAll(child.classStruct.getMethods());
+        }
+      }
+      else if (exprent.type == Exprent.EXPRENT_NEW) {
+        NewExprent _new = (NewExprent)exprent;
+        if (_new.isAnonymous()) { //TODO: Check for Lambda here?
+          ClassNode child = DecompilerContext.getClassProcessor().getMapRootClasses().get(_new.getNewType().value);
+          if (child != null) {
+            if (_new.isLambda()) {
+              if (child.lambdaInformation.is_method_reference) {
+                //methods.add(child.getWrapper().getClassStruct().getMethod(child.lambdaInformation.content_method_key));
+              } else {
+                methods.add(child.classStruct.getMethod(child.lambdaInformation.content_method_name, child.lambdaInformation.content_method_descriptor));
+              }
+            } else {
+              methods.addAll(child.classStruct.getMethods());
+            }
+          }
+        }
+      }
+
+      for (StructMethod meth : methods) {
+        meth.getVariableNamer().addParentContext(VarDefinitionHelper.this.mt.getVariableNamer());
+      }
+      return 0;
+    });
+
     Map<VarVersionPair, LocalVariable> lvts = new HashMap<>();
 
     for (Entry<VarVersionPair, VarInfo> e : types.entrySet()) {
@@ -857,7 +899,16 @@ public class VarDefinitionHelper {
         continue;
       }
       LocalVariable lvt = e.getValue().getLVT();
+      String rename = renames == null ? null : renames.get(idx);
+
+      if (rename != null) {
+        varproc.setVarName(idx, rename);
+      }
+
       if (lvt != null) {
+        if (rename != null) {
+          lvt = lvt.rename(rename);
+        }
         varproc.setVarLVT(idx, lvt);
         lvts.put(idx, lvt);
       }
@@ -991,7 +1042,7 @@ public class VarDefinitionHelper {
 
     private VarInfo(LocalVariable lvt, VarType type) {
       if (lvt != null && lvt.getSignature() != null)
-        this.cast = ExprProcessor.getCastTypeName(GenericType.parse(lvt.getSignature()), true);
+        this.cast = ExprProcessor.getCastTypeName(GenericType.parse(lvt.getSignature()), false);
       else if (lvt != null)
         this.cast = ExprProcessor.getCastTypeName(lvt.getVarType(), false);
       else if (type != null)
diff --git a/src/org/jetbrains/java/decompiler/struct/StructMethod.java b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
index cd9ac7edea0f4c840527cc526712a8f67f2c8a95..195e8d55b6c32bb1be7acadb76dc13ba1a33e44c 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructMethod.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
@@ -4,6 +4,7 @@ package org.jetbrains.java.decompiler.struct;
 import org.jetbrains.java.decompiler.code.*;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.jetbrains.java.decompiler.main.extern.IVariableNameProvider;
 import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructGenericSignatureAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTableAttribute;
@@ -47,6 +48,7 @@ public class StructMethod extends StructMember {
   private InstructionSequence seq;
   private boolean expanded = false;
   private Map<String, StructGeneralAttribute> codeAttributes;
+  private IVariableNameProvider renamer;
 
   public StructMethod(DataInputFullStream in, StructClass clStruct) throws IOException {
     classStruct = clStruct;
@@ -391,6 +393,17 @@ public class StructMethod extends StructMember {
     return seq;
   }
 
+  public IVariableNameProvider getVariableNamer() {
+    if (renamer == null) {
+      this.renamer = DecompilerContext.getNamingFactory().createFactory(this);
+    }
+    return renamer;
+  }
+
+  public void clearVariableNamer() {
+    this.renamer = null;
+  }
+
   public StructLocalVariableTableAttribute getLocalVariableAttr() {
     return getAttribute(StructGeneralAttribute.ATTRIBUTE_LOCAL_VARIABLE_TABLE);
   }
diff --git a/src/org/jetbrains/java/decompiler/util/JADNameProvider.java b/src/org/jetbrains/java/decompiler/util/JADNameProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..b29e693b22abb9c296a1b36fd3e050f41044f24c
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/util/JADNameProvider.java
@@ -0,0 +1,212 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.util;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+
+import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.main.extern.IVariableNameProvider;
+import org.jetbrains.java.decompiler.main.extern.IVariableNamingFactory;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
+import org.jetbrains.java.decompiler.struct.StructMethod;
+import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
+public class JADNameProvider implements IVariableNameProvider {
+  private HashMap<String, Holder> last = null;
+  private HashMap<String, String> remap = null;
+  private StructMethod method = null;
+  private boolean renameParameters = false;
+  private static final Pattern CAPS_START = Pattern.compile("^[A-Z]");
+  private static final Pattern ARRAY = Pattern.compile("(\\[|\\.\\.\\.)");
+
+  public JADNameProvider(StructMethod wrapper) {
+    last = new HashMap<String, Holder>();
+    last.put("int",     new Holder(0, true,  "i", "j", "k", "l"));
+    last.put("byte",    new Holder(0, false, "b"       ));
+    last.put("char",    new Holder(0, false, "c"       ));
+    last.put("short",   new Holder(1, false, "short"   ));
+    last.put("boolean", new Holder(0, true,  "flag"    ));
+    last.put("double",  new Holder(0, false, "d"       ));
+    last.put("float",   new Holder(0, true,  "f"       ));
+    last.put("File",    new Holder(1, true,  "file"    ));
+    last.put("String",  new Holder(0, true,  "s"       ));
+    last.put("Class",   new Holder(0, true,  "oclass"  ));
+    last.put("Long",    new Holder(0, true,  "olong"   ));
+    last.put("Byte",    new Holder(0, true,  "obyte"   ));
+    last.put("Short",   new Holder(0, true,  "oshort"  ));
+    last.put("Boolean", new Holder(0, true,  "obool"   ));
+    last.put("Package", new Holder(0, true,  "opackage"));
+    last.put("Enum",    new Holder(0, true,  "oenum"   ));
+
+    remap = new HashMap<String, String>();
+    remap.put("long", "int");
+
+    this.method = wrapper;
+  }
+
+  @Override
+  public synchronized void addParentContext(IVariableNameProvider iparent) {
+    JADNameProvider parent = (JADNameProvider) iparent;
+    HashMap<String, Holder> temp = new HashMap<String, Holder>();
+    for (Entry<String, Holder> e : parent.last.entrySet()) {
+      Holder v = e.getValue();
+      temp.put(e.getKey(), new Holder(v.id, v.skip_zero, v.names));
+    }
+    this.last = temp;
+    this.remap = new HashMap<>(parent.remap);
+  }
+
+  private static class Holder {
+    public int id;
+    public boolean skip_zero;
+    public final List<String> names = new ArrayList<String>();
+
+    public Holder(int t1, boolean skip_zero, String... names) {
+      this.id = t1;
+      this.skip_zero = skip_zero;
+      Collections.addAll(this.names, names);
+    }
+
+    public Holder(int t1, boolean skip_zero, List<String> names) {
+      this.id = t1;
+      this.skip_zero = skip_zero;
+      this.names.addAll(names);
+    }
+  }
+
+  @Override
+  public Map<VarVersionPair,String> rename(Map<VarVersionPair, String> entries) {
+    int params = 0;
+    if ((this.method.getAccessFlags() & CodeConstants.ACC_STATIC) != CodeConstants.ACC_STATIC) {
+      params++;
+    }
+
+    MethodDescriptor md = MethodDescriptor.parseDescriptor(this.method.getDescriptor());
+    for (VarType param : md.params) {
+      params += param.stackSize;
+    }
+
+    List<VarVersionPair> keys = new ArrayList<VarVersionPair>(entries.keySet());
+    Collections.sort(keys, new Comparator<VarVersionPair>(){
+      @Override
+      public int compare(VarVersionPair o1, VarVersionPair o2) {
+        if (o1.var != o2.var) return o1.var - o2.var;
+        return o1.version - o2.version;
+      }
+    });
+
+    Map<VarVersionPair, String> result = new LinkedHashMap<VarVersionPair, String>();
+    for (VarVersionPair ver : keys) {
+      String type = entries.get(ver);
+      if ("this".equals(type)) {
+        continue;
+      }
+      if (type.indexOf('<') != -1) {
+        type = type.substring(0, type.indexOf('<'));
+      }
+      if (type.indexOf('.') != -1) {
+        type = type.substring(type.lastIndexOf('.') + 1);
+      }
+      if (renameParameters || ver.var >= params) {
+        result.put(ver, getNewName(type));
+      }
+    }
+    return result;
+  }
+
+  protected synchronized String getNewName(String type) {
+    String index = null;
+    String findtype = type;
+
+    while (findtype.contains("[][]")) {
+      findtype = findtype.replaceAll("\\[\\]\\[\\]", "[]");
+    }
+    if (last.containsKey(findtype)) {
+      index = findtype;
+    }
+    else if (last.containsKey(findtype.toLowerCase(Locale.ENGLISH))) {
+      index = findtype.toLowerCase(Locale.ENGLISH);
+    }
+    else if (remap.containsKey(type)) {
+      index = remap.get(type);
+    }
+
+    if ((index == null || index.length() == 0) && (CAPS_START.matcher(type).find() || ARRAY.matcher(type).find())) { // replace multi things with arrays.
+      type = type.replace("...", "[]");
+
+      while (type.contains("[][]")) {
+        type = type.replaceAll("\\[\\]\\[\\]", "[]");
+      }
+
+      String name = type.toLowerCase(Locale.ENGLISH);
+      // Strip single dots that might happen because of inner class references
+      name = name.replace(".", "");
+      boolean skip_zero = true;
+
+      if (Pattern.compile("\\[").matcher(type).find()) {
+        skip_zero = true;
+        name = "a" + name.replace("[]", "").replace("...", "");
+      }
+
+      last.put(type.toLowerCase(Locale.ENGLISH), new Holder(0, skip_zero, name));
+      index = type.toLowerCase(Locale.ENGLISH);
+    }
+
+    if (index == null || index.length() == 0) {
+      return type.toLowerCase(Locale.ENGLISH);
+    }
+
+    Holder holder = last.get(index);
+    int id = holder.id;
+    List<String> names = holder.names;
+
+    int ammount = names.size();
+
+    String name;
+    if (ammount == 1) {
+      name = names.get(0) + (id == 0 && holder.skip_zero ? "" : id);
+    }
+    else {
+      int num = id / ammount;
+      name = names.get(id % ammount) + (id < ammount && holder.skip_zero ? "" : num);
+    }
+
+    holder.id++;
+    return name;
+  }
+
+  @Override
+  public String renameAbstractParameter(String abstractParam, int index) {
+    return abstractParam;
+  }
+
+  public static class JADNameProviderFactory implements IVariableNamingFactory {
+    @Override
+    public IVariableNameProvider createFactory(StructMethod method) {
+      return new JADNameProvider(method);
+    }
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/util/StatementIterator.java b/src/org/jetbrains/java/decompiler/util/StatementIterator.java
new file mode 100644
index 0000000000000000000000000000000000000000..a41c910e58c3c0e16e6b13a90fe9f34acea09662
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/util/StatementIterator.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.util;
+
+import java.util.List;
+
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph.ExprentIterator;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+
+public class StatementIterator {
+  public static void iterate(Statement stat, ExprentIterator itr) {
+    if (stat == null) {
+      return;
+    }
+
+    for (Exprent exp : stat.getVarDefinitions()) {
+      iterate(exp, itr);
+    }
+
+    if (stat.getExprents() == null) {
+      for (Object obj : stat.getSequentialObjects()) {
+        if (obj instanceof Statement) {
+          iterate((Statement)obj, itr);
+        }
+        else if (obj instanceof Exprent) {
+          iterate((Exprent)obj, itr);
+        }
+      }
+    }
+    else {
+      for (Exprent exp : stat.getExprents()) {
+        iterate(exp, itr);
+      }
+    }
+  }
+
+  private static void iterate(Exprent exp, ExprentIterator itr) {
+    List<Exprent> lst = exp.getAllExprents(true);
+    lst.add(exp);
+    for (Exprent exprent : lst) {
+      itr.processExprent(exprent);
+    }
+  }
+}
diff --git a/test/org/jetbrains/java/decompiler/JADTest.java b/test/org/jetbrains/java/decompiler/JADTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..176b850d338fbfbbd65eab8405c46f35de662c7d
--- /dev/null
+++ b/test/org/jetbrains/java/decompiler/JADTest.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler;
+
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.junit.Test;
+
+public class JADTest extends SingleClassesTestBase {
+
+    @Override
+    protected String[] getDecompilerOptions() {
+      return new String[] {
+        IFernflowerPreferences.BYTECODE_SOURCE_MAPPING, "1",
+        IFernflowerPreferences.DUMP_ORIGINAL_LINES, "1",
+        IFernflowerPreferences.USE_JAD_VARNAMING, "1"
+      };
+    }
+
+    @Test public void testClassFields() { doTest("pkg/TestJADNaming"); }
+
+}
diff --git a/testData/classes/pkg/TestJADNaming.class b/testData/classes/pkg/TestJADNaming.class
new file mode 100644
index 0000000000000000000000000000000000000000..ce5676d7c337af79875dd42852333b71b071644c
GIT binary patch
literal 379
zcmY+8J5Iwu5QhJ?*Iqvo93vSCkrYq`3fv&mgh&XK0zoJe(XWkVIS(faHdo*n$rY$T
z6dZtxV{i(>*g;54F^~VB{dPXS-`)Y7pkYBpU0_SVVbD8imgZdswS9QUz%OR^F@tlR
zW^uomhVf!3!wD(8S7Z@GeUQs&d?V+TOb`ZZFe?^O+)K-~?P2_oU!7m}<uuKb<B@!n
zHE?JQ?tGm1|6GPf>H8CzCH`$VilZF+Q0Tfc6ws&8DC;z}s4}YB(F@o!H4K8Xz7Z)K
zf2&XQ)FkiJRlho}_&js%*RJcV0>0N=!fbhb1(gSy8t6O_YG8Ppr!Qf7!ZXMz;YtPH
nAtb1C3Em`R8x{iC75o6onnX>&Vidp{yD)#JjY3D+6|43GV%Iy?

literal 0
HcmV?d00001

diff --git a/testData/results/TestJADNaming.dec b/testData/results/TestJADNaming.dec
new file mode 100644
index 0000000000000000000000000000000000000000..b5d7ed54d77cc30c25688e1989a5a63eafaf863f
--- /dev/null
+++ b/testData/results/TestJADNaming.dec
@@ -0,0 +1,81 @@
+package pkg;
+
+public class TestJADNaming {
+   public void Func() {
+      short short1 = 1000;// 7
+      short short2 = 2000;
+      short short3 = 3000;
+      short short4 = 4000;
+      if (short1 != short2 && short3 == short4) {// 8
+         ;
+      }
+
+      boolean flag = true;// 9
+      boolean flag1 = false;
+      boolean flag2 = true;
+      boolean flag3 = false;
+      if (flag != flag1 && flag2 == flag3) {// 10
+         ;
+      }
+
+   }// 11
+}
+
+class 'pkg/TestJADNaming' {
+   method 'Func ()V' {
+      0      4
+      1      4
+      2      4
+      3      4
+      4      5
+      5      5
+      6      5
+      7      5
+      8      6
+      9      6
+      a      6
+      b      6
+      c      7
+      d      7
+      e      7
+      f      7
+      10      7
+      11      8
+      12      8
+      13      8
+      16      8
+      17      8
+      18      8
+      19      8
+      1c      12
+      1d      12
+      1e      12
+      1f      13
+      20      13
+      21      13
+      22      14
+      23      14
+      24      14
+      25      15
+      26      15
+      27      15
+      28      16
+      29      16
+      2a      16
+      2b      16
+      2c      16
+      2f      16
+      30      16
+      31      16
+      32      16
+      33      16
+      36      20
+   }
+}
+
+Lines mapping:
+7 <-> 5
+8 <-> 9
+9 <-> 13
+10 <-> 17
+11 <-> 21
diff --git a/testData/src/pkg/TestJADNaming.java b/testData/src/pkg/TestJADNaming.java
new file mode 100644
index 0000000000000000000000000000000000000000..87e1c035ea3a6fd049bb95ba09935cc674afacd4
--- /dev/null
+++ b/testData/src/pkg/TestJADNaming.java
@@ -0,0 +1,12 @@
+package pkg;
+
+import java.io.File;
+
+public class TestJADNaming {
+    public void Func() {
+        int a = 1000, b = 2000, c = 3000, d = 4000;
+        if (a == b || c == d);
+        boolean flag1 = true, flag2 = false, flag3 = true, flag4 = false;
+        if (flag1 == flag2 || flag3 == flag4);
+    }
+}
\ No newline at end of file
