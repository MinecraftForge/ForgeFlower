From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Thu, 15 Oct 2015 15:51:24 -0700
Subject: [PATCH] Add support for ++ and -- field accessors in inner classes


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedMemberAccess.java b/src/org/jetbrains/java/decompiler/main/rels/NestedMemberAccess.java
index 3fa8128a4e7f607770d592033588e716f49f12f0..b4856a6fabd1b06c2f8a12d9d11f62f2b2e408ec 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedMemberAccess.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedMemberAccess.java
@@ -40,6 +40,7 @@ public class NestedMemberAccess {
   private static final int METHOD_ACCESS_FIELD_GET = 2;
   private static final int METHOD_ACCESS_FIELD_SET = 3;
   private static final int METHOD_ACCESS_METHOD = 4;
+  private static final int METHOD_ACCESS_FIELD_INC = 5;
 
   private boolean noSynthFlag;
   private final Map<MethodWrapper, Integer> mapMethodType = new HashMap<MethodWrapper, Integer>();
@@ -137,6 +138,24 @@ public class NestedMemberAccess {
                     }
                   }
                 }
+                break;
+              case Exprent.EXPRENT_FUNCTION:
+                FunctionExprent func = (FunctionExprent)exprCore;
+                if (func.getLstOperands().size() == 1 && func.getLstOperands().get(0).type == Exprent.EXPRENT_FIELD) {
+                  FieldExprent field = (FieldExprent)func.getLstOperands().get(0);
+                  if ((parcount == 1 && !field.isStatic()) ||
+                      (parcount == 0 && field.isStatic())) {
+                    if (field.getClassname().equals(node.classStruct.qualifiedName)) {
+                      if (func.getFuncType() == FunctionExprent.FUNCTION_IPP ||
+                          func.getFuncType() == FunctionExprent.FUNCTION_PPI ||
+                          func.getFuncType() == FunctionExprent.FUNCTION_IMM ||
+                          func.getFuncType() == FunctionExprent.FUNCTION_MMI) {
+                        type = METHOD_ACCESS_FIELD_INC;
+                      }
+                    }
+                  }
+                }
+                break;
             }
 
 
@@ -426,6 +445,14 @@ public class NestedMemberAccess {
         }
 
         retexprent = invret;
+        break;
+      case METHOD_ACCESS_FIELD_INC:
+        FunctionExprent func = (FunctionExprent)((ExitExprent)source).getValue().copy();
+        FieldExprent field = (FieldExprent)func.getLstOperands().get(0);
+        if (!field.isStatic()) {
+          field.replaceExprent(field.getInstance(), invexpr.getLstParameters().get(0));
+        }
+        retexprent = func;
     }
 
 
