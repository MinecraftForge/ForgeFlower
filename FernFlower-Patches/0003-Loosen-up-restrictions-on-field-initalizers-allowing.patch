From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Sat, 1 Aug 2015 15:10:28 -0700
Subject: [PATCH] Loosen up restrictions on field initalizers allowing for some
 to be moved out of the <ini> and <cinit> functions.


diff --git a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
index d9a0a3d828be573cf474d22d836c21ece546e424..e64feea59b43cd41ad42ace70ebf78dec4ffb54e 100644
--- a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
@@ -29,7 +29,10 @@ import org.jetbrains.java.decompiler.struct.StructField;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 
 public class InitializerProcessor {
@@ -124,13 +127,13 @@ public class InitializerProcessor {
 
     RootStatement root = meth.root;
     StructClass cl = wrapper.getClassStruct();
+    Set<String> whitelist = new HashSet<String>();
 
     Statement firstdata = findFirstData(root);
     if (firstdata != null) {
-      while (!firstdata.getExprents().isEmpty()) {
-        Exprent exprent = firstdata.getExprents().get(0);
-
-        boolean found = false;
+      Iterator<Exprent> itr = firstdata.getExprents().iterator();
+      while (itr.hasNext()) {
+        Exprent exprent = itr.next();
 
         if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
           AssignmentExprent asexpr = (AssignmentExprent)exprent;
@@ -139,22 +142,17 @@ public class InitializerProcessor {
             if (fexpr.isStatic() && fexpr.getClassname().equals(cl.qualifiedName) &&
                 cl.hasField(fexpr.getName(), fexpr.getDescriptor().descriptorString)) {
 
-              if (isExprentIndependent(asexpr.getRight(), meth)) {
-
-                String keyField = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+              String keyField = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+              if (isExprentIndependent(asexpr.getRight(), meth, cl, whitelist, cl.getFields().getIndexByKey(keyField))) {
                 if (!wrapper.getStaticFieldInitializers().containsKey(keyField)) {
                   wrapper.getStaticFieldInitializers().addWithKey(asexpr.getRight(), keyField);
-                  firstdata.getExprents().remove(0);
-                  found = true;
+                  whitelist.add(keyField);
+                  itr.remove();
                 }
               }
             }
           }
         }
-
-        if (!found) {
-          break;
-        }
       }
     }
   }
@@ -191,6 +189,8 @@ public class InitializerProcessor {
       return;
     }
 
+    Set<String> whitelist = new HashSet<String>();
+
     while (true) {
 
       String fieldWithDescr = null;
@@ -216,8 +216,8 @@ public class InitializerProcessor {
                 cl.hasField(fexpr.getName(), fexpr
                   .getDescriptor().descriptorString)) { // check for the physical existence of the field. Could be defined in a superclass.
 
-              if (isExprentIndependent(asexpr.getRight(), lstMethWrappers.get(i))) {
-                String fieldKey = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+              String fieldKey = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+              if (isExprentIndependent(asexpr.getRight(), lstMethWrappers.get(i), cl, whitelist, cl.getFields().getIndexByKey(fieldKey))) {
                 if (fieldWithDescr == null) {
                   fieldWithDescr = fieldKey;
                   value = asexpr.getRight();
@@ -252,7 +252,7 @@ public class InitializerProcessor {
     }
   }
 
-  private static boolean isExprentIndependent(Exprent exprent, MethodWrapper meth) {
+  private static boolean isExprentIndependent(Exprent exprent, MethodWrapper meth, StructClass cl, Set<String> whitelist, int fidx) {
 
     List<Exprent> lst = exprent.getAllExprents(true);
     lst.add(exprent);
@@ -270,7 +270,17 @@ public class InitializerProcessor {
           }
           break;
         case Exprent.EXPRENT_FIELD:
-          return false;
+          FieldExprent fexpr = (FieldExprent)expr;
+          if (cl.qualifiedName.equals(fexpr.getClassname())) {
+            String key = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+            if (!whitelist.contains(key)) {
+              return false;
+            }
+            return cl.getFields().getIndexByKey(key) < fidx;
+          }
+          else if (!fexpr.isStatic()) {
+            return false;
+          }
       }
     }
 
