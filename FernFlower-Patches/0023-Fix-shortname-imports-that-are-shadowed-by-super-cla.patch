From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Fri, 27 Jul 2018 14:02:27 -0700
Subject: [PATCH] Fix shortname imports that are shadowed by super class inner
 classes


diff --git a/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java b/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
index 6b7d72b6f599aaf04f122ff38ca872f469c9727e..fa48d4659f497d94539c878c8718a5cd47573d9a 100644
--- a/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
+++ b/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
@@ -3,12 +3,12 @@ package org.jetbrains.java.decompiler.main.collectors;
 
 import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
-import org.jetbrains.java.decompiler.struct.StructClass;
-import org.jetbrains.java.decompiler.struct.StructContext;
-import org.jetbrains.java.decompiler.struct.StructField;
 import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructInnerClassesAttribute;
 import org.jetbrains.java.decompiler.util.TextBuffer;
+import org.jetbrains.java.decompiler.struct.StructClass;
+import org.jetbrains.java.decompiler.struct.StructContext;
+import org.jetbrains.java.decompiler.struct.StructField;
 
 import java.util.*;
 import java.util.stream.Collectors;
@@ -20,7 +20,7 @@ public class ImportCollector {
   private final Set<String> setNotImportedNames = new HashSet<>();
   // set of field names in this class and all its predecessors.
   private final Set<String> setFieldNames = new HashSet<>();
-  private final Set<String> setInnerClassNames = new HashSet<>();
+  private final Map<String, Map<String, String>> mapInnerClassNames = new HashMap<>();
   private final String currentPackageSlash;
   private final String currentPackagePoint;
 
@@ -38,45 +38,18 @@ public class ImportCollector {
     }
 
     Map<String, StructClass> classes = DecompilerContext.getStructContext().getClasses();
-    LinkedList<String> queue = new LinkedList<>();
-    Set<StructClass> processedClasses = new HashSet<>();
     StructClass currentClass = root.classStruct;
     while (currentClass != null) {
-      processedClasses.add(currentClass);
-      if (currentClass.superClass != null) {
-        queue.add(currentClass.superClass.getString());
-      }
-
-      Collections.addAll(queue, currentClass.getInterfaceNames());
-
       // all field names for the current class ..
       for (StructField f : currentClass.getFields()) {
         setFieldNames.add(f.getName());
       }
 
-      // .. all inner classes for the current class ..
-      StructInnerClassesAttribute attribute = currentClass.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
-      if (attribute != null) {
-        for (StructInnerClassesAttribute.Entry entry : attribute.getEntries()) {
-          if (entry.enclosingName != null && entry.enclosingName.equals(currentClass.qualifiedName)) {
-            setInnerClassNames.add(entry.simpleName);
-          }
-        }
-      }
-
       // .. and traverse through parent.
-      do {
-        currentClass = queue.isEmpty() ? null : classes.get(queue.removeFirst());
-
-        if (currentClass != null && processedClasses.contains(currentClass)) {
-          // Class already processed, skipping.
-
-          // This may be sign of circularity in the class hierarchy but in most cases this mean that same interface
-          // are listed as implemented several times in the class hierarchy.
-          currentClass = null;
-        }
-      } while (currentClass == null && !queue.isEmpty());
+      currentClass = currentClass.superClass != null ? classes.get(currentClass.superClass.getString()) : null;
     }
+
+    collectConflictingShortNames(root, new HashMap<>());
   }
 
   /**
@@ -152,11 +125,36 @@ public class ImportCollector {
     // 3) inner class with the same short name in the current class, a super class, or an implemented interface
     boolean existsDefaultClass =
       (context.getClass(currentPackageSlash + outerShortName) != null && !packageName.equals(currentPackagePoint)) || // current package
-      (context.getClass(outerShortName) != null && !currentPackagePoint.isEmpty()) || // default package
-      setInnerClassNames.contains(outerShortName); // inner class
+      (context.getClass(outerShortName) != null && !currentPackagePoint.isEmpty());
+
+    ClassNode currCls = (ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
+    String mapKey = currCls == null ? "" : currCls.classStruct.qualifiedName;
+    Map<String, String> innerClassNames = mapInnerClassNames.getOrDefault(mapKey, new HashMap<>());
+    if (!existsDefaultClass && innerClassNames.containsKey(outerShortName) && !innerClassNames.get(outerShortName).equals(fullName)) {
+      // if the class being accessed is also an inner class
+      // attempt to import the outer class and reference OuterClass.InnerClass
+      if (context.getClass(packageName.replace('.', '/') + "$" + outerShortName) != null) {
+        lastDot = fullName.lastIndexOf(".", lastDot - 1);
+        if (lastDot >= 0) {
+          nestedName = fullName.substring(lastDot + 1);
+          outerShortName = packageName.substring(lastDot + 1);
+          packageName = packageName.substring(0, lastDot);
+
+          if (innerClassNames.containsKey(outerShortName)  && !innerClassNames.get(outerShortName).equals(packageName + '.' + outerShortName)) {
+            existsDefaultClass = true;
+            nestedName = null;
+          }
+        }
+      }
+      else {
+        existsDefaultClass = true;
+      }
+    }
 
-    if (existsDefaultClass || (mapSimpleNames.containsKey(outerShortName) && !packageName.equals(mapSimpleNames.get(outerShortName)))) {
-      return packageName + "." + nestedName;
+    if (existsDefaultClass ||
+        (mapSimpleNames.containsKey(outerShortName) && !packageName.equals(mapSimpleNames.get(outerShortName)))) {
+      //  don't return full name because if the class is a inner class, full name refers to the parent full name, not the child full name
+      return nestedName == null ? fullName : (packageName + "." + nestedName);
     }
     else if (!mapSimpleNames.containsKey(outerShortName)) {
       mapSimpleNames.put(outerShortName, packageName);
@@ -192,4 +190,43 @@ public class ImportCollector {
       .map(ent -> ent.getValue() + "." + ent.getKey())
       .collect(Collectors.toList());
   }
-}
+
+  private void collectConflictingShortNames(ClassNode root, Map<String, String> rootNames) {
+    Map<String, String> names = new HashMap<>(rootNames);
+    getSuperClassInnerClasses(root, names);
+    mapInnerClassNames.put(root.classStruct.qualifiedName, names);
+
+    for (ClassNode nested : root.nested) {
+      collectConflictingShortNames(nested, names);
+    }
+  }
+
+  private void getSuperClassInnerClasses(ClassNode node, Map<String, String> names) {
+    Map<String, StructClass> classes = DecompilerContext.getStructContext().getClasses();
+    LinkedList<String> queue = new LinkedList<>();
+    StructClass currentClass = node.classStruct;
+    while (currentClass != null) {
+      if (currentClass.superClass != null) {
+        queue.add(currentClass.superClass.getString());
+      }
+
+      Collections.addAll(queue, currentClass.getInterfaceNames());
+
+      // .. all inner classes for the current class ..
+      StructInnerClassesAttribute attribute = currentClass.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
+      if (attribute != null) {
+        for (StructInnerClassesAttribute.Entry entry : attribute.getEntries()) {
+          if (entry.enclosingName != null && entry.enclosingName.equals(currentClass.qualifiedName)) {
+            names.put(entry.simpleName, entry.innerName.replace('/', '.').replace('$', '.'));
+          }
+        }
+      }
+
+      // .. and traverse through parent.
+      currentClass = !queue.isEmpty() ? classes.get(queue.removeFirst()) : null;
+      while (currentClass == null && !queue.isEmpty()) {
+        currentClass = classes.get(queue.removeFirst());
+      }
+    }
+  }
+}
\ No newline at end of file
