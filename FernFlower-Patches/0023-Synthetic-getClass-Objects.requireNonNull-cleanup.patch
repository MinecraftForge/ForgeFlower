From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Thu, 26 Jul 2018 13:28:40 -0700
Subject: [PATCH] Synthetic getClass/Objects.requireNonNull cleanup


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 474ffda1b9d610968bd12160f2153713b37f2db9..eef5cdaf7fa5c425abddea9ab0717f6844c97460 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -617,6 +617,23 @@ public class ExprProcessor implements CodeConstants {
           break;
         case opc_pop:
           stack.pop();
+          // check for synthetic getClass (J8) / Objects.requireNonNull() (J9+) calls added by the compiler
+          // see https://stackoverflow.com/a/20130641
+          if (i > 0) {
+            Exprent last = exprlist.get(exprlist.size() - 1);
+            if (last.type == Exprent.EXPRENT_ASSIGNMENT && ((AssignmentExprent)last).getRight().type == Exprent.EXPRENT_INVOCATION) {
+              InvocationExprent invocation = (InvocationExprent) ((AssignmentExprent) last).getRight();
+              if (i + 1 < seq.length()) {
+                if ((!invocation.isStatic() && invocation.getName().equals("getClass") && invocation.getStringDescriptor().equals("()Ljava/lang/Class;")) // J8
+                  || (invocation.isStatic() && invocation.getClassname().equals("java/util/Objects") && invocation.getName().equals("requireNonNull") && invocation.getStringDescriptor().equals("(Ljava/lang/Object;)Ljava/lang/Object;"))) { // J9+
+                  int nextOpc = seq.getInstr(i + 1).opcode;
+                  if (nextOpc >= opc_aconst_null && nextOpc <= opc_ldc2_w) {
+                    invocation.setSyntheticNullCheck();
+                  }
+                }
+              }
+            }
+          }
           break;
         case opc_pop2:
           if (stack.getByOffset(-1).getExprType().stackSize == 1) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
index 986a8a72ec138ea637d3446ed2e823f6100c31cc..fa48cab3cb2b7da418322db7c10952f2f965e495 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
@@ -71,6 +71,10 @@ public class SimplifyExprentsHelper {
           if (changed) {
             break;
           }
+
+          if (!st.getStats().isEmpty() && hasQualifiedNewGetClass(st, st.getStats().get(0))) {
+            break;
+          }
         }
 
         res |= changed;
@@ -505,21 +509,53 @@ public class SimplifyExprentsHelper {
     return false;
   }
 
+  private static boolean hasQualifiedNewGetClass(Statement parent, Statement child) {
+    if (child.type == Statement.TYPE_BASICBLOCK && child.getExprents() != null && !child.getExprents().isEmpty()) {
+      Exprent firstExpr = child.getExprents().get(child.getExprents().size() - 1);
+
+      if (parent.type == Statement.TYPE_IF) {
+        if (isQualifiedNewGetClass(firstExpr, ((IfStatement)parent).getHeadexprent().getCondition())) {
+          child.getExprents().remove(firstExpr);
+          return true;
+        }
+      }
+      // TODO DoStatements ?
+    }
+    return false;
+  }
+
   private static boolean isQualifiedNewGetClass(Exprent first, Exprent second) {
     if (first.type == Exprent.EXPRENT_INVOCATION) {
       InvocationExprent invocation = (InvocationExprent)first;
 
-      if (!invocation.isStatic() && invocation.getInstance().type == Exprent.EXPRENT_VAR && invocation.getName().equals("getClass") &&
-          invocation.getStringDescriptor().equals("()Ljava/lang/Class;")) {
+      if ((!invocation.isStatic() &&
+           invocation.getName().equals("getClass") && invocation.getStringDescriptor().equals("()Ljava/lang/Class;")) // J8
+        || (invocation.isStatic() && invocation.getClassname().equals("java/util/Objects") && invocation.getName().equals("requireNonNull")
+            && invocation.getStringDescriptor().equals("(Ljava/lang/Object;)Ljava/lang/Object;"))) { // J9+
+
+        if (invocation.isSyntheticNullCheck()) {
+          return true;
+        }
 
-        List<Exprent> lstExprents = second.getAllExprents();
+        LinkedList<Exprent> lstExprents = new LinkedList<>();
         lstExprents.add(second);
 
-        for (Exprent expr : lstExprents) {
+        final Exprent target;
+        if (invocation.isStatic()) { // Objects.requireNonNull(target) (J9+)
+          // detect target type
+          target = invocation.getLstParameters().get(0);
+        } else { // target.getClass() (J8)
+          target = invocation.getInstance();
+        }
+
+        while (!lstExprents.isEmpty()) {
+          Exprent expr = lstExprents.removeFirst();
+          lstExprents.addAll(expr.getAllExprents());
           if (expr.type == Exprent.EXPRENT_NEW) {
             NewExprent newExpr = (NewExprent)expr;
             if (newExpr.getConstructor() != null && !newExpr.getConstructor().getLstParameters().isEmpty() &&
-                newExpr.getConstructor().getLstParameters().get(0).equals(invocation.getInstance())) {
+              (newExpr.getConstructor().getLstParameters().get(0).equals(target) ||
+                newExpr.getConstructor().getLstParameters().get(0).getExprType().equals(target.getExprType()))) {
 
               String classname = newExpr.getNewType().value;
               ClassNode node = DecompilerContext.getClassProcessor().getMapRootClasses().get(classname);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index 9d4eae94966f13ef56e710f53f67f84ef5a50cd3..16158a3d134c7af2ecdf58a539ff1d33ba80c6b9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -61,6 +61,7 @@ public class InvocationExprent extends Exprent {
   private List<VarType> genericArgs = new ArrayList<>();
   private boolean forceBoxing = false;
   private boolean forceUnboxing = false;
+  private boolean isSyntheticNullCheck = false;
 
   public InvocationExprent() {
     super(EXPRENT_INVOCATION);
@@ -161,6 +162,7 @@ public class InvocationExprent extends Exprent {
 
     addBytecodeOffsets(expr.bytecode);
     bootstrapArguments = expr.getBootstrapArguments();
+    isSyntheticNullCheck = expr.isSyntheticNullCheck();
   }
 
   @Override
@@ -970,6 +972,14 @@ public class InvocationExprent extends Exprent {
     return bootstrapArguments;
   }
 
+  public void setSyntheticNullCheck() {
+    isSyntheticNullCheck = true;
+  }
+
+  public boolean isSyntheticNullCheck() {
+    return isSyntheticNullCheck;
+  }
+
   @Override
   public void getBytecodeRange(BitSet values) {
     measureBytecode(values, lstParameters);
