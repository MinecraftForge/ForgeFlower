From f3b023e5db4654cb1201528f0633545592f2f610 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Tue, 4 Aug 2015 21:50:19 -0700
Subject: Change LVT indexing to VarVersionPair


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index ce81474ef8291e0a4fbf59bed8b0902de1731921..fbd3455dae324f21854b6374448c0c50f0c1e1ce 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -44,7 +44,7 @@ public class VarProcessor {
     new VarDefinitionHelper(root, mt, this).setVarDefinitions();
   }
 
-  public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) {
+  public void setDebugVarNames(Map<VarVersionPair, String> mapDebugVarNames) {
     if (varVersions == null) {
       return;
     }
@@ -65,8 +65,11 @@ public class VarProcessor {
       String name = mapVarNames.get(pair);
 
       Integer index = mapOriginalVarIndices.get(pair.var);
-      if (index != null && mapDebugVarNames.containsKey(index)) {
-        name = mapDebugVarNames.get(index);
+      if (index != null) {
+        VarVersionPair key = new VarVersionPair(index.intValue(), pair.version);
+        if (mapDebugVarNames.containsKey(key)) {
+          name = mapDebugVarNames.get(key);
+        }
       }
 
       Integer counter = mapNames.get(name);
diff --git a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
index 04f534ed5482d8778826437dafd6979085a3fb65..5f55537fc80d50a1b22919165eb117f51f0b86b8 100644
--- a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
+++ b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
@@ -15,12 +15,14 @@
  */
 package org.jetbrains.java.decompiler.struct.attr;
 
+import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.consts.ConstantPool;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -89,7 +91,17 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
         return 0;
     }
   }
-  private Map<Integer, String> mapVarNames = Collections.emptyMap();
+
+  private static Comparator<LVTVariable> comp = new Comparator<LVTVariable>() {
+    @Override
+    public int compare(LVTVariable o1, LVTVariable o2)
+    {
+      if (o1.index != o2.index) return o1.index - o2.index;
+      if (o1.start != o2.start) return o1.start - o2.start;
+      return o1.end - o2.end;
+    }
+  };
+  private Map<VarVersionPair, String> mapVarNames = Collections.emptyMap();
 
   private Map<Integer, Set<LVTVariable>> endpoints = Collections.emptyMap();
   private ArrayList<LVTVariable> allLVT;
@@ -101,7 +113,7 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
     int len = data.readUnsignedShort();
     boolean isLVTT = this.getName().equals(ATTRIBUTE_LOCAL_VARIABLE_TYPE_TABLE);
     if (len > 0) {
-      mapVarNames = new HashMap<Integer, String>(len);
+      mapVarNames = new HashMap<VarVersionPair, String>(len);
       endpoints = new HashMap<Integer,Set<LVTVariable>>(len);
       allLVT = new ArrayList<LVTVariable>(len);
       for (int i = 0; i < len; i++) {
@@ -111,10 +123,11 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
         int descIndex = data.readUnsignedShort(); // either descriptor or signature
         int varIndex = data.readUnsignedShort();
         LVTVariable v = new LVTVariable(pool.getPrimitiveConstant(nameIndex).getString(), pool.getPrimitiveConstant(descIndex).getString(),start,start+vlen,varIndex,isLVTT);
-        mapVarNames.put(varIndex, pool.getPrimitiveConstant(nameIndex).getString());
         allLVT.add(v);
         v.addTo(endpoints);
       }
+      Collections.sort(allLVT, comp);
+      buildNameMap();
     }
     else {
       mapVarNames = Collections.emptyMap();
@@ -124,17 +137,33 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
   public void addLocalVariableTable(StructLocalVariableTableAttribute attr) {
     mapVarNames.putAll(attr.getMapVarNames());
     for (LVTVariable other : attr.allLVT) {
-        int idx = allLVT.indexOf(other);
-        if (idx < 0) {
-            allLVT.add(other);
-        } else {
-            LVTVariable mine = allLVT.get(idx);
-            mine.merge(other);
-        }
+      int idx = allLVT.indexOf(other);
+      if (idx < 0) {
+        allLVT.add(other);
+      }
+      else {
+        LVTVariable mine = allLVT.get(idx);
+        mine.merge(other);
+      }
+    }
+    Collections.sort(allLVT, comp);
+  }
+
+  private void buildNameMap() {
+    Map<Integer, Integer> versions = new HashMap<Integer, Integer>();
+    mapVarNames.clear();
+    for (LVTVariable lvt : allLVT) {
+      Integer idx = versions.get(lvt.index);
+      if (idx == null)
+        idx = 0;
+      else
+        idx++;
+      versions.put(lvt.index, idx);
+      mapVarNames.put(new VarVersionPair(lvt.index, idx.intValue()), lvt.name);
     }
   }
 
-  public Map<Integer, String> getMapVarNames() {
+  public Map<VarVersionPair, String> getMapVarNames() {
     return mapVarNames;
   }
 }
-- 
2.28.0.windows.1

