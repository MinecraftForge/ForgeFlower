From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Apr 2017 13:21:00 -0700
Subject: [PATCH] Fix initializers for anon and synthetic classes


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 72fefe4c1c0aa322154541d54b1ccb35cc2154d1..1182bd193cb0aef1ebacbcd8d6427dd79af9715f 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -41,6 +41,7 @@ public class ClassWriter {
     StructClass cl = wrapper.getClassStruct();
 
     InitializerProcessor.extractInitializers(wrapper);
+    InitializerProcessor.hideInitalizers(wrapper);
 
     if (node.type == ClassNode.CLASS_ROOT &&
         !cl.isVersionGE_1_5() &&
diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 1ee22f210c1828c5ce7adc09a468e5bd649cc637..0041f13df8b5336da5b9891df0e399cbc2de4e3c 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -87,6 +87,31 @@ public class ClassesProcessor implements CodeConstants {
               rec.type = entry.simpleNameIdx == 0 ? ClassNode.CLASS_ANONYMOUS : entry.outerNameIdx == 0 ? ClassNode.CLASS_LOCAL : ClassNode.CLASS_MEMBER;
               rec.accessFlags = entry.accessFlags;
 
+              // nested class type
+              if (entry.innerName != null) {
+                if (entry.simpleName == null) {
+                  rec.type = ClassNode.CLASS_ANONYMOUS;
+                }
+                else {
+                  StructClass in = context.getClass(entry.innerName);
+                  if (in == null) { // A referenced library that was not added to the context, make assumptions
+                      rec.type = ClassNode.CLASS_MEMBER;
+                  }
+                  else {
+                    StructEnclosingMethodAttribute attr = in.getAttribute(StructGeneralAttribute.ATTRIBUTE_ENCLOSING_METHOD);
+                    if (attr != null && attr.getMethodName() != null) {
+                      rec.type = ClassNode.CLASS_LOCAL;
+                    }
+                    else {
+                      rec.type = ClassNode.CLASS_MEMBER;
+                    }
+                  }
+                }
+              }
+              else { // This should never happen as inner_class and outer_class are NOT optional, make assumptions
+                rec.type = ClassNode.CLASS_MEMBER;
+              }
+
               // enclosing class
               String enclClassName = entry.outerNameIdx != 0 ? entry.enclosingName : cl.qualifiedName;
               if (enclClassName == null || innerName.equals(enclClassName)) {
diff --git a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
index b929d0d142711abdcd3f67cb429c91b7260d6e2b..ba039e6c83007aca9bce0a33229b28c7b82dc398 100644
--- a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
@@ -13,6 +13,9 @@ import org.jetbrains.java.decompiler.modules.decompiler.stats.Statements;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.StructClass;
 import org.jetbrains.java.decompiler.struct.StructField;
+import org.jetbrains.java.decompiler.struct.StructMethod;
+import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 import java.util.ArrayList;
@@ -90,8 +93,52 @@ public class InitializerProcessor {
         Exprent exprent = firstData.getExprents().get(0);
         if (exprent.type == Exprent.EXPRENT_INVOCATION) {
           InvocationExprent invExpr = (InvocationExprent)exprent;
-          if (Statements.isInvocationInitConstructor(invExpr, method, wrapper, false) && invExpr.getLstParameters().isEmpty()) {
-            firstData.getExprents().remove(0);
+          if (Statements.isInvocationInitConstructor(invExpr, method, wrapper, false)) {
+            List<VarVersionPair> mask = ExprUtil.getSyntheticParametersMask(invExpr.getClassname(), invExpr.getStringDescriptor(), invExpr.getLstParameters().size());
+            boolean hideSuper = true;
+
+            //searching for non-synthetic params
+            for (int i = 0; i < invExpr.getDescriptor().params.length; ++i) {
+              if (mask != null && mask.get(i) != null) {
+                continue;
+              }
+              VarType type = invExpr.getDescriptor().params[i];
+              if (type.type == CodeConstants.TYPE_OBJECT) {
+                ClassNode node = DecompilerContext.getClassProcessor().getMapRootClasses().get(type.value);
+                if (node != null && (node.type == ClassNode.CLASS_ANONYMOUS || (node.access & CodeConstants.ACC_SYNTHETIC) != 0)) {
+                  break; // Should be last
+                }
+              }
+              hideSuper = false; // found non-synthetic param so we keep the call
+              break;
+            }
+
+            if (hideSuper) {
+              firstData.getExprents().remove(0);
+            }
+          }
+        }
+      }
+    }
+  }
+
+  public static void hideInitalizers(ClassWrapper wrapper) {
+    // hide initializers with anon class arguments
+    for (MethodWrapper method : wrapper.getMethods()) {
+      StructMethod mt = method.methodStruct;
+      String name = mt.getName();
+      String desc = mt.getDescriptor();
+
+      if (mt.isSynthetic() && CodeConstants.INIT_NAME.equals(name)) {
+        MethodDescriptor md = MethodDescriptor.parseDescriptor(desc);
+        if (md.params.length > 0) {
+          VarType type = md.params[md.params.length - 1];
+          if (type.type == CodeConstants.TYPE_OBJECT) {
+            ClassNode node = DecompilerContext.getClassProcessor().getMapRootClasses().get(type.value);
+            if (node != null && (node.type == ClassNode.CLASS_ANONYMOUS) || (node.access & CodeConstants.ACC_SYNTHETIC) != 0) {
+              //TODO: Verify that the body is JUST a this([args]) call?
+              wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(name, desc));
+            }
           }
         }
       }
@@ -248,4 +295,4 @@ public class InitializerProcessor {
 
     return true;
   }
-}
\ No newline at end of file
+}
