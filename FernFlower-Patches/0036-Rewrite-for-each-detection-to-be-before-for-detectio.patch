From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Sun, 4 Oct 2015 04:23:24 -0700
Subject: [PATCH] Rewrite for-each detection to be before for detection.


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index 62d52975708c5a8126bdc73824fe575b14dea108..2e1668de1af3414bfbed0bf72461688246303931 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -28,9 +28,13 @@ import org.jetbrains.java.decompiler.modules.decompiler.*;
 import org.jetbrains.java.decompiler.modules.decompiler.deobfuscator.ExceptionDeobfuscator;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.FunctionExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.DoStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.DummyExitStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor;
@@ -42,6 +46,10 @@ import java.util.BitSet;
 
 public class MethodProcessorRunnable implements Runnable {
 
+  private static RootStatement currentRoot;
+
+  private static VarProcessor vp;
+
   public final Object lock = new Object();
 
   private final StructMethod method;
@@ -126,7 +134,8 @@ public class MethodProcessorRunnable implements Runnable {
     }
 
     RootStatement root = DomHelper.parseGraph(graph, mt);
-
+    MethodProcessorRunnable.currentRoot = root;
+    MethodProcessorRunnable.vp = varProc;
     FinallyProcessor fProc = new FinallyProcessor(varProc);
     while (fProc.iterateGraph(mt, root, graph)) {
       root = DomHelper.parseGraph(graph, mt);
@@ -232,6 +241,9 @@ public class MethodProcessorRunnable implements Runnable {
     return finished;
   }
 
+  public static void printMethod(String desc) {
+      printMethod(currentRoot, desc, vp);
+  }
   public static void printMethod(Statement root, String name, VarProcessor varProc) {
     System.out.println(name + " {");
     if (root == null || root.getSequentialObjects() == null) {
@@ -280,7 +292,13 @@ public class MethodProcessorRunnable implements Runnable {
     int start = values.nextSetBit(0);
     int end = values.length()-1;
 
-    System.out.println(indent + "{" + statement.type + "}:" + statement.id + " (" + start + ", " + end + ") " + statement.getClass().getSimpleName());
+    System.out.print(indent + "{" + statement.type + "}:" + statement.id + " (" + start + ", " + end + ") " + statement.getClass().getSimpleName());
+    if (statement.type == Statement.TYPE_DO) {
+        System.out.print(" t:"+((DoStatement)statement).getLooptype());
+    } else if (statement.type == Statement.TYPE_BASICBLOCK) {
+        System.out.print(" i:"+((BasicBlockStatement)statement).getBlock().toStringOldIndices().replaceAll("\n", ";"));
+    }
+    System.out.println();
     for (StatEdge edge : statement.getAllSuccessorEdges())
       System.out.println(indent + " Dest: " + edge.getDestination());
 
@@ -323,6 +341,8 @@ public class MethodProcessorRunnable implements Runnable {
         sb.append("{").append(printExprent(" ",assignmentExprent.getLeft(),varProc)).append(" =").append(printExprent(" ",assignmentExprent.getRight(),varProc)).append("}");
       } else if (exp instanceof IfExprent) {
         sb.append(" ").append(exp.toJava(0, new BytecodeMappingTracer()));
+      } else if (exp instanceof FunctionExprent) {
+        sb.append(" ").append(exp.toJava(0, new BytecodeMappingTracer()));
       }
       return sb.toString();
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index 0e7f1ab7fe6fe4ca716cdcc0fc182dcfa59c3b7b..3025737508432bebbbd645908852f93d44dd384f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -20,6 +20,7 @@ import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.FunctionExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
@@ -67,10 +68,9 @@ public class MergeHelper {
 
         // identify a while loop
         if (matchWhile(stat)) {
-          // identify a for loop - subtype of while
-          matchFor(stat);
-          // identify for each loop,
-          matchForEach(stat);
+          if (!matchForEach(stat)) {
+            matchFor(stat);
+          }
         }
         else {
           // identify a do{}while loop
@@ -79,8 +79,9 @@ public class MergeHelper {
 
         break;
       case DoStatement.LOOP_WHILE:
-        matchFor(stat);
-        matchForEach(stat);
+        if (!matchForEach(stat)) {
+          matchFor(stat);
+        }
     }
 
     return (stat.getLooptype() != oldloop);
@@ -357,6 +358,8 @@ public class MergeHelper {
         }
         else {
           preData = current.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).get(0);
+          // we're not a basic block, so we can't dive inside for exprents
+          if (preData.type != Statement.TYPE_BASICBLOCK) break;
           preData = getLastDirectData(preData);
           if (preData != null && !preData.getExprents().isEmpty()) {
             initDoExprent = preData.getExprents().get(preData.getExprents().size() - 1);
@@ -402,8 +405,10 @@ public class MergeHelper {
   }
 
   private static boolean matchForEach(DoStatement stat) {
-    AssignmentExprent firstDoExprent = null, initDoExprent = null, initCopyExprent = null;
-    Statement firstData, preData = null;
+    AssignmentExprent firstDoExprent = null;
+    AssignmentExprent[] initExprents = new AssignmentExprent[3];
+    Statement firstData = null, preData = null, lastData = null;
+    Exprent lastExprent = null;
 
     // search for an initializing exprent
     Statement current = stat;
@@ -421,14 +426,13 @@ public class MergeHelper {
           preData = current.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).get(0);
           preData = getLastDirectData(preData);
           if (preData != null && !preData.getExprents().isEmpty()) {
-            Exprent exprent = preData.getExprents().get(preData.getExprents().size() - 1);
-            if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
-              initDoExprent = (AssignmentExprent)exprent;
-              if (preData.getExprents().size() >= 2) {
-                exprent = preData.getExprents().get(preData.getExprents().size() - 2);
-                if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
-                  initCopyExprent = (AssignmentExprent)exprent;
-                }
+            int size = preData.getExprents().size();
+            for (int x = 0; x < initExprents.length; x++) {
+              if (size > x) {
+                 Exprent exprent = preData.getExprents().get(size - 1 - x);
+                 if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+                   initExprents[x] = (AssignmentExprent)exprent;
+                 }
               }
             }
           }
@@ -444,10 +448,14 @@ public class MergeHelper {
     if (firstData != null && firstData.getExprents().get(0).type == Exprent.EXPRENT_ASSIGNMENT) {
       firstDoExprent = (AssignmentExprent)firstData.getExprents().get(0);
     }
+    lastData = getLastDirectData(stat.getFirst());
+    if (lastData != null && !lastData.getExprents().isEmpty()) {
+      lastExprent = lastData.getExprents().get(lastData.getExprents().size() - 1);
+    }
 
-    if (stat.getLooptype() == DoStatement.LOOP_WHILE && initDoExprent != null && firstDoExprent != null) {
-      if (initDoExprent.type == Exprent.EXPRENT_ASSIGNMENT &&
-          isIteratorCall(((AssignmentExprent)initDoExprent).getRight())) {
+    if (stat.getLooptype() == DoStatement.LOOP_WHILE && initExprents[0] != null && firstDoExprent != null) {
+      if (initExprents[0].type == Exprent.EXPRENT_ASSIGNMENT &&
+          isIteratorCall(((AssignmentExprent)initExprents[0]).getRight())) {
 
         if (!isHasNextCall(drillNots(stat.getConditionExprent())) ||
             firstDoExprent.type != Exprent.EXPRENT_ASSIGNMENT) {
@@ -463,13 +471,13 @@ public class MergeHelper {
         InvocationExprent hnext = (InvocationExprent)getUncast(drillNots(stat.getConditionExprent()));
         if (next.getInstance().type != Exprent.EXPRENT_VAR ||
             hnext.getInstance().type != Exprent.EXPRENT_VAR ||
-            ExprentUtil.isVarReferenced((VarExprent)initDoExprent.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+            ExprentUtil.isVarReferenced((VarExprent)initExprents[0].getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
           return false;
         }
 
-        InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initDoExprent).getRight();
+        InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initExprents[0]).getRight();
 
-        holder.getInstance().addBytecodeOffsets(initDoExprent.bytecode);
+        holder.getInstance().addBytecodeOffsets(initExprents[0].bytecode);
         ass.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
         if (stat.getIncExprent() != null) {
           holder.getInstance().addBytecodeOffsets(stat.getIncExprent().bytecode);
@@ -481,88 +489,45 @@ public class MergeHelper {
         stat.setLooptype(DoStatement.LOOP_FOREACH);
         stat.setInitExprent(ass.getLeft());
         stat.setIncExprent(holder.getInstance());
-        preData.getExprents().remove(initDoExprent);
+        preData.getExprents().remove(initExprents[0]);
         firstData.getExprents().remove(firstDoExprent);
+
+        if (initExprents[1] != null && initExprents[1].getLeft().type == Exprent.EXPRENT_VAR &&
+            holder.getInstance().type == Exprent.EXPRENT_VAR) {
+          VarExprent copy = (VarExprent)initExprents[1].getLeft();
+          VarExprent inc = (VarExprent)holder.getInstance();
+          if (copy.getIndex() == inc.getIndex() && copy.getVersion() == inc.getVersion() && !ExprentUtil.isVarReferenced(inc, stat.getTopParent(), copy)) {
+            preData.getExprents().remove(initExprents[1]);
+            initExprents[1].getRight().addBytecodeOffsets(initExprents[1].bytecode);
+            initExprents[1].getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
+            stat.setIncExprent(initExprents[1].getRight());
+          }
+        }
+        return true;
       }
-    }
-    else if (stat.getLooptype() == DoStatement.LOOP_FOR) {
-      if (isType(stat.getInitExprent(), Exprent.EXPRENT_ASSIGNMENT) &&
-          isIteratorCall(((AssignmentExprent)stat.getInitExprent()).getRight()) &&
-          isType(stat.getConditionExprent(), Exprent.EXPRENT_FUNCTION)) {
-
-        Exprent exp = drillNots(stat.getConditionExprent());
-        if (!isHasNextCall(exp) ||
-            !isType(stat.getIncExprent(), Exprent.EXPRENT_ASSIGNMENT)) {
+      else if (initExprents[0] != null && initExprents[1] != null && firstDoExprent != null) {
+        if (firstDoExprent.getRight().type != Exprent.EXPRENT_ARRAY || firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR) {
           return false;
         }
 
-        AssignmentExprent itr = (AssignmentExprent)stat.getInitExprent();
-        InvocationExprent hnext = (InvocationExprent)exp;
-        if (itr.getLeft().type != Exprent.EXPRENT_VAR || hnext.getInstance().type != Exprent.EXPRENT_VAR) {
+        if (lastExprent == null || lastExprent.type != Exprent.EXPRENT_FUNCTION) {
           return false;
         }
 
-        AssignmentExprent ass = (AssignmentExprent)stat.getIncExprent();
-        if (!isNextCall(ass.getRight()) || ass.getLeft().type != Exprent.EXPRENT_VAR) {
-
-          if (firstDoExprent == null || !isNextCall(firstDoExprent.getRight()) ||
-              firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR) {
-            return false;
-          }
-
-          InvocationExprent next = (InvocationExprent)getUncast(firstDoExprent.getRight());
-          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
-            return false;
-          }
-
-          //Move the inc exprent back to the end of the body and remove the .next call
-          Statement last = getLastDirectData(stat.getFirst());
-          InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
-
-          firstData.getExprents().remove(firstDoExprent);
-          last.getExprents().add(stat.getIncExprent());
-
-          firstDoExprent.getLeft().addBytecodeOffsets(stat.getInitExprent().bytecode);
-          firstDoExprent.getLeft().addBytecodeOffsets(stat.getIncExprent().bytecode);
-          firstDoExprent.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-
-          stat.setLooptype(DoStatement.LOOP_FOREACH);
-          stat.setInitExprent(firstDoExprent.getLeft());
-          stat.setIncExprent(holder.getInstance());
-        }
-        else {
-          InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
-          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
-            return false;
-          }
-
-          InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
-
-          holder.getInstance().addBytecodeOffsets(stat.getInitExprent().bytecode);
-          ass.getLeft().addBytecodeOffsets(stat.getIncExprent().bytecode);
-
-          stat.setLooptype(DoStatement.LOOP_FOREACH);
-          stat.setInitExprent(ass.getLeft());
-          stat.setIncExprent(holder.getInstance());
-        }
-      }
-      else if (initDoExprent != null && initDoExprent.getRight().type == Exprent.EXPRENT_FUNCTION) {
-        if (firstDoExprent == null ||
-            firstDoExprent.getRight().type != Exprent.EXPRENT_ARRAY ||
-            firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR ||
-            !isType(stat.getIncExprent(), Exprent.EXPRENT_FUNCTION) ||
-            !isType(stat.getInitExprent(), Exprent.EXPRENT_ASSIGNMENT)) {
+        if (initExprents[0].getRight().type != Exprent.EXPRENT_CONST ||
+            initExprents[1].getRight().type != Exprent.EXPRENT_FUNCTION ||
+            stat.getConditionExprent().type != Exprent.EXPRENT_FUNCTION) {
           return false;
         }
 
-        FunctionExprent funcRight = (FunctionExprent)initDoExprent.getRight();
-        FunctionExprent funcInc = (FunctionExprent)stat.getIncExprent();
-        ArrayExprent arr = (ArrayExprent)firstDoExprent.getRight();
+        //FunctionExprent funcCond  = (FunctionExprent)drillNots(stat.getConditionExprent()); //TODO: Verify this is counter < copy.length
+        FunctionExprent funcRight = (FunctionExprent)initExprents[1].getRight();
+        FunctionExprent funcInc   = (FunctionExprent)lastExprent;
+        ArrayExprent    arr       = (ArrayExprent)firstDoExprent.getRight();
+        int incType = funcInc.getFuncType();
 
         if (funcRight.getFuncType() != FunctionExprent.FUNCTION_ARRAY_LENGTH ||
-            (funcInc.getFuncType() != FunctionExprent.FUNCTION_PPI && funcInc.getFuncType() != FunctionExprent.FUNCTION_IPP) ||
+            (incType != FunctionExprent.FUNCTION_PPI && incType != FunctionExprent.FUNCTION_IPP) ||
             arr.getIndex().type != Exprent.EXPRENT_VAR ||
             arr.getArray().type != Exprent.EXPRENT_VAR) {
             return false;
@@ -576,34 +541,41 @@ public class MergeHelper {
             counter.getVersion() != index.getVersion()) {
           return false;
         }
+        if (ExprentUtil.isVarReferenced(counter, stat.getFirst(), index)) {
+          return false;
+        }
 
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(initDoExprent.bytecode);
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(stat.getIncExprent().bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[0].bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[1].bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(lastExprent.bytecode);
         firstDoExprent.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-        firstDoExprent.getLeft().addBytecodeOffsets(stat.getInitExprent().bytecode);
+        firstDoExprent.getLeft().addBytecodeOffsets(initExprents[0].bytecode);
 
         stat.setLooptype(DoStatement.LOOP_FOREACH);
         stat.setInitExprent(firstDoExprent.getLeft());
         stat.setIncExprent(funcRight.getLstOperands().get(0));
-        preData.getExprents().remove(initDoExprent);
+        preData.getExprents().remove(initExprents[0]);
+        preData.getExprents().remove(initExprents[1]);
         firstData.getExprents().remove(firstDoExprent);
+        lastData.getExprents().remove(lastExprent);
 
-
-        if (initCopyExprent != null && initCopyExprent.getLeft().type == Exprent.EXPRENT_VAR) {
-          VarExprent copy = (VarExprent)initCopyExprent.getLeft();
+        if (initExprents[2] != null && initExprents[2].getLeft().type == Exprent.EXPRENT_VAR) {
+          VarExprent copy = (VarExprent)initExprents[2].getLeft();
           if (copy.getIndex() == array.getIndex() && copy.getVersion() == array.getVersion()) {
-            preData.getExprents().remove(initCopyExprent);
-            initCopyExprent.getRight().addBytecodeOffsets(initCopyExprent.bytecode);
-            initCopyExprent.getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
-            stat.setIncExprent(initCopyExprent.getRight());
+            preData.getExprents().remove(initExprents[2]);
+            initExprents[2].getRight().addBytecodeOffsets(initExprents[2].bytecode);
+            initExprents[2].getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
+            stat.setIncExprent(initExprents[2].getRight());
           }
         }
+
+        return true;
       }
     }
 
     //cleanEmptyStatements(stat, firstData); //TODO: Look into this and see what it does...
 
-    return true;
+    return false;
   }
 
   private static boolean isType(Exprent exp, int type) { //This is just a helper macro, Wish java had real macros.
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index f71ed84bc4ad195a97b4c535f21b55a9568cac62..686001d878d4204c439e6a4b6d140c155eadbb97 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -837,6 +837,14 @@ public class Statement implements IMatchable {
     this.parent = parent;
   }
 
+  public Statement getTopParent() {
+    Statement ret = this;
+    while (ret.getParent() != null) {
+      ret = ret.getParent();
+    }
+    return ret;
+  }
+
   public HashSet<StatEdge> getLabelEdges() {  // FIXME: why HashSet?
     return labelEdges;
   }
diff --git a/test/org/jetbrains/java/decompiler/LVTTest.java b/test/org/jetbrains/java/decompiler/LVTTest.java
index d4771bb0b063154fd4e38ac3d68ed3c0b27c8938..fea37bceb36c964966c7772c8911f9aa63ae119e 100644
--- a/test/org/jetbrains/java/decompiler/LVTTest.java
+++ b/test/org/jetbrains/java/decompiler/LVTTest.java
@@ -38,11 +38,12 @@ public class LVTTest extends SingleClassesTestBase {
 //  @Test public void testMatch1() { doTest("pkg/TestPPMM"); }
 //  @Test public void testMatchLM() { doTest("pkg/TestLexManosLVT"); }
 //  @Test public void testMatch1() { doTest("pkg/TestLVT"); }
+//  @Test public void testMatch1() { doTest("pkg/TestLoopMerging"); }
 //  @Test public void testMatch2() { doTest("pkg/TestLVTScoping"); }
 //  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
 //  @Test public void testMCGuiCmdBlock() { doTest("net/minecraft/client/gui/GuiCommandBlock"); }
 
-  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
+//  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
 
 //  @Test public void testMCGuiCmdBlock() { doTest("net/minecraft/client/gui/GuiCommandBlock"); }
 
@@ -51,4 +52,5 @@ public class LVTTest extends SingleClassesTestBase {
 //  @Test public void testMCAbstractTexture() { doTest("net/minecraft/client/multiplayer/ServerAddress"); }
 //  @Test public void testMCAbstractResourcePack() { doTest("net/minecraft/client/resources/AbstractResourcePack"); }
 //  @Test public void testMCGuiShareToLan() { doTest("net/minecraft/client/gui/GuiShareToLan"); }
+//  @Test public void testMCContainerPlayer() { doTest("net/minecraft/inventory/ContainerPlayer"); }
 }
diff --git a/test/org/jetbrains/java/decompiler/LoopMergingTests.java b/test/org/jetbrains/java/decompiler/LoopMergingTests.java
new file mode 100644
index 0000000000000000000000000000000000000000..ddc15d14e9efaca03115795dbce9266d361b565e
--- /dev/null
+++ b/test/org/jetbrains/java/decompiler/LoopMergingTests.java
@@ -0,0 +1,30 @@
+package org.jetbrains.java.decompiler;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.junit.Test;
+
+public class LoopMergingTests extends SingleClassesTestBase {
+    @SuppressWarnings("serial")
+    @Override
+    protected Map<String, Object> getDecompilerOptions() {
+      return new HashMap<String, Object>() {{
+        put(IFernflowerPreferences.USE_DEBUG_LINE_NUMBERS, "1");
+      }};
+    }
+
+    @Override
+      public void setUp() throws IOException {
+          super.setUp();
+          fixture.cleanup = false;
+      }
+
+    @Test
+    public void testLoopMerging() {
+        doTest("pkg/TestLoopMerging");
+    }
+
+}
diff --git a/testData/classes/pkg/TestLoopMerging.class b/testData/classes/pkg/TestLoopMerging.class
new file mode 100644
index 0000000000000000000000000000000000000000..453837353833482c6abb1718c2900e2149662c1f
GIT binary patch
literal 1524
zcmbu7OHUI~7>3`|nRZGUZY?brLGHJrR1u8<g%}J8Nl_6(L{`%>;BaY48BAQbz!3g{
zZoI`6CMG5l&_oF#ap(VV!PXyOea|pZi!3l?a?Y7^``-6F-}mG9*IfYJ=+@v72rbRe
z#>UNMJDyH2jhLBPD>bV@6)2rE9viU*BQ+blo0v0`wtz6$hS(AUz8hA`vik*;_Kpbw
zbuc|`2B1LK;YWc$N!&`AcUBe?W@g+-ESLhpcsgk;Oc)tU&fP`Teq=2RgySdJ=wn!$
z&K!-Q0tl4r(BM-Cw*Wb<(Bb9udk?73PM~PaHj?ur#*!P}EAMv~pcZu+&gVU9?8&li
zF6yX90|nA6lnKY3H(Tl0y^NKz$Lx%0EcOM^gcc3WWOc%}j#jh@XiM_OLW-8#hdL(I
zTlLb8BY#D}WAKfhsbQj<VH?)a>2CH21jf=UnWQ;nNl4|#Qqd(P(ZE;=lje~z;o~0_
zozcrb@@604YK)`c=#73s;V0)p5qqDrsGykt`oRH|pp-L#G6dPn%TFmGFAr>>I6Aq7
zP%u2RjZkz85w_4wu=2&r?0#-Dk+)g({8e^ep8d!W3Z!hY<5?qoKYHmgCqLlISM!t)
zsuCy*Q2N}FmA9^y(P-f|A{(gKM2(F78I96eM5nei6$!S})6Y|$$}@MK03{7Stp+)^
z(oz?hT;~|)O3v(PzFB{$EJU*%hh{~DW@Sp&m7PGmbF$aFdrejP$*Ia)+jVozBi0mA
z8&=<Cf92TyH`vp0$a`Vb$!Y{DDiB5`zX}#oHTns93N=VFF^e2mQRlq2-bvTG`&t#x
z5Je|n8s_>1Tx9XdbhX2uB_^K+p%IvHdIYir>2cS<bVekj*byV!WwdvU(fdP2XGSxc
zE0HtA`nR|~9A@u9esOoRW`IW0Z6cv&(rv+2R?&U5;UOtavqDx$@D1miJoAkNWlbGW
r-aDeab42;|UzBe{KY?<V8Fj&nL-0hclXqp7evT!D8Ms764=(=!{dE@Z

literal 0
HcmV?d00001

diff --git a/testData/results/TestLoopMerging.dec b/testData/results/TestLoopMerging.dec
new file mode 100644
index 0000000000000000000000000000000000000000..9f91437231e714f985a1f44aa1a7e3df82cb1e5a
--- /dev/null
+++ b/testData/results/TestLoopMerging.dec
@@ -0,0 +1,49 @@
+package pkg;
+
+public class TestLoopMerging {
+   public float a;
+   public float b;
+   public float test() {      while(this.a - this.b < -180.0F) {
+         this.b -= 360.0F;      }      while(this.a - this.b >= 180.0F) {
+         this.b += 360.0F;      }
+      return this.a;   }
+
+   public float test2() {
+      for(this.a = 0.0F; this.a < 10.0F; ++this.a) {
+         System.out.println(this.a);      }
+
+      for(this.a = 0.0F; this.a < 10.0F; ++this.a) {
+         System.out.println(this.a);      }
+
+      return this.a;
+   }
+
+   public float test3() {
+      int[] as = new int[0];
+      for(int f : as) {
+         ++f;      }
+
+      while(this.a - this.b < -180.0F) {         this.b -= 360.0F;      }
+      while(this.a - this.b >= 180.0F) {         this.b += 360.0F;
+      }
+      for(this.a = 0.0F; this.a < 10.0F; ++this.a) {
+         System.out.println(this.a);
+      }
+      return this.a;   }
+   public float test4() {
+      int[] as = new int[0];
+      for(int f : as) {
+         ++f;         while(this.a - this.b < -180.0F) {
+            this.b -= 360.0F;         }         while(this.a - this.b >= 180.0F) {
+            this.b += 360.0F;         }
+         for(this.a = 0.0F; this.a < 10.0F; ++this.a) {
+            System.out.println(this.a);            while(this.a - this.b < -180.0F) {
+               this.b -= 360.0F;            }            while(this.a - this.b >= 180.0F) {
+               this.b += 360.0F;
+            }
+         }
+      }
+
+      return this.a;
+   }
+}
diff --git a/testData/src/pkg/TestLoopMerging.java b/testData/src/pkg/TestLoopMerging.java
new file mode 100644
index 0000000000000000000000000000000000000000..c257b10446cf1cc23c6c9408e8f5660d30906b29
--- /dev/null
+++ b/testData/src/pkg/TestLoopMerging.java
@@ -0,0 +1,47 @@
+package pkg;
+
+public class TestLoopMerging {
+    public float a;
+    public float b;
+    public float test() {
+      while(a - b < -180) b -= 360;
+      while(a - b >= 180) b += 360;
+      return a;
+    }
+    public float test2() {
+        for (a = 0; a < 10; a++) {
+            System.out.println(a);
+        }
+        for (a = 0; a < 10; a++) {
+            System.out.println(a);
+        }
+        return a;
+      }
+
+    public float test3() {
+        int[] as = new int[0];
+        for (int f: as) {
+            f++;
+        }
+        while(this.a - this.b < -180) this.b -= 360;
+        while(this.a - this.b >= 180) this.b += 360;
+        for (a = 0; a < 10; a++) {
+            System.out.println(a);
+        }
+        return this.a;
+    }
+    public float test4() {
+        int[] as = new int[0];
+        for (int f: as) {
+            f++;
+            while(this.a - this.b < -180) this.b -= 360;
+            while(this.a - this.b >= 180) this.b += 360;
+            for (a = 0; a < 10; a++) {
+                System.out.println(a);
+                while(this.a - this.b < -180) this.b -= 360;
+                while(this.a - this.b >= 180) this.b += 360;
+            }
+        }
+        return this.a;
+    }
+}
