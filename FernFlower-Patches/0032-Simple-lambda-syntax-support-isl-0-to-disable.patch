From 2c308e9733d2a666bdfa13e3ab7b53f9f6ab8eb0 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Fri, 20 Dec 2019 08:35:30 -0700
Subject: [PATCH] Simple lambda syntax support, --isl=0 to disable.


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 69b1dc4..58aaa9d 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -11,6 +11,7 @@ import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.*;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.modules.renamer.PoolInterceptor;
@@ -80,7 +81,15 @@ public class ClassWriter {
       if (node.lambdaInformation.is_method_reference) {
         if (!node.lambdaInformation.is_content_method_static && method_object != null) {
           // reference to a virtual method
-          buffer.append(method_object.toJava(indent, tracer));
+          method_object.getInferredExprType(new VarType(CodeConstants.TYPE_OBJECT, 0, node.lambdaInformation.content_class_name));
+          String instance = method_object.toJava(indent, tracer).toString();
+          // If the instance is casted, then we need to wrap it
+          if (method_object.type == Exprent.EXPRENT_FUNCTION && ((FunctionExprent)method_object).getFuncType() == FunctionExprent.FUNCTION_CAST && ((FunctionExprent)method_object).doesCast()) {
+            buffer.append('(').append(instance).append(')');
+          }
+          else {
+            buffer.append(instance);
+          }
         }
         else {
           // reference to a static method
@@ -97,6 +106,8 @@ public class ClassWriter {
         MethodDescriptor md_content = MethodDescriptor.parseDescriptor(node.lambdaInformation.content_method_descriptor);
         MethodDescriptor md_lambda = MethodDescriptor.parseDescriptor(node.lambdaInformation.method_descriptor);
 
+        boolean simpleLambda = false;
+
         if (!lambdaToAnonymous) {
           buffer.append('(');
 
@@ -120,16 +131,60 @@ public class ClassWriter {
           }
 
           buffer.append(") ->");
+
+          RootStatement root = wrapper.getMethodWrapper(mt.getName(), mt.getDescriptor()).root;
+          if (DecompilerContext.getOption(IFernflowerPreferences.INLINE_SIMPLE_LAMBDAS) && !methodWrapper.decompiledWithErrors && root != null) {
+            Statement firstStat = root.getFirst();
+            if (firstStat.type == Statement.TYPE_BASICBLOCK && firstStat.getExprents() != null && firstStat.getExprents().size() == 1) {
+              Exprent firstExpr = firstStat.getExprents().get(0);
+              boolean isVarDefinition = firstExpr.type == Exprent.EXPRENT_ASSIGNMENT &&
+                ((AssignmentExprent)firstExpr).getLeft().type == Exprent.EXPRENT_VAR &&
+                ((VarExprent)((AssignmentExprent)firstExpr).getLeft()).isDefinition();
+
+              boolean isThrow = firstExpr.type == Exprent.EXPRENT_EXIT &&
+                ((ExitExprent)firstExpr).getExitType() == ExitExprent.EXIT_THROW;
+
+              if (!isVarDefinition && !isThrow) {
+                simpleLambda = true;
+                MethodWrapper outerWrapper = (MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
+                DecompilerContext.setProperty(DecompilerContext.CURRENT_METHOD_WRAPPER, methodWrapper);
+                try {
+                  TextBuffer codeBuffer = firstExpr.toJava(indent + 1, tracer);
+
+                  if (firstExpr.type == Exprent.EXPRENT_EXIT)
+                    codeBuffer.setStart(6); // skip return
+                  else
+                    codeBuffer.prepend(" ");
+
+                  buffer.append(codeBuffer);
+                }
+                catch (Throwable ex) {
+                  DecompilerContext.getLogger().writeMessage("Method " + mt.getName() + " " + mt.getDescriptor() + " couldn't be written.",
+                    IFernflowerLogger.Severity.WARN,
+                    ex);
+                  methodWrapper.decompiledWithErrors = true;
+                  buffer.append(" // $FF: Couldn't be decompiled");
+                }
+                finally {
+                  tracer.addMapping(root.getDummyExit().bytecode);
+                  addTracer(cl, mt, tracer);
+                  DecompilerContext.setProperty(DecompilerContext.CURRENT_METHOD_WRAPPER, outerWrapper);
+                }
+              }
+            }
+          }
         }
 
-        buffer.append(" {").appendLineSeparator();
-        tracer.incrementCurrentSourceLine();
+        if (!simpleLambda) {
+          buffer.append(" {").appendLineSeparator();
+          tracer.incrementCurrentSourceLine();
 
-        methodLambdaToJava(node, wrapper, mt, buffer, indent + 1, !lambdaToAnonymous, tracer);
+          methodLambdaToJava(node, wrapper, mt, buffer, indent + 1, !lambdaToAnonymous, tracer);
 
-        buffer.appendIndent(indent).append("}");
+          buffer.appendIndent(indent).append("}");
 
-        addTracer(cl, mt, tracer);
+          addTracer(cl, mt, tracer);
+        }
       }
     }
     finally {
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 01b9cef..41f7389 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -37,6 +37,7 @@ public interface IFernflowerPreferences {
 
   String INCLUDE_ENTIRE_CLASSPATH = "iec";
   String EXPLICIT_GENERIC_ARGUMENTS = "ega";
+  String INLINE_SIMPLE_LAMBDAS = "isl";
 
   String LOG_LEVEL = "log";
   String MAX_PROCESSING_METHOD = "mpm";
@@ -90,6 +91,7 @@ public interface IFernflowerPreferences {
 
     defaults.put(INCLUDE_ENTIRE_CLASSPATH, "0");
     defaults.put(EXPLICIT_GENERIC_ARGUMENTS, "0");
+    defaults.put(INLINE_SIMPLE_LAMBDAS, "1");
 
     defaults.put(LOG_LEVEL, IFernflowerLogger.Severity.INFO.name());
     defaults.put(MAX_PROCESSING_METHOD, "0");
-- 
2.27.0

