From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SuperCoder79 <25208576+SuperCoder7979@users.noreply.github.com>
Date: Sun, 21 Nov 2021 17:33:09 -0500
Subject: [PATCH] Reduce allocations in getAllExprents


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
index 4beaf1ee874de373d956177ece541f0ecce64dc4..7bd39cb6416fa4703bab38a04b3922d2823fe3e5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
@@ -26,6 +26,13 @@ public class AnnotationExprent extends Exprent {
     this.parValues = parValues;
   }
 
+  @Override
+  protected List<Exprent> getAllExprents(List<Exprent> list) {
+    list.addAll(this.parValues);
+
+    return list;
+  }
+
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     TextBuffer buffer = new TextBuffer();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
index e14e8821ea5e7642ff49b04eb4cf1e4d0aa32190..6fcc4845d6912512f52026c13a7b77d9437ce6f3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
@@ -64,8 +64,7 @@ public class ArrayExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(array);
     lst.add(index);
     return lst;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
index 097c10a32ed819368c48efa51866420c01584395..34d99a13692ca6a7cedc59b7d4d9de4ede6a0358 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
@@ -18,6 +18,12 @@ public class AssertExprent extends Exprent {
     this.parameters = parameters;
   }
 
+  @Override
+  protected List<Exprent> getAllExprents(List<Exprent> list) {
+    list.addAll(this.parameters);
+    return list;
+  }
+
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     TextBuffer buffer = new TextBuffer();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
index ed470ffbbf57c7aea4e82174a99c8d31a097bc32..3adb833472bca27bb0d2084a1ad09061d56012fe 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
@@ -74,8 +74,7 @@ public class AssignmentExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(left);
     lst.add(right);
     return lst;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index df602b646b7ab2b6f13c42617634f334f828cc0e..c9d1cab8dedad63498cd003ba6aece1308b2719b 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -199,8 +199,8 @@ public class ConstExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> list) {
+    return list;
   }
 
   @Override
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
index 9b9a0b4198688968201783fb804130a3312aa522..dcc98dfa3fe511a5028ed756717373f9e9e46b90 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
@@ -16,7 +16,6 @@ import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.List;
 import java.util.Objects;
@@ -59,8 +58,7 @@ public class ExitExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (value != null) {
       lst.add(value);
     }
@@ -157,7 +155,7 @@ public class ExitExprent extends Exprent {
     measureBytecode(values);
   }
 
-  
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index 0509360d7637650341acca72e72e49026dc535a7..1a21f128c31aff9338e3be8cf5d8c6036770a152 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -98,14 +98,25 @@ public abstract class Exprent implements IMatchable {
     return false;
   }
 
-  public List<Exprent> getAllExprents(boolean recursive) {
-    List<Exprent> lst = getAllExprents();
+  public final List<Exprent> getAllExprents(boolean recursive) {
+    List<Exprent> lst = new ArrayList<>();
+    getAllExprents(recursive, lst);
+
+    return lst;
+  }
+
+  private List<Exprent> getAllExprents(boolean recursive, List<Exprent> list) {
+    int start = list.size();
+    getAllExprents(list);
+    int end = list.size();
+
     if (recursive) {
-      for (int i = lst.size() - 1; i >= 0; i--) {
-        lst.addAll(lst.get(i).getAllExprents(true));
+      for (int i = end - 1; i >= start; i--) {
+        list.get(i).getAllExprents(true, list);
       }
     }
-    return lst;
+
+    return list;
   }
 
   public Set<VarVersionPair> getAllVariables() {
@@ -121,10 +132,17 @@ public abstract class Exprent implements IMatchable {
     return set;
   }
 
-  public List<Exprent> getAllExprents() {
-    throw new RuntimeException("not implemented");
+  public final List<Exprent> getAllExprents() {
+    List<Exprent> list = new ArrayList<>();
+    getAllExprents(list);
+
+    return list;
   }
 
+  // Get all the exprents contained within the current one
+  // Preconditions: this list must never be removed from! Only added to!
+  protected abstract List<Exprent> getAllExprents(List<Exprent> list);
+
   public Exprent copy() {
     throw new RuntimeException("not implemented");
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
index 34ee7377dfef29d73f4cd0e5bf53944befafbd7d..926a3d1bd1baa27879b29c7482e69acdcad042f4 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
@@ -21,7 +21,6 @@ import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.util.TextUtil;
 
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Collections;
 import java.util.HashMap;
@@ -115,8 +114,7 @@ public class FieldExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (instance != null) {
       lst.add(instance);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
index e74a3c65c126f3378a4551bc96dd82aff9dc4601..54a1becbeb480e2f021d6db8236fe8d36da745b3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
@@ -427,8 +427,9 @@ public class FunctionExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>(lstOperands);
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
+    lst.addAll(this.lstOperands);
+    return lst;
   }
 
   @Override
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
index 7c9ee0a57cd291ae20b466d70f57a8f11bf4abaa..9644863730e5cda55fa3b2556c90903c578d7408 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
@@ -8,7 +8,6 @@ import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.util.ListStack;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.List;
 import java.util.Objects;
@@ -95,8 +94,7 @@ public class IfExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(condition);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index 1a3bd9c6b051447ef2aca98b58ff70b3b89da52c..7f4127e65c89b2f63c94cc6a58a96ec9d2f701f0 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -523,8 +523,7 @@ public class InvocationExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (instance != null) {
       lst.add(instance);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
index cd465813bc3e9076d3bbafd1c7b10c9bed0a1407..29b2c217335ce379e779f80427287de5b33d61ba 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
@@ -6,7 +6,6 @@ package org.jetbrains.java.decompiler.modules.decompiler.exps;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.List;
 import java.util.Objects;
@@ -33,8 +32,7 @@ public class MonitorExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(value);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index 72205fbd81840cda91ca303d15758df4a2e79699..b962f9154d44bf276816bf109e6a236fec0184e1 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -270,9 +270,8 @@ public class NewExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
 
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (newType.getArrayDim() != 0) {
       lst.addAll(lstDims);
       lst.addAll(lstArrayElements);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
index 11000d30cbdc93e360cb1bc96b53987bc692e3bd..048e49d62e902485ac89643350d750e7eb57995c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
@@ -67,8 +67,7 @@ public class SwitchExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(value);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index 0dd8768a10a4edb5901d3112145df58c871b68c9..e79c4571e227ad532760bdbc4ecf52030b31bfb6 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -27,7 +27,6 @@ import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Collections;
 import java.util.List;
@@ -87,8 +86,8 @@ public class VarExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
+    return lst;
   }
 
   @Override
