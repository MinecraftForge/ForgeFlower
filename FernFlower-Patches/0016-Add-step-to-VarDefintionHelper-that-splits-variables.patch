From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Tue, 25 Aug 2015 12:05:24 -0700
Subject: [PATCH] Add step to VarDefintionHelper that splits variables out as
 best it can. For now ForEach loops are forced to seperate variables. Also
 attempt to attach LVT information EVERY VarExprent in the method not just in
 head.


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index 9542a8025136f7416c2c806f52d5c990613604bc..54a77e19ac62d4a198f4943a19af1887c3843ab1 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -243,7 +243,7 @@ public class MethodProcessorRunnable implements Runnable {
     System.out.println("}");
   }
 
-  private static void getOffset(Statement st, BitSet values) {
+  public static void getOffset(Statement st, BitSet values) {
     if (st instanceof DummyExitStatement && ((DummyExitStatement)st).bytecode != null)
       values.or(((DummyExitStatement)st).bytecode);
     if (st.getExprents() != null) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index db839fe5e35da590ce5ebae6cb4122f60e89219d..ca9c1ed566e423e9169e2b7f72bfec128010f68f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -17,7 +17,6 @@ package org.jetbrains.java.decompiler.modules.decompiler.exps;
 
 import java.util.ArrayList;
 import java.util.BitSet;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashSet;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
index d88480ef7133b0c27ff18518599127ecf3e54df6..abc0f670715204a5b8e1f6f168d136fa65292b8d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
@@ -227,7 +227,9 @@ public class FlattenStatementsHelper {
                 graph.nodes.putWithKey(nodeinit, nodeinit.id);
 
                 DirectNode nodecond = new DirectNode(DirectNode.NODE_CONDITION, stat, stat.id + "_cond");
-                nodecond.exprents = (stat.type == DoStatement.LOOP_FOREACH ? null : dostat.getConditionExprentList());
+                if (looptype != DoStatement.LOOP_FOREACH) {
+                  nodecond.exprents = dostat.getConditionExprentList();
+                }
                 graph.nodes.putWithKey(nodecond, nodecond.id);
 
                 DirectNode nodeinc = new DirectNode(DirectNode.NODE_INCREMENT, stat, stat.id + "_inc");
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index 270def3a9ba906e3cce7df1c8feed1b9d9fd6b51..cd56bacb1d0d337f3d33b0eb7b87779cefd3d347 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -1,11 +1,16 @@
 package org.jetbrains.java.decompiler.modules.decompiler.vars;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 
+import org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+
 public class LocalVariableTable {
   private Map<Integer, Set<LVTVariable>> startpoints;
   private ArrayList<LVTVariable> allLVT;
@@ -35,15 +40,20 @@ public class LocalVariableTable {
     mapLVT = null; // Invalidate the cache and rebuild it.
   }
 
-  public LVTVariable find(int index, List<Integer> offsets) {
-    for (Integer offset : offsets) {
-      Set<LVTVariable> lvs = startpoints.get(offset);
-      if (lvs == null || lvs.isEmpty())
-        continue;
+  public LVTVariable find(int index, Statement stat) {
+    BitSet values = new BitSet();
+    MethodProcessorRunnable.getOffset(stat, values);
+    int start = values.nextSetBit(0);
+    int end = values.length()-1;
+    //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
 
-      for (LVTVariable lv : lvs) {
-        if (lv.index == index)
-          return lv;
+    Map<Integer, List<LVTVariable>> map = getMapVarNames();
+    if (!map.containsKey(index)) {
+      return null;
+    }
+    for (LVTVariable lvt : map.get(index)) {
+      if (lvt.start >= start && lvt.end <= end) {
+        return lvt;
       }
     }
     return null;
@@ -75,6 +85,42 @@ public class LocalVariableTable {
   }
 
   public List<LVTVariable> getCandidates(int index) {
-    return mapLVT.get(index);
+    return getMapVarNames().get(index);
+  }
+
+  public List<LVTVariable> getVars(int index, int start, int end) {
+    if (!getMapVarNames().containsKey(index)) {
+      return null;
+    }
+
+    List<LVTVariable> ret = new ArrayList<LVTVariable>();
+    for (LVTVariable lvt : getMapVarNames().get(index)) {
+      if (lvt.start >= start && lvt.end <= end) {
+        ret.add(lvt);
+      }
+    }
+
+    return ret;
+  }
+
+  public Map<Integer, LVTVariable> getVars(Statement stat) {
+    BitSet values = new BitSet();
+    MethodProcessorRunnable.getOffset(stat, values);
+    int start = values.nextSetBit(0);
+    int end = values.length()-1;
+    //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
+
+    Map<Integer, LVTVariable> ret = new HashMap<Integer, LVTVariable>();
+    for (Entry<Integer, List<LVTVariable>> entry : getMapVarNames().entrySet()) {
+      for (LVTVariable lvt : entry.getValue()) {
+        if (lvt.start >= start && lvt.end <= end) {
+          if (ret.containsKey(entry.getKey())) {
+            System.out.println("DUPLICATE INDEX WHAT THE FUCK: " + entry.getKey());
+          }
+          ret.put(entry.getKey(), lvt);
+        }
+      }
+    }
+    return ret;
   }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 53201ede8047b09f76fd8ebfee3eeb9d2149327c..d24813f0d9962ed8b0d6efacd251c175721e33d0 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -17,7 +17,9 @@ package org.jetbrains.java.decompiler.modules.decompiler.vars;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.main.collectors.VarNamesCollector;
+import org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
@@ -43,6 +45,8 @@ public class VarDefinitionHelper {
 
   private final VarProcessor varproc;
 
+  private final CounterContainer counters = DecompilerContext.getCounterContainer();
+
   public VarDefinitionHelper(Statement root, StructMethod mt, VarProcessor varproc) {
 
     mapVarDefStatements = new HashMap<Integer, Statement>();
@@ -91,6 +95,8 @@ public class VarDefinitionHelper {
       vc.addName("this");
     }
 
+    splitVaribles(root, "");
+
     // catch variables are implicitly defined
     LinkedList<Statement> stack = new LinkedList<Statement>();
     stack.add(root);
@@ -120,7 +126,6 @@ public class VarDefinitionHelper {
     initStatement(root);
   }
 
-
   public void setVarDefinitions() {
 
     VarNamesCollector vc = DecompilerContext.getVarNamesCollector();
@@ -129,6 +134,8 @@ public class VarDefinitionHelper {
       Statement stat = en.getValue();
       Integer index = en.getKey();
 
+      setupLVTs(stat);
+
       if (implDefVars.contains(index)) {
         // already implicitly defined
         continue;
@@ -165,7 +172,6 @@ public class VarDefinitionHelper {
         }
       }
 
-
       Statement first = findFirstBlock(stat, index);
 
       List<Exprent> lst;
@@ -179,21 +185,11 @@ public class VarDefinitionHelper {
         lst = first.getExprents();
       }
 
-
       boolean defset = false;
 
       // search for the first assignement to var [index]
       int addindex = 0;
       for (Exprent expr : lst) {
-        LVTVariable lvt = varproc.findLVT(index, first.getBasichead().getBlock().getInstrOldOffsets());
-        if (lvt != null) {
-          for (Exprent exp : expr.getAllExprents(true)) {
-            if (exp.type == Exprent.EXPRENT_VAR && ((VarExprent)exp).getIndex() == index) {
-              ((VarExprent)exp).setLVT(lvt);
-              break;
-            }
-          }
-        }
 
         if (setDefinition(expr, index)) {
           defset = true;
@@ -218,6 +214,21 @@ public class VarDefinitionHelper {
         VarExprent var = new VarExprent(index.intValue(), varproc.getVarType(new VarVersionPair(index.intValue(), 0)), varproc);
         var.setDefinition(true);
 
+        if (varproc.getLVT() != null) {
+          BitSet values = new BitSet();
+          MethodProcessorRunnable.getOffset(stat, values);
+          int start = values.nextSetBit(0);
+          int end = values.length()-1;
+          List<LVTVariable> vars = varproc.getLVT().getVars(index, start, end);
+          if (vars != null) {
+            if (vars.size() == 1) {
+              var.setLVT(vars.get(0));
+            }
+            // ToDo: If this is >1 then we need to decrease the scope of these variables.
+            //if this is = 0 and we have lvts for this... then we need to expand the scope...
+          }
+        }
+
         lst.add(addindex, var);
       }
     }
@@ -372,4 +383,217 @@ public class VarDefinitionHelper {
     }
     return false;
   }
+
+  //We merge variables together earlier to make ++ and -- work, we need to now
+  // split them using the LVT data and full method structure into separate versions.
+  // this also allows us to re-index/version variables that were not done
+  // before such as exceptions.
+  // Return value of referenced variables
+  //  The boolean is 'isAssignment', true if first reference is assignment, false if just reference.
+  private Map<VarVersionPair, Boolean> splitVaribles(Statement stat, String indent) {
+    Map<VarVersionPair, Boolean> vars = new HashMap<VarVersionPair, Boolean>();
+
+    //BitSet values = new BitSet();
+    //MethodProcessorRunnable.getOffset(stat, values);
+    //int start = values.nextSetBit(0);
+    //int end = values.length()-1;
+    //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
+
+    if (stat.type == Statement.TYPE_DO) {
+      DoStatement dost = (DoStatement)stat;
+      if (dost.getLooptype() == DoStatement.LOOP_FOREACH) {
+        vars.put(new VarVersionPair((VarExprent)dost.getInitExprent()), true);
+        splitExprent(dost.getIncExprent(), vars, indent);
+      }
+      else if (dost.getLooptype() == DoStatement.LOOP_FOR) {
+        splitExprent(dost.getInitExprent(), vars, indent);
+        splitExprent(dost.getConditionExprent(), vars, indent);
+        splitExprent(dost.getIncExprent(), vars, indent);
+      }
+      else if (dost.getLooptype() == DoStatement.LOOP_WHILE) {
+        splitExprent(dost.getConditionExprent(), vars, indent);
+      }
+    }
+
+    if (stat.getExprents() == null) {
+      List<Statement> stats = stat.getStats();
+      List<Map<VarVersionPair, Boolean>> stat_vars = new ArrayList<Map<VarVersionPair, Boolean>>(stats.size());
+
+      for (Statement st : stats) {
+        stat_vars.add(splitVaribles(st, "  " + indent));
+      }
+
+      for (int x = 0; x < stats.size(); x++) {
+        switch (stats.get(x).type) {
+          case Statement.TYPE_DO: {
+            DoStatement dost = (DoStatement)stats.get(x);
+            VarVersionPair init = extractVar(dost.getInitExprent());
+            if (init != null && (dost.getLooptype() == DoStatement.LOOP_FOR || dost.getLooptype()== DoStatement.LOOP_FOREACH)) {
+              if (safeToRename(init, stats, stat_vars, x)) {
+                VarVersionPair newIndex = new VarVersionPair(counters.getCounterAndIncrement(CounterContainer.VAR_COUNTER), 0);
+                remapVar(init, newIndex, stats.get(x), stat_vars.get(x));
+              }
+            }
+            break;
+          }
+        }
+      }
+
+      for (Map<VarVersionPair, Boolean> var : stat_vars) {
+        for (Entry<VarVersionPair, Boolean> entry : var.entrySet()) {
+          if (!vars.containsKey(entry.getKey())) {
+            vars.put(entry.getKey(), entry.getValue());
+          }
+        }
+      }
+    }
+    else {
+      for (Exprent e : stat.getExprents()) {
+        splitExprent(e, vars, indent);
+      }
+    }
+
+    if (stat.type == Statement.TYPE_DO) {
+      DoStatement dost = (DoStatement)stat;
+      if (dost.getLooptype() == DoStatement.LOOP_DOWHILE) {
+        splitExprent(dost.getConditionExprent(), vars, indent);
+      }
+    }
+
+    //for (Map.Entry<VarVersionPair, Boolean> entry : vars.entrySet()) {
+    //  System.out.println(indent + "  " + (entry.getValue() ? "ass " : "ref ") + entry.getKey());
+    //}
+
+    return vars;
+  }
+
+  private static void splitExprent(Exprent e, Map<VarVersionPair, Boolean> map, String indent) {
+    if (e == null)
+      return;
+    if (e.type == Exprent.EXPRENT_ASSIGNMENT && ((AssignmentExprent)e).getLeft().type == Exprent.EXPRENT_VAR) {
+      VarVersionPair var = new VarVersionPair((VarExprent)((AssignmentExprent)e).getLeft());
+      if (!map.containsKey(var)) {
+        map.put(var, true);
+      }
+      splitExprent(((AssignmentExprent)e).getRight(), map, indent);
+    }
+    else {
+      for (VarVersionPair var : e.getAllVariables()) {
+        if (!map.containsKey(var)) {
+          map.put(var, false);
+        }
+      }
+    }
+  }
+
+  private static VarVersionPair extractVar(Exprent exp) {
+    if (exp == null) {
+      return null;
+    }
+    if (exp.type == Exprent.EXPRENT_ASSIGNMENT && ((AssignmentExprent)exp).getLeft().type == Exprent.EXPRENT_VAR) {
+      return new VarVersionPair((VarExprent)((AssignmentExprent)exp).getLeft());
+    }
+    else if (exp.type == Exprent.EXPRENT_VAR) {
+      return new VarVersionPair((VarExprent)exp);
+    }
+    return null;
+  }
+
+  private static boolean safeToRename(VarVersionPair var, List<Statement> stats, List<Map<VarVersionPair, Boolean>> list, int index) {
+    for (int x = index + 1; x < list.size(); x++) {
+      Map<VarVersionPair, Boolean> map = list.get(x);
+      if (map.containsKey(var)) {
+        return map.get(var);
+      }
+    }
+    return false;
+  }
+
+  private void remapVar(VarVersionPair from, VarVersionPair to, Statement stat, Map<VarVersionPair, Boolean> stats) {
+    remapVar(from, to, stat);
+    varproc.copyVarInfo(from, to);
+    stats.put(to, true);
+    stats.remove(from);
+  }
+
+  private static void remapVar(VarVersionPair from, VarVersionPair to, Statement stat) {
+    if (stat == null) {
+      return;
+    }
+    if (stat.getExprents() == null) {
+      for (Object obj : stat.getSequentialObjects()) {
+        if (obj instanceof Statement) {
+          remapVar(from, to, (Statement)obj);
+        }
+        else if (obj instanceof Exprent) {
+          remapVar(from, to, (Exprent)obj);
+        }
+      }
+    }
+    else {
+      for (Exprent exp : stat.getExprents()) {
+        remapVar(from, to, exp);
+      }
+    }
+  }
+
+  private static void remapVar(VarVersionPair from, VarVersionPair to, Exprent exprent) {
+    if (exprent == null) {
+      return;
+    }
+    List<Exprent> lst = exprent.getAllExprents(true);
+    lst.add(exprent);
+
+    for (Exprent expr : lst) {
+      if (expr.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)expr;
+        if (var.getIndex() == from.var && var.getVersion() == from.version) {
+          var.setIndex(to.var);
+          var.setVersion(to.version);
+        }
+      }
+    }
+  }
+
+  private void setupLVTs(Statement stat) {
+    if (stat == null || varproc.getLVT() == null) {
+      return;
+    }
+
+    Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat);
+    if (stat.getExprents() == null) {
+      for (Object obj : stat.getSequentialObjects()) {
+        if (obj instanceof Statement) {
+          setupLVTs((Statement)obj);
+        }
+        else if (obj instanceof Exprent) {
+          setupLVTs((Exprent)obj, vars);
+        }
+      }
+    }
+    else {
+      for (Exprent exp : stat.getExprents()) {
+        setupLVTs(exp, vars);
+      }
+    }
+  }
+
+  private void setupLVTs(Exprent exprent, Map<Integer, LVTVariable> lvts) {
+    if (exprent == null) {
+      return;
+    }
+    List<Exprent> lst = exprent.getAllExprents(true);
+    lst.add(exprent);
+
+    for (Exprent expr : lst) {
+      if (expr.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)expr;
+        int index = varproc.getRemapped(var.getIndex());
+        LVTVariable lvt = lvts.get(index);
+        if (lvt != null) {
+          var.setLVT(lvt);
+        }
+      }
+    }
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index 0a619d023d4413f969517f8a60ef816be1173fb7..a8ad01909d5ccd56cdadbd7ecab087a63e1e3d09 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -160,8 +160,8 @@ public class VarProcessor {
     return this.lvt;
   }
 
-  public LVTVariable findLVT(int index, List<Integer> instructionOffsets) {
-    return this.lvt == null ? null : lvt.find(index, instructionOffsets);
+  public LVTVariable findLVT(int index, Statement stat) {
+    return this.lvt == null ? null : lvt.find(index, stat);
   }
 
   public int getRemapped(int index) {
@@ -169,4 +169,11 @@ public class VarProcessor {
     if (res == null) return index;
     return res.var;
   }
+
+  public void copyVarInfo(VarVersionPair from, VarVersionPair to) {
+    setVarName(to, getVarName(from));
+    setVarFinal(to, getVarFinal(from));
+    setVarType(to, getVarType(from));
+    varVersions.getMapOriginalVarIndices().put(to.var, varVersions.getMapOriginalVarIndices().get(from.var));
+  }
 }
