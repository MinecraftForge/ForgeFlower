From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sat, 17 Oct 2015 00:50:20 -0400
Subject: [PATCH] Fix constants with trailing zeros and incorrect types.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 3398924fabb57daddb0f6b51daafdd266cc371b6..0fc40559457cfc425bced3a536b862a963a466e5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -182,16 +182,16 @@ public class ConstExprent extends Exprent {
           String doublefield;
           if (literal) {
             if (Double.isNaN(dval)) {
-              return new TextBuffer("0.0D / 0.0");
+              return new TextBuffer("0.0D / 0.0D");
             }
             else if (dval == Double.POSITIVE_INFINITY) {
-              return new TextBuffer("1.0D / 0.0");
+              return new TextBuffer("1.0D / 0.0D");
             }
             else if (dval == Double.NEGATIVE_INFINITY) {
-              return new TextBuffer("-1.0D / 0.0");
+              return new TextBuffer("-1.0D / 0.0D");
             }
             else {
-              return new TextBuffer(value.toString()).append("D");
+              return new TextBuffer(trimZeros(value.toString())).append("D");
             }
           }
           else if (Double.isNaN(dval)) {
@@ -219,16 +219,16 @@ public class ConstExprent extends Exprent {
           String floatfield;
           if (literal) {
             if (Double.isNaN(fval)) {
-              return new TextBuffer("0.0F / 0.0");
+              return new TextBuffer("0.0F / 0.0F");
             }
             else if (fval == Double.POSITIVE_INFINITY) {
-              return new TextBuffer("1.0F / 0.0");
+              return new TextBuffer("1.0F / 0.0F");
             }
             else if (fval == Double.NEGATIVE_INFINITY) {
-              return new TextBuffer("-1.0F / 0.0");
+              return new TextBuffer("-1.0F / 0.0F");
             }
             else {
-              return new TextBuffer(value.toString()).append("F");
+              return new TextBuffer(trimZeros(value.toString())).append("F");
             }
           }
           else if (Float.isNaN(fval)) {
