From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Fri, 27 Jul 2018 14:02:27 -0700
Subject: [PATCH] Fix shortname imports that are shadowed by super class inner
 classes

Adds an option (on by default) to force inner class references to be
qualified to their outer class, -qin

diff --git a/README.md b/README.md
index 9b15cd643468b3852b0092f7bffd399518fc03b3..4621cadc55b0814bf7f20fc5fff482b7756b5c6c 100644
--- a/README.md
+++ b/README.md
@@ -67,6 +67,7 @@ The rest of options can be left as they are: they are aimed at professional reve
 - inn (1): check for IntelliJ IDEA-specific @NotNull annotation and remove inserted code if found
 - lac (0): decompile lambda expressions to anonymous classes
 - nls (0): define new line character to be used for output. 0 - '\r\n' (Windows), 1 - '\n' (Unix), default is OS-dependent
+- qin (1): Whether to always qualify inner class references. If this is false, inner class names can be shortened depending on location
 - ind: indentation string (default is 3 spaces)
 - log (INFO): a logging level, possible values are TRACE, INFO, WARN, ERROR
 
diff --git a/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java b/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
index 6b7d72b6f599aaf04f122ff38ca872f469c9727e..cdd93212560a15372002c4d927a9debc325edbc3 100644
--- a/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
+++ b/src/org/jetbrains/java/decompiler/main/collectors/ImportCollector.java
@@ -20,7 +20,7 @@ public class ImportCollector {
   private final Set<String> setNotImportedNames = new HashSet<>();
   // set of field names in this class and all its predecessors.
   private final Set<String> setFieldNames = new HashSet<>();
-  private final Set<String> setInnerClassNames = new HashSet<>();
+  private final Map<String, Map<String, String>> mapInnerClassNames = new HashMap<>();
   private final String currentPackageSlash;
   private final String currentPackagePoint;
 
@@ -38,45 +38,18 @@ public class ImportCollector {
     }
 
     Map<String, StructClass> classes = DecompilerContext.getStructContext().getClasses();
-    LinkedList<String> queue = new LinkedList<>();
-    Set<StructClass> processedClasses = new HashSet<>();
     StructClass currentClass = root.classStruct;
     while (currentClass != null) {
-      processedClasses.add(currentClass);
-      if (currentClass.superClass != null) {
-        queue.add(currentClass.superClass.getString());
-      }
-
-      Collections.addAll(queue, currentClass.getInterfaceNames());
-
       // all field names for the current class ..
       for (StructField f : currentClass.getFields()) {
         setFieldNames.add(f.getName());
       }
 
-      // .. all inner classes for the current class ..
-      StructInnerClassesAttribute attribute = currentClass.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
-      if (attribute != null) {
-        for (StructInnerClassesAttribute.Entry entry : attribute.getEntries()) {
-          if (entry.enclosingName != null && entry.enclosingName.equals(currentClass.qualifiedName)) {
-            setInnerClassNames.add(entry.simpleName);
-          }
-        }
-      }
-
       // .. and traverse through parent.
-      do {
-        currentClass = queue.isEmpty() ? null : classes.get(queue.removeFirst());
-
-        if (currentClass != null && processedClasses.contains(currentClass)) {
-          // Class already processed, skipping.
-
-          // This may be sign of circularity in the class hierarchy but in most cases this mean that same interface
-          // are listed as implemented several times in the class hierarchy.
-          currentClass = null;
-        }
-      } while (currentClass == null && !queue.isEmpty());
+      currentClass = currentClass.superClass != null ? classes.get(currentClass.superClass.getString()) : null;
     }
+
+    collectConflictingShortNames(root, new HashMap<>());
   }
 
   /**
@@ -152,11 +125,36 @@ public class ImportCollector {
     // 3) inner class with the same short name in the current class, a super class, or an implemented interface
     boolean existsDefaultClass =
       (context.getClass(currentPackageSlash + outerShortName) != null && !packageName.equals(currentPackagePoint)) || // current package
-      (context.getClass(outerShortName) != null && !currentPackagePoint.isEmpty()) || // default package
-      setInnerClassNames.contains(outerShortName); // inner class
+      (context.getClass(outerShortName) != null && !currentPackagePoint.isEmpty());
+
+    ClassNode currCls = (ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
+    String mapKey = currCls == null ? "" : currCls.classStruct.qualifiedName;
+    Map<String, String> innerClassNames = mapInnerClassNames.getOrDefault(mapKey, new HashMap<>());
+    if (!existsDefaultClass && innerClassNames.containsKey(outerShortName) && !innerClassNames.get(outerShortName).equals(fullName)) {
+      // if the class being accessed is also an inner class
+      // attempt to import the outer class and reference OuterClass.InnerClass
+      if (context.getClass(packageName.replace('.', '/') + "$" + outerShortName) != null) {
+        lastDot = fullName.lastIndexOf(".", lastDot - 1);
+        if (lastDot >= 0) {
+          nestedName = fullName.substring(lastDot + 1);
+          outerShortName = packageName.substring(lastDot + 1);
+          packageName = packageName.substring(0, lastDot);
+
+          if (innerClassNames.containsKey(outerShortName)  && !innerClassNames.get(outerShortName).equals(packageName + '.' + outerShortName)) {
+            existsDefaultClass = true;
+            nestedName = null;
+          }
+        }
+      }
+      else {
+        existsDefaultClass = true;
+      }
+    }
 
-    if (existsDefaultClass || (mapSimpleNames.containsKey(outerShortName) && !packageName.equals(mapSimpleNames.get(outerShortName)))) {
-      return packageName + "." + nestedName;
+    if (existsDefaultClass ||
+        (mapSimpleNames.containsKey(outerShortName) && !packageName.equals(mapSimpleNames.get(outerShortName)))) {
+      //  don't return full name because if the class is a inner class, full name refers to the parent full name, not the child full name
+      return nestedName == null ? fullName : (packageName + "." + nestedName);
     }
     else if (!mapSimpleNames.containsKey(outerShortName)) {
       mapSimpleNames.put(outerShortName, packageName);
@@ -192,4 +190,43 @@ public class ImportCollector {
       .map(ent -> ent.getValue() + "." + ent.getKey())
       .collect(Collectors.toList());
   }
-}
+
+  private void collectConflictingShortNames(ClassNode root, Map<String, String> rootNames) {
+    Map<String, String> names = new HashMap<>(rootNames);
+    getSuperClassInnerClasses(root, names);
+    mapInnerClassNames.put(root.classStruct.qualifiedName, names);
+
+    for (ClassNode nested : root.nested) {
+      collectConflictingShortNames(nested, names);
+    }
+  }
+
+  private void getSuperClassInnerClasses(ClassNode node, Map<String, String> names) {
+    Map<String, StructClass> classes = DecompilerContext.getStructContext().getClasses();
+    LinkedList<String> queue = new LinkedList<>();
+    StructClass currentClass = node.classStruct;
+    while (currentClass != null) {
+      if (currentClass.superClass != null) {
+        queue.add(currentClass.superClass.getString());
+      }
+
+      Collections.addAll(queue, currentClass.getInterfaceNames());
+
+      // .. all inner classes for the current class ..
+      StructInnerClassesAttribute attribute = currentClass.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
+      if (attribute != null) {
+        for (StructInnerClassesAttribute.Entry entry : attribute.getEntries()) {
+          if (entry.enclosingName != null && entry.enclosingName.equals(currentClass.qualifiedName)) {
+            names.put(entry.simpleName, entry.innerName.replace('/', '.').replace('$', '.'));
+          }
+        }
+      }
+
+      // .. and traverse through parent.
+      currentClass = !queue.isEmpty() ? classes.get(queue.removeFirst()) : null;
+      while (currentClass == null && !queue.isEmpty()) {
+        currentClass = classes.get(queue.removeFirst());
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 8337607e067c1c7cdc803058eab4bfb0ba3c9d3c..ee6f1c77f2267fed499ee60a12ef319d8fc95e9f 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -36,6 +36,7 @@ public interface IFernflowerPreferences {
   String VERIFY_ANONYMOUS_CLASSES = "vac";
 
   String INCLUDE_ENTIRE_CLASSPATH = "iec";
+  String QUALIFY_INNER_CLASSES = "qin";
 
   String LOG_LEVEL = "log";
   String MAX_PROCESSING_METHOD = "mpm";
@@ -89,6 +90,7 @@ public interface IFernflowerPreferences {
     defaults.put(VERIFY_ANONYMOUS_CLASSES, "0");
 
     defaults.put(INCLUDE_ENTIRE_CLASSPATH, "0");
+    defaults.put(QUALIFY_INNER_CLASSES, "1");
 
     defaults.put(LOG_LEVEL, IFernflowerLogger.Severity.INFO.name());
     defaults.put(MAX_PROCESSING_METHOD, "0");
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index b2963191fe5c6e162346fc98f9cefd122da23ee2..f7e086c560b6e1e5d67d93813c91ecc70db49ce1 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -8,6 +8,7 @@ import org.jetbrains.java.decompiler.code.cfg.BasicBlock;
 import org.jetbrains.java.decompiler.main.ClassesProcessor;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge.EdgeType;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.*;
 import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph;
@@ -757,12 +758,14 @@ public class ExprProcessor implements CodeConstants {
   ) {
     List<ClassesProcessor.ClassNode> enclosingClasses = enclosingClassList();
     StringBuilder curPathBldr = new StringBuilder(type.getValue().substring(0, type.getValue().lastIndexOf('/') + 1));
+    boolean forceShouldWrite = DecompilerContext.getOption(IFernflowerPreferences.QUALIFY_INNER_CLASSES);
     for (int i = 0; i < nestedTypes.size(); i++) {
       String nestedType = nestedTypes.get(i);
       boolean shouldWrite = true;
       if (!enclosingClasses.isEmpty() && i != nestedTypes.size() - 1) {
         String enclosingType = enclosingClasses.remove(0).simpleName;
-        shouldWrite = !nestedType.equals(enclosingType)
+        shouldWrite = forceShouldWrite
+          || !nestedType.equals(enclosingType)
           // Also write out the enclosing class if we are the outermost, and we're in the type params
           || enclosingClasses.isEmpty() && DecompilerContext.getOption(DecompilerContext.IN_CLASS_TYPE_PARAMS);
       }
