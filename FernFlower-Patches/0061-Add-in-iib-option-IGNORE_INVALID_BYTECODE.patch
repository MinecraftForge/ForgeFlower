From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sciwhiz12 <sciwhiz12@sciwhiz12.tk>
Date: Thu, 4 Feb 2021 02:55:14 +0800
Subject: [PATCH] Add in -iib option; IGNORE_INVALID_BYTECODE

ref: https://github.com/MinecraftForge/FernFlower/commit/c2a6c13d3ccc835ee32d8250f94687bd2712aa40

Upstream has ExprUtil#getSyntheticParametersMask which does not exist here, so had to find all old places before the move to ExprUtil and patched those. (ref: https://github.com/MinecraftForge/FernFlower/commit/8990950daad666f8d9712fdd51ce9ff0d04f5fd7#diff-0d4f70d78fbde518520227007f32404aef3efb8156422c9c7c5b8ab90a39776b)

diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 259e5d276e7a98a379bfcf03a18a4b93a92f4396..e16232be3ffdfde57380608ff584079537b2debd 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -45,6 +45,7 @@ public interface IFernflowerPreferences {
   String LAMBDA_TO_ANONYMOUS_CLASS = "lac";
   String BYTECODE_SOURCE_MAPPING = "bsm";
   String USE_DEBUG_LINE_NUMBERS = "udl";
+  String IGNORE_INVALID_BYTECODE = "iib";
 
   String LOG_LEVEL = "log";
   String MAX_PROCESSING_METHOD = "mpm";
@@ -90,6 +91,7 @@ public interface IFernflowerPreferences {
     put(LAMBDA_TO_ANONYMOUS_CLASS, "0");
     put(BYTECODE_SOURCE_MAPPING, "0");
     put(USE_DEBUG_LINE_NUMBERS, "0");
+    put(IGNORE_INVALID_BYTECODE, "0");
 
     put(LOG_LEVEL, IFernflowerLogger.Severity.INFO.name());
     put(MAX_PROCESSING_METHOD, "0");
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index e6152070d2b155d98fc0b8155db12c12ca3864e0..95b3c37273c1460c017fc7b4d94b52d2feea6e27 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -371,7 +371,9 @@ public class InvocationExprent extends Exprent {
 
       if (newNode != null) {  // own class
         if (newNode.getWrapper() != null) {
-          sigFields = newNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, stringDescriptor).signatureFields;
+          MethodWrapper wrapper = newNode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, stringDescriptor);
+          if (wrapper != null || !DecompilerContext.getOption(IFernflowerPreferences.IGNORE_INVALID_BYTECODE))
+            sigFields = wrapper.signatureFields;
         }
         else {
           if (newNode.type == ClassNode.CLASS_MEMBER && (newNode.access & CodeConstants.ACC_STATIC) == 0) { // non-static member class
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index 56e67715de8e9fa7c7bf7e341e50d37b0b6b1382..e8376e074749958d779a85f69dde0c7ff8656f87 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -22,6 +22,7 @@ import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.CheckTypesResult;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
@@ -180,7 +181,9 @@ public class NewExprent extends Exprent {
         List<VarVersionPair> sigFields = null;
         if (newnode != null) { // own class
           if (newnode.getWrapper() != null) {
-            sigFields = newnode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, invsuper.getStringDescriptor()).signatureFields;
+            MethodWrapper wrapper = newnode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, invsuper.getStringDescriptor());
+            if (wrapper != null || !DecompilerContext.getOption(IFernflowerPreferences.IGNORE_INVALID_BYTECODE))
+              sigFields = wrapper.signatureFields;
           }
           else {
             if (newnode.type == ClassNode.CLASS_MEMBER && (newnode.access & CodeConstants.ACC_STATIC) == 0 &&
@@ -302,7 +305,9 @@ public class NewExprent extends Exprent {
           List<VarVersionPair> sigFields = null;
           if (newnode != null) { // own class
             if (newnode.getWrapper() != null) {
-              sigFields = newnode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, constructor.getStringDescriptor()).signatureFields;
+              MethodWrapper wrapper = newnode.getWrapper().getMethodWrapper(CodeConstants.INIT_NAME, constructor.getStringDescriptor());
+              if (wrapper != null || !DecompilerContext.getOption(IFernflowerPreferences.IGNORE_INVALID_BYTECODE))
+                sigFields = wrapper.signatureFields;
             }
             else {
               if (newnode.type == ClassNode.CLASS_MEMBER && (newnode.access & CodeConstants.ACC_STATIC) == 0 &&
diff --git a/test/org/jetbrains/java/decompiler/SingleClassesTest.java b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
index e85cd673a627d164a7c168bbf8a19f9a49c22c69..514351caac48358a3c10400dba4ca8bf40db0c6c 100644
--- a/test/org/jetbrains/java/decompiler/SingleClassesTest.java
+++ b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
@@ -27,6 +27,7 @@ public class SingleClassesTest extends SingleClassesTestBase {
     return new HashMap<String, Object>() {{
       put(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING, "1");
       put(IFernflowerPreferences.DUMP_ORIGINAL_LINES, "1");
+      put(IFernflowerPreferences.IGNORE_INVALID_BYTECODE, "1");
     }};
   }
 
