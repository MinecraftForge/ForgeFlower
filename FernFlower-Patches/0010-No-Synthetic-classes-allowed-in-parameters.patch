From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Mon, 3 Aug 2015 21:20:43 -0700
Subject: [PATCH] No Synthetic classes allowed in parameters -.-


diff --git a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
index 85d580d6ced6b14889453ab92689b13b1986da01..0438fd435d70c34265d4a8d5a86dd58a9daea2f3 100644
--- a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
@@ -349,7 +349,7 @@ public class InitializerProcessor {
           VarType type = md.params[md.params.length - 1];
           if (type.type == CodeConstants.TYPE_OBJECT) {
             ClassNode node = DecompilerContext.getClassProcessor().getMapRootClasses().get(type.value);
-            if (node != null && (node.namelessConstructorStub || node.type == ClassNode.CLASS_ANONYMOUS)) {
+            if (node != null && (node.namelessConstructorStub || node.type == ClassNode.CLASS_ANONYMOUS || (node.access & CodeConstants.ACC_SYNTHETIC) != 0)) {
               //TODO: Verify that the body is JUST a this([args]) call?
               wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(name, desc));
             }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index 0297a55fc16eb3eddc0e458bfa49325f563fd613..51137cc3c2f5756e688d910ed405cccb935ab0d8 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -327,7 +327,7 @@ public class NewExprent extends Exprent {
 
                 if (i == lstParameters.size() - 1 && expr.getExprType() == VarType.VARTYPE_NULL) {
                   ClassNode node = DecompilerContext.getClassProcessor().getMapRootClasses().get(leftType.value);
-                  if (node != null && (node.namelessConstructorStub || node.type == ClassNode.CLASS_ANONYMOUS)) {
+                  if (node != null && (node.namelessConstructorStub || node.type == ClassNode.CLASS_ANONYMOUS || (node.access & CodeConstants.ACC_SYNTHETIC) != 0)) {
                     break;  // skip last parameter of synthetic constructor call
                   }
                 }
