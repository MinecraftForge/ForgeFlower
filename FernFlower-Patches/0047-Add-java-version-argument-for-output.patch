From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: coehlrich <coehlrich@users.noreply.github.com>
Date: Sun, 17 Apr 2022 16:25:27 +1200
Subject: [PATCH] Add java version argument for output


diff --git a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
index 8bbe04c2f404b6c43a6a216bf2a99d3b69a2ad93..62c1adbe379a18ccfa710487cf624511e57f1a2b 100644
--- a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
+++ b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
@@ -125,6 +125,14 @@ public class DecompilerContext {
            IFernflowerPreferences.LINE_SEPARATOR_UNX : IFernflowerPreferences.LINE_SEPARATOR_WIN;
   }
 
+  public static int getSourceVersion() {
+    try {
+      return Integer.parseInt((String) getProperty(IFernflowerPreferences.SOURCE_JAVA_VERSION));
+    } catch (NumberFormatException ex) {
+      return -1;
+    }
+  }
+
   public static int getThreads() {
     return getCurrentContext().threads;
   }
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 23ed017fc66747daf2f7b603df7d123835145570..cf2096ffd0927a85fac3e1a155d760a359d0dd9f 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -60,6 +60,8 @@ public interface IFernflowerPreferences {
 
   String DUMP_CODE_LINES = "dcl";
 
+  String SOURCE_JAVA_VERSION = "sjv";
+
   Map<String, Object> DEFAULTS = getDefaults();
 
   static Map<String, Object> getDefaults() {
@@ -108,6 +110,7 @@ public interface IFernflowerPreferences {
     defaults.put(USE_JAD_VARNAMING, "0");
     defaults.put(SKIP_EXTRA_FILES, "0");
     defaults.put(DUMP_CODE_LINES, "0");
+    defaults.put(SOURCE_JAVA_VERSION, "-1");
 
     return Collections.unmodifiableMap(defaults);
   }
diff --git a/src/org/jetbrains/java/decompiler/struct/StructClass.java b/src/org/jetbrains/java/decompiler/struct/StructClass.java
index f174c06886eb5b928abcaf3cedd3b459df9d463b..c6b24f2367b0806fc6b4996395572660dd2079ca 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructClass.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructClass.java
@@ -56,6 +56,7 @@ public class StructClass extends StructMember {
     int minorVersion = in.readUnsignedShort();
     int majorVersion = in.readUnsignedShort();
     int bytecodeVersion = Math.max(majorVersion, CodeConstants.BYTECODE_JAVA_LE_4);
+    int sourceVersion = Math.max(majorVersion, DecompilerContext.getSourceVersion() + 44);
 
     ConstantPool pool = new ConstantPool(in);
 
@@ -98,7 +99,7 @@ public class StructClass extends StructMember {
     }
 
     StructClass cl = new StructClass(
-      accessFlags, attributes, qualifiedName, superClass, own, loader, minorVersion, majorVersion, interfaces, interfaceNames, fields, methods, signature);
+      accessFlags, attributes, qualifiedName, superClass, own, loader, minorVersion, majorVersion, sourceVersion, interfaces, interfaceNames, fields, methods, signature);
     if (loader == null) cl.pool = pool;
     return cl;
   }
@@ -109,6 +110,7 @@ public class StructClass extends StructMember {
   private final LazyLoader loader;
   private final int minorVersion;
   private final int majorVersion;
+  private final int sourceVersion;
   private final int[] interfaces;
   private final String[] interfaceNames;
   private final VBStyleCollection<StructField, String> fields;
@@ -125,6 +127,7 @@ public class StructClass extends StructMember {
                       LazyLoader loader,
                       int minorVersion,
                       int majorVersion,
+                      int sourceVersion,
                       int[] interfaces,
                       String[] interfaceNames,
                       VBStyleCollection<StructField, String> fields,
@@ -142,6 +145,7 @@ public class StructClass extends StructMember {
     this.fields = fields;
     this.methods = methods;
     this.signature = signature;
+    this.sourceVersion = sourceVersion;
   }
 
   public boolean hasField(String name, String descriptor) {
@@ -283,7 +287,7 @@ public class StructClass extends StructMember {
   }
 
   public boolean hasPatternsInInstanceofSupport() {
-    return isVersion16() || (isVersion14() && isPreviewVersion());
+    return isVersion16() || (isVersion14() && isPreviewVersion()) || sourceVersion >= CodeConstants.BYTECODE_JAVA_16;
   }
 
   public boolean isVersion(int minVersion) {
