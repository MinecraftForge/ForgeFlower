From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Fri, 20 Jul 2018 01:37:36 -0700
Subject: [PATCH] Add a metadata file named
 'fernflower_abstract_parameter_names.txt' to rename abstract parameters.

Format: ClassName MethodName Descriptor Param1[ Param2...]

diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 410a83345e5e145962137536b95ca4f22185d678..0fb12b6d99f3c1dc7652e5ab49e36683d7a6db08 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -755,7 +755,11 @@ public class ClassWriter {
             if (parameterName == null) {
               parameterName = "param" + index; // null iff decompiled with errors
             }
-            parameterName = methodWrapper.methodStruct.getVariableNamer().renameParameter(flags, typeName, parameterName, index);
+            String newParameterName = methodWrapper.methodStruct.getVariableNamer().renameParameter(flags, typeName, parameterName, index);
+            if ((flags & (CodeConstants.ACC_ABSTRACT | CodeConstants.ACC_NATIVE)) != 0 && newParameterName.equals(parameterName)) {
+              newParameterName = DecompilerContext.getStructContext().renameAbstractParameter(methodWrapper.methodStruct.getClassQualifiedName(), mt.getName(), mt.getDescriptor(), index - (((flags & CodeConstants.ACC_STATIC) == 0) ? 1 : 0), parameterName);
+            }
+            parameterName = newParameterName;
             buffer.append(parameterName);
 
             paramCount++;
diff --git a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
index 2d68b9418fcde253948cfa7ffc9c43519884ddce..7b0946ed0de6af2dbe2043332650a09880027726 100644
--- a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
+++ b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
@@ -7,12 +7,16 @@ import org.jetbrains.java.decompiler.main.extern.IResultSaver;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader.Link;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
+import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
+import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
+import java.util.zip.ZipFile;
 
 public class ContextUnit {
 
@@ -54,6 +58,24 @@ public class ContextUnit {
   }
 
   public void addOtherEntry(String fullPath, String entry) {
+    if ("fernflower_abstract_parameter_names.txt".equals(entry)) {
+      byte[] data;
+      try {
+        if (type == TYPE_JAR || type == TYPE_ZIP) {
+          try (ZipFile archive = new ZipFile(fullPath)) {
+            data = InterpreterUtil.getBytes(archive, archive.getEntry(entry));
+          }
+        } else {
+          data = InterpreterUtil.getBytes(new File(fullPath));
+        }
+        DecompilerContext.getStructContext().loadAbstractMetadata(new String(data, StandardCharsets.UTF_8));
+      }
+      catch (IOException e) {
+        String message = "Cannot read fernflower_abstract_parameter_names.txt from " + fullPath;
+        DecompilerContext.getLogger().writeMessage(message, e);
+      }
+      return;
+    }
     if (DecompilerContext.getOption(IFernflowerPreferences.SKIP_EXTRA_FILES))
         return;
     otherEntries.add(new String[]{fullPath, entry});
diff --git a/src/org/jetbrains/java/decompiler/struct/StructContext.java b/src/org/jetbrains/java/decompiler/struct/StructContext.java
index 58290caab9b84bb73291ea8af64b6897c01b162a..1274df19dd56bf8061384af8d3db78856f836928 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructContext.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructContext.java
@@ -4,14 +4,18 @@ package org.jetbrains.java.decompiler.struct;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.extern.IResultSaver;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger.Severity;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMethodDescriptor;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.jar.JarFile;
 import java.util.zip.ZipEntry;
@@ -23,6 +27,7 @@ public class StructContext {
   private final LazyLoader loader;
   private final Map<String, ContextUnit> units = new HashMap<>();
   private final Map<String, StructClass> classes = new HashMap<>();
+  private final Map<String, List<String>> abstractNames = new HashMap<>();
 
   public StructContext(IResultSaver saver, IDecompiledData decompiledData, LazyLoader loader) {
     this.saver = saver;
@@ -208,4 +213,24 @@ public class StructContext {
 
     return false;
   }
+
+  public void loadAbstractMetadata(String string) {
+    for (String line : string.split("\n")) {
+      String[] pts = line.split(" ");
+      if (pts.length < 4) //class method desc [args...]
+        continue;
+      GenericMethodDescriptor desc = GenericMain.parseMethodSignature(pts[2]);
+      List<String> params = new ArrayList<>();
+      for (int x = 0; x < pts.length - 3; x++) {
+        for (int y = 0; y < desc.parameterTypes.get(x).getStackSize(); y++)
+            params.add(pts[x+3]);
+      }
+      this.abstractNames.put(pts[0] + ' '+ pts[1] + ' ' + pts[2], params);
+    }
+  }
+
+  public String renameAbstractParameter(String className, String methodName, String descriptor, int index, String _default) {
+    List<String> params = this.abstractNames.get(className + ' ' + methodName + ' ' + descriptor);
+    return params != null && index < params.size() ? params.get(index) : _default;
+  }
 }
