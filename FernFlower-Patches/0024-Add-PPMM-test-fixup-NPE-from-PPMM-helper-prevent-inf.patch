From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 13 Sep 2015 18:25:07 -0400
Subject: [PATCH] Add PPMM test, fixup NPE from PPMM helper, prevent infinite
 loops in PPMM


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
index d93bad6bd760a6de8e546411b1f2798b4bbd03ad..db70f64a91a21c04b1277b6da9b38ef7f60c1cf4 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
@@ -34,6 +34,7 @@ import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 
 public class PPandMMHelper {
 
@@ -156,7 +157,11 @@ public class PPandMMHelper {
 
               exprentReplaced = true;
               if (!left.equals(econd)) {
-                remaps.put(new VarVersionPair((VarExprent)left), new VarVersionPair((VarExprent)econd));
+                VarVersionPair _old = new VarVersionPair((VarExprent)left);
+                VarVersionPair _new = new VarVersionPair((VarExprent)econd);
+                if (_old.var > _new.var) { // Try and prevent infinite loops here by only merging 'down'
+                  remaps.put(_old, _new);
+                }
               }
               return ret;
             }
@@ -183,13 +188,23 @@ public class PPandMMHelper {
 
     VarExprent v1 = (VarExprent)e1;
     VarExprent v2 = (VarExprent)e2;
-    return varProc.getRemapped(v1.getIndex()) == varProc.getRemapped(v2.getIndex())
-            && InterpreterUtil.equalObjects(v1.getVarType(), v2.getVarType());
+    return varProc.getRemapped(v1.getIndex()) == varProc.getRemapped(v2.getIndex());
+    //Probably should up this to checking if the types are in the same family, Like byte == int == long
+            //&& InterpreterUtil.equalObjects(v1.getVarType(), v2.getVarType());
   }
 
 
   private void updateVersions(DirectGraph graph) {
     if (remaps.isEmpty()) return;
+
+    for (Entry<VarVersionPair, VarVersionPair> remap : remaps.entrySet()) {
+      VarVersionPair target = remap.getValue();
+      while (remaps.containsKey(target)) {
+        target = remaps.get(target);
+      }
+      remaps.put(remap.getKey(), target);
+    }
+
     graph.iterateExprents(new DirectGraph.ExprentIterator() {
       @Override
       public int processExprent(Exprent exprent) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 43f29f5320b158feb567b4327e3487c1ea3748e9..0fc40559457cfc425bced3a536b862a963a466e5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -416,6 +416,11 @@ public class ConstExprent extends Exprent {
     measureBytecode(values);
   }
 
+  @Override
+  public String toString() {
+    return "const(" + toJava(0, new BytecodeMappingTracer()) + ")";
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/test/org/jetbrains/java/decompiler/LVTTest.java b/test/org/jetbrains/java/decompiler/LVTTest.java
index f4d869c4f04fef50aa1bcf64cb61ce0d2b02bfb9..d2a8f1c20c8a7954d4ba22d17fc1584d3bd4a3ca 100644
--- a/test/org/jetbrains/java/decompiler/LVTTest.java
+++ b/test/org/jetbrains/java/decompiler/LVTTest.java
@@ -35,7 +35,10 @@ public class LVTTest extends SingleClassesTestBase {
         super.setUp();
         fixture.cleanup = false;
     }
-  @Test public void testMatchLM() { doTest("pkg/TestLexManosLVT"); }
-  @Test public void testMatch1() { doTest("pkg/TestLVT"); }
-  @Test public void testMatch2() { doTest("pkg/TestLVTScoping"); }
+  @Test public void testMatch1() { doTest("pkg/TestPPMM"); }
+//  @Test public void testMatchLM() { doTest("pkg/TestLexManosLVT"); }
+//  @Test public void testMatch1() { doTest("pkg/TestLVT"); }
+//  @Test public void testMatch2() { doTest("pkg/TestLVTScoping"); }
+//  @Test public void testMCWorld() { doTest("net/minecraft/world/World"); }
+//  @Test public void testMCGuiCmdBlock() { doTest("net/minecraft/client/gui/GuiCommandBlock"); }
 }
diff --git a/testData/classes/pkg/TestPPMM.class b/testData/classes/pkg/TestPPMM.class
new file mode 100644
index 0000000000000000000000000000000000000000..38580c978dbdec1baf1fe2a0d4c7bbb11e2d2a11
GIT binary patch
literal 936
zcmb`F&rZTX5XQfuMYI+{RQ!X67%%9Bg9i^1FCGjDL=J@ef)$Gt8flCVzzccOc<=#y
zDDhiMiqR%=pxMs1JJb2?bTS{GZ|?w3v2Ve|js*j|DeR?C5G+;Pfg4;1jM8ySU|tSy
z96_!&?5KWAJ-DjfcbeKT7Tmcb!CK9~@0Od+C}=e5^>b#rzAq5Px5|_6yV~b@w4TSk
z$@ndW0WFMZVTd9Dx23ASTApkqv1DTld4c`&5<#}79#y%o2Ho;?yXSNQ9P%$r{uN+B
zbRunvrz5IRlP52bXKn<`w07vk3P0Dr)hOYNrv!Z&qcRqW)+{w2hNr0sqzOwiiLF=!
zBohyrjAgp!sU*7y$a)01n)ak<R0{0KD-yBtyRu@`ql2hNxi~191wvzG9_U6KlqF8W
oO8?3{(9Jj~nPH_d@;}tl!^~dl!7P5y9cOQr77nFgoAboy3oV9k<p2Nx

literal 0
HcmV?d00001

diff --git a/testData/results/TestPPMM.dec b/testData/results/TestPPMM.dec
new file mode 100644
index 0000000000000000000000000000000000000000..ba3a5fc1b4a29798078399358a7e560326aa2044
--- /dev/null
+++ b/testData/results/TestPPMM.dec
@@ -0,0 +1,70 @@
+package pkg;
+
+public class TestPPMM {
+   public void ipp() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+
+   public void ppi() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+
+   public void imm() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+
+   public void mmi() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+
+   public void ippf() {
+      int a = 0;
+      t(a++);
+      t(a++);
+      t(a++);
+      t(a++);
+   }
+
+   public void ppif() {
+      int a = 0;
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
+   }
+
+   public void immf() {
+      int a = 0;
+      t(a--);
+      t(a--);
+      t(a--);
+      t(a--);
+   }
+
+   public void mmif() {
+      int a = 0;
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
+   }
+
+   private static void t(int x) {
+   }
+}
diff --git a/testData/src/pkg/TestPPMM.java b/testData/src/pkg/TestPPMM.java
new file mode 100644
index 0000000000000000000000000000000000000000..21c7f2eab8296554f3fdb5d23efba4832e42e745
--- /dev/null
+++ b/testData/src/pkg/TestPPMM.java
@@ -0,0 +1,66 @@
+package pkg;
+
+public class TestPPMM {
+   // Bytecode wise ipp and ppi are identical when not using the intermediate value. 
+   // We keep these seperate tests just to see the bytecode.
+   public void ipp() {
+      int a = 0;
+      a++;
+      a++;
+      a++;
+      a++;
+   }
+   public void ppi() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+   public void imm() {
+      int a = 0;
+      a--;
+      a--;
+      a--;
+      a--;
+   }
+   public void mmi() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+   
+   // These versions actually use the intermediate value
+   public void ippf() {
+      int a = 0;
+      t(a++);
+      t(a++);
+      t(a++);
+      t(a++);
+   }
+   public void ppif() {
+      int a = 0;
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
+   }
+   public void immf() {
+      int a = 0;
+      t(a--);
+      t(a--);
+      t(a--);
+      t(a--);
+   }
+   public void mmif() {
+      int a = 0;
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
+   }
+   private static void t(int x){
+   }
+}
\ No newline at end of file
