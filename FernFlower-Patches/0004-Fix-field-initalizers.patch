From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Apr 2017 10:51:55 -0700
Subject: [PATCH] Fix field initalizers


diff --git a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
index 55badb664d4a52620710e97e040929ce5414eb9e..276f29381aabda07a3a8870b6c9a09ba08af7a91 100644
--- a/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/InitializerProcessor.java
@@ -3,6 +3,7 @@ package org.jetbrains.java.decompiler.main;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.main.rels.ClassWrapper;
 import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
@@ -19,7 +20,13 @@ import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 public final class InitializerProcessor {
   public static void extractInitializers(ClassWrapper wrapper) {
@@ -148,14 +155,16 @@ public final class InitializerProcessor {
   private static void extractStaticInitializers(ClassWrapper wrapper, MethodWrapper method) {
     RootStatement root = method.root;
     StructClass cl = wrapper.getClassStruct();
+    Set<String> whitelist = new HashSet<String>();
+
     Statement firstData = Statements.findFirstData(root);
     if (firstData != null) {
       boolean inlineInitializers = cl.hasModifier(CodeConstants.ACC_INTERFACE) || cl.hasModifier(CodeConstants.ACC_ENUM);
-
-      while (!firstData.getExprents().isEmpty()) {
-        Exprent exprent = firstData.getExprents().get(0);
-
-        boolean found = false;
+      List<AssignmentExprent> exprentsToRemove = new LinkedList<>();//when we loop back through the list, stores ones we need to remove outside iterator loop
+      Map<Integer, AssignmentExprent> nonFieldAssigns = new HashMap<>();
+      Iterator<Exprent> itr = firstData.getExprents().iterator();
+      while (itr.hasNext()) {
+        Exprent exprent = itr.next();
 
         if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
           AssignmentExprent assignExpr = (AssignmentExprent)exprent;
@@ -165,21 +174,49 @@ public final class InitializerProcessor {
                 cl.hasField(fExpr.getName(), fExpr.getDescriptor().descriptorString)) {
 
               // interfaces fields should always be initialized inline
-              if (inlineInitializers || isExprentIndependent(assignExpr.getRight(), method)) {
-                String keyField = InterpreterUtil.makeUniqueKey(fExpr.getName(), fExpr.getDescriptor().descriptorString);
+              String keyField = InterpreterUtil.makeUniqueKey(fExpr.getName(), fExpr.getDescriptor().descriptorString);
+              boolean exprentIndependent = isExprentIndependent(assignExpr.getRight(), method, cl, whitelist, cl.getFields().getIndexByKey(keyField), true);
+              if (inlineInitializers || exprentIndependent) {
                 if (!wrapper.getStaticFieldInitializers().containsKey(keyField)) {
-                  wrapper.getStaticFieldInitializers().addWithKey(assignExpr.getRight(), keyField);
-                  firstData.getExprents().remove(0);
-                  found = true;
+                  if (exprentIndependent) {
+                    wrapper.getStaticFieldInitializers().addWithKey(assignExpr.getRight(), keyField);
+                    whitelist.add(keyField);
+                    itr.remove();
+                  } else { //inlineInitializers
+                    if (assignExpr.getRight() instanceof NewExprent){
+                      NewExprent newExprent = (NewExprent) assignExpr.getRight();
+                      Exprent instance = newExprent.getConstructor().getInstance();
+                      if (instance instanceof VarExprent && nonFieldAssigns.containsKey(((VarExprent) instance).getIndex())){
+                        AssignmentExprent nonFieldAssignment = nonFieldAssigns.remove(((VarExprent) instance).getIndex());
+                        newExprent.getConstructor().setInstance(nonFieldAssignment.getRight());
+                        exprentsToRemove.add(nonFieldAssignment);
+                        wrapper.getStaticFieldInitializers().addWithKey(assignExpr.getRight(), keyField);
+                        whitelist.add(keyField);
+                        itr.remove();
+                      } else {
+                        DecompilerContext.getLogger().writeMessage("Don't know how to handle non independent "+assignExpr.getRight().getClass().getName(), IFernflowerLogger.Severity.ERROR);
+                      }
+                    } else {
+                      DecompilerContext.getLogger().writeMessage("Don't know how to handle non independent "+assignExpr.getRight().getClass().getName(), IFernflowerLogger.Severity.ERROR);
+                    }
+                  }
                 }
               }
             }
+          } else if (inlineInitializers){
+            DecompilerContext.getLogger().writeMessage("Found non field assignment when needing to force inline: "+assignExpr.toString(), IFernflowerLogger.Severity.TRACE);
+            if (assignExpr.getLeft() instanceof VarExprent) {
+              nonFieldAssigns.put(((VarExprent) assignExpr.getLeft()).getIndex(), assignExpr);
+            } else {
+              DecompilerContext.getLogger().writeMessage("Left isnt VarExprent :(", IFernflowerLogger.Severity.ERROR);
+            }
           }
+        } else if (inlineInitializers && cl.hasModifier(CodeConstants.ACC_INTERFACE)){
+          DecompilerContext.getLogger().writeMessage("Non assignment found in initialiser when we're needing to inline all", IFernflowerLogger.Severity.ERROR);
         }
-
-        if (!found) {
-          break;
-        }
+      }
+      if (exprentsToRemove.size() > 0){
+        firstData.getExprents().removeAll(exprentsToRemove);
       }
     }
   }
@@ -196,18 +233,18 @@ public final class InitializerProcessor {
       if (CodeConstants.INIT_NAME.equals(method.methodStruct.getName()) && method.root != null) { // successfully decompiled constructor
         Statement firstData = Statements.findFirstData(method.root);
         if (firstData == null || firstData.getExprents().isEmpty()) {
-          return;
+          continue;
         }
-        lstFirst.add(firstData.getExprents());
-        lstMethodWrappers.add(method);
 
         Exprent exprent = firstData.getExprents().get(0);
         if (!isAnonymous) { // FIXME: doesn't make sense
           if (exprent.type != Exprent.EXPRENT_INVOCATION ||
               !Statements.isInvocationInitConstructor((InvocationExprent)exprent, method, wrapper, false)) {
-            return;
+            continue;
           }
         }
+        lstFirst.add(firstData.getExprents());
+        lstMethodWrappers.add(method);
       }
     }
 
@@ -215,6 +252,9 @@ public final class InitializerProcessor {
       return;
     }
 
+    Set<String> whitelist = new HashSet<String>(wrapper.getStaticFieldInitializers().getLstKeys());
+    int prev_fidx = 0;
+
     while (true) {
       String fieldWithDescr = null;
       Exprent value = null;
@@ -237,8 +277,10 @@ public final class InitializerProcessor {
             if (!fExpr.isStatic() && fExpr.getClassname().equals(cl.qualifiedName) &&
                 cl.hasField(fExpr.getName(), fExpr.getDescriptor().descriptorString)) { // check for the physical existence of the field. Could be defined in a superclass.
 
-              if (isExprentIndependent(assignExpr.getRight(), lstMethodWrappers.get(i))) {
-                String fieldKey = InterpreterUtil.makeUniqueKey(fExpr.getName(), fExpr.getDescriptor().descriptorString);
+              String fieldKey = InterpreterUtil.makeUniqueKey(fExpr.getName(), fExpr.getDescriptor().descriptorString);
+              int fidx = cl.getFields().getIndexByKey(fieldKey);
+              if (prev_fidx <= fidx && isExprentIndependent(assignExpr.getRight(), lstMethodWrappers.get(i), cl, whitelist, fidx, false)) {
+                prev_fidx = fidx;
                 if (fieldWithDescr == null) {
                   fieldWithDescr = fieldKey;
                   value = assignExpr.getRight();
@@ -262,6 +304,7 @@ public final class InitializerProcessor {
 
       if (!wrapper.getDynamicFieldInitializers().containsKey(fieldWithDescr)) {
         wrapper.getDynamicFieldInitializers().addWithKey(value, fieldWithDescr);
+        whitelist.add(fieldWithDescr);
 
         for (List<Exprent> lst : lstFirst) {
           lst.remove(isAnonymous ? 0 : 1);
@@ -273,7 +316,7 @@ public final class InitializerProcessor {
     }
   }
 
-  private static boolean isExprentIndependent(Exprent exprent, MethodWrapper method) {
+  private static boolean isExprentIndependent(Exprent exprent, MethodWrapper method, StructClass cl, Set<String> whitelist, int fidx, boolean isStatic) {
     List<Exprent> lst = exprent.getAllExprents(true);
     lst.add(exprent);
 
@@ -289,10 +332,71 @@ public final class InitializerProcessor {
           }
           break;
         case Exprent.EXPRENT_FIELD:
-          return false;
+          FieldExprent fexpr = (FieldExprent)expr;
+          if (cl.hasField(fexpr.getName(), fexpr.getDescriptor().descriptorString)) {
+            String key = InterpreterUtil.makeUniqueKey(fexpr.getName(), fexpr.getDescriptor().descriptorString);
+            if (isStatic) {
+              // There is a very stupid section of the JLS
+              if (!fexpr.isStatic()) {
+                return false;
+              } else if (cl.getFields().getIndexByKey(key) >= fidx) {
+                fexpr.forceQualified(true);
+              }
+            } else {
+              if (!whitelist.contains(key)) {
+                return false;
+              } else if (cl.getFields().getIndexByKey(key) > fidx) {
+                return false;
+              }
+            }
+          }
+          else if (!fexpr.isStatic() && fexpr.getInstance() == null) {
+            return false;
+          }
+          break;
+        case Exprent.EXPRENT_NEW:
+          if (!isNewExprentIndependent((NewExprent)expr, cl, fidx)) {
+            return false;
+          }
       }
     }
 
     return true;
   }
+
+  // Verifies that a lambda used to initialize a static field does not reference
+  // another static field defined later in the class
+  private static boolean isNewExprentIndependent(NewExprent nexpr, StructClass cl, int fidx) {
+    boolean isStatic = cl.getFields().get(fidx).hasModifier(CodeConstants.ACC_STATIC);
+    if (isStatic && nexpr.isLambda() && !nexpr.isMethodReference()) {
+      ClassNode child = DecompilerContext.getClassProcessor().getMapRootClasses().get(nexpr.getNewType().value);
+      MethodWrapper wrapper = child.parent.getWrapper().getMethods().getWithKey(child.lambdaInformation.content_method_key);
+
+      Set<Exprent> s = new HashSet<>();
+      wrapper.getOrBuildGraph().iterateExprentsDeep(e -> {
+        if (e.type == Exprent.EXPRENT_FIELD || e.type == Exprent.EXPRENT_NEW)
+          s.add(e);
+        return 0;
+      });
+      return s.stream().allMatch(e -> {
+        switch (e.type) {
+          case Exprent.EXPRENT_FIELD:
+            FieldExprent fe = (FieldExprent)e;
+            if (fe.isStatic() && cl.hasField(fe.getName(), fe.getDescriptor().descriptorString)) {
+              String key = InterpreterUtil.makeUniqueKey(fe.getName(), fe.getDescriptor().descriptorString);
+              if (fe.getInstance() == null && cl.getFields().getIndexByKey(key) > fidx) {
+                return false;
+              }
+            }
+            break;
+          case Exprent.EXPRENT_NEW:
+            return isNewExprentIndependent((NewExprent)e, cl, fidx);
+        }
+
+        return true;
+      });
+    }
+
+    return true;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
index 642a86be9a791759e04cc74ad12ffca4436dfbf6..c79f1a6fc6d13c3e61d877624c18b117a5567ce6 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
@@ -31,18 +31,24 @@ public class FieldExprent extends Exprent {
   private final boolean isStatic;
   private Exprent instance;
   private final FieldDescriptor descriptor;
+  private boolean forceQualified = false;
 
   public FieldExprent(LinkConstant cn, Exprent instance, Set<Integer> bytecodeOffsets) {
     this(cn.elementname, cn.classname, instance == null, instance, FieldDescriptor.parseDescriptor(cn.descriptor), bytecodeOffsets);
   }
 
   public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, Set<Integer> bytecodeOffsets) {
+    this(name, classname, isStatic, instance, descriptor, bytecodeOffsets, false);
+  }
+
+  public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, Set<Integer> bytecodeOffsets, boolean forceQualified) {
     super(EXPRENT_FIELD);
     this.name = name;
     this.classname = classname;
     this.isStatic = isStatic;
     this.instance = instance;
     this.descriptor = descriptor;
+    this.forceQualified = forceQualified;
 
     addBytecodeOffsets(bytecodeOffsets);
   }
@@ -89,7 +95,7 @@ public class FieldExprent extends Exprent {
 
     if (isStatic) {
       ClassNode node = (ClassNode)DecompilerContext.getProperty(DecompilerContext.CURRENT_CLASS_NODE);
-      if (node == null || !classname.equals(node.classStruct.qualifiedName) || isAmbiguous()) {
+      if (node == null || !classname.equals(node.classStruct.qualifiedName) || isAmbiguous() || forceQualified) {
         buf.append(DecompilerContext.getImportCollector().getShortNameInClassContext(ExprProcessor.buildJavaClassName(classname)));
         buf.append(".");
       }
@@ -185,6 +191,10 @@ public class FieldExprent extends Exprent {
     return name;
   }
 
+  public void forceQualified(boolean value) {
+    this.forceQualified = value;
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/testData/classes/pkg/TestClassFields$Inner.class b/testData/classes/pkg/TestClassFields$Inner.class
index 1c16a7e3b3a72a2d00987cd024702775f328a0ae..996ad8e2d4dcbd470e913ca7707356a1f5b0664b 100644
GIT binary patch
delta 134
zcmdnVyq;O=)W2Q(7#J8#7$i6um>C4P7+4qt*%^e{8N?<^c?cOWGB9gsdNML_*d*s<
z=4F=HO{_Iw6rZ?m#pEVNITsEFUIq>ZMg~rx39>*M1X$TNGcaxhG8h@SfFv7On3aKv
Yfe*-IV&G>G1=3tVQDz1q1`!4>05Vh&RR910

delta 138
zcmZ3_ypvh#)W2Q(7#J8#7$i9vm>C4Q7+4sD*cn9F8N??_c}N>EGO%cPYI-s<a3v-u
zrxq8h7#J8ZGB9gsdQL1cV3e4+bcL!M0}}%y&<HlE$juClYk(}EY7ieR$|AtQz{|il
e*^N<El8J#ID9*$nz#s;sxq$M_48jbe3|s(;<PxX=

diff --git a/testData/classes/pkg/TestClassFields.class b/testData/classes/pkg/TestClassFields.class
index e8788e044b56381c8df5b82c7da5c6fa33ec8ee3..8edd958ea46c0d8034e63270391ec62c48603676 100644
GIT binary patch
delta 266
zcmYL@KT^U_7{q@s3BKedK!^&;A0aA;Ru<AQLrG!jJ-keYJ1}F(P{2@d04ndm1v~-c
zhC-X&{oc2`-}?@}g2~~u+XHWm9gdEr8`2B8i-_o#FmS}=rMkB~SRO6IV!HINxGs*v
zETxf9qn<G0DIw!>(KjETuLgho{7$Z%Q@<~iOUj{$xLtb19tL#@o0@uJBd)w`Fe?c|
zOL%d9^a;87v(5>$fqd~}+OsWoP57V4&f7?*YC4rNkn*^d-_u+bJ9WnTUV{4th$<Fh

delta 334
zcmYL_KTZNc6vltEGy8{O71>o(6cJ@{0gH{%Mk~v0Y$yyRA)bH(cm~29Oe}Q^iBS$<
z<q15B@vVh6-}m0UdEfjpkLJ@{etf^KfOAeQRrY;a0S5u?3YNoCI+l>5QjW{E>y!BO
zd`{*U4|<En{3~hJi9%{@grxLC1`I=DHWl&WTE&Z@y1GA8m^AO_3Okuj?`E@ZmSqZ^
z_H#OtTNMZ`E-6x3BvQOt#)vy8<So%{>007S+#S52o}^Ihh<d+=nt<KEt2Y>#z@+EC
z<BWBrM`IJ2QGxr6yLz()p0~umT@n;j{=*u$vbHW9HKC}}7M?_C9O+7)J(-o9N<PN2
GhW!C-@ghk8

diff --git a/testData/results/TestClashName.dec b/testData/results/TestClashName.dec
index 2a9a731549e4bee8fe6ff812211e5a7930252017..43348ea674adf840021a807e16fd231a51939c1d 100644
--- a/testData/results/TestClashName.dec
+++ b/testData/results/TestClashName.dec
@@ -7,25 +7,14 @@ public class TestClashName extends ext.TestClashNameParent implements TestClashN
    int SharedName1 = 0;
    int SharedName4 = 0;
    int SharedName5 = 0;
-   int i;
-   int j;
-   int k;
-   int l;
-   int m;
-   int n;
-   SharedName1 p;
-   SharedName5<SharedName1> q;
-
-   public TestClashName() {
-      this.i = pkg.SharedName1.f;// 59
-      this.j = NonSharedName.f;// 60
-      this.k = SharedName2.f;// 61
-      this.l = pkg.SharedName3.f;// 62
-      this.m = pkg.SharedName1.getF();// 63
-      this.n = NonSharedName.getF();// 64
-      this.p = null;// 65
-      this.q = null;// 67
-   }
+   int i = pkg.SharedName1.f;
+   int j = NonSharedName.f;
+   int k = SharedName2.f;
+   int l = pkg.SharedName3.f;
+   int m = pkg.SharedName1.getF();
+   int n = NonSharedName.getF();
+   SharedName1 p = null;
+   SharedName5<SharedName1> q = null;
 
    @SharedName4
    public int m() {
@@ -42,67 +31,32 @@ public class TestClashName extends ext.TestClashNameParent implements TestClashN
 }
 
 class 'pkg/TestClashName' {
-   method '<init> ()V' {
-      1e      19
-      21      19
-      25      20
-      28      20
-      2c      21
-      2f      21
-      33      22
-      36      22
-      3a      23
-      3d      23
-      41      24
-      44      24
-      48      25
-      49      25
-      4d      26
-      4e      26
-      51      27
-   }
-
    method 'm ()I' {
-      1      31
-      4      31
-      6      32
-      9      32
-      c      33
-      f      33
-      11      34
-      14      34
-      17      35
-      1a      35
-      1d      36
-      1f      36
-      20      36
+      1      20
+      4      20
+      6      21
+      9      21
+      c      22
+      f      22
+      11      23
+      14      23
+      17      24
+      1a      24
+      1d      25
+      1f      25
+      20      25
    }
 
    method 'f ()V' {
-      0      40
+      0      29
    }
 }
 
 Lines mapping:
-59 <-> 20
-60 <-> 21
-61 <-> 22
-62 <-> 23
-63 <-> 24
-64 <-> 25
-65 <-> 26
-67 <-> 27
-73 <-> 32
-74 <-> 33
-75 <-> 34
-76 <-> 35
-77 <-> 36
-78 <-> 37
-82 <-> 41
-Not mapped:
-52
-53
-54
-55
-56
-57
+73 <-> 21
+74 <-> 22
+75 <-> 23
+76 <-> 24
+77 <-> 25
+78 <-> 26
+82 <-> 30
diff --git a/testData/results/TestClassFields.dec b/testData/results/TestClassFields.dec
index ea272ead5c52deca629cb12876748960044559e0..852ae473bdfa591e28aa9b132f9f358ee1fc6eeb 100644
--- a/testData/results/TestClassFields.dec
+++ b/testData/results/TestClassFields.dec
@@ -3,16 +3,14 @@ package pkg;
 public class TestClassFields {
    private static int[] sizes;
    private static String[] names = new String[]{"name1", "name2"};
-   private static final int SIZE;
+   private static final int SIZE = TestClassFields.Inner.staticMutable;
 
    static {
-      sizes = new int[names.length];// 15
-      TestClassFields.Inner.staticMutable = 3;// 17
-      SIZE = TestClassFields.Inner.staticMutable;// 18
-   }// 19
+      sizes = new int[names.length];// 14
+   }// 17
 
    private static class Inner {
-      private static int staticMutable;
+      private static int staticMutable = 3;
    }
 }
 
@@ -21,17 +19,13 @@ class 'pkg/TestClassFields' {
       11      8
       14      8
       17      8
-      1b      9
-      1f      10
-      22      10
-      25      11
+      20      9
    }
 }
 
 Lines mapping:
-15 <-> 9
+14 <-> 9
 17 <-> 10
-18 <-> 11
-19 <-> 12
 Not mapped:
-14
+9
+16
diff --git a/testData/src/pkg/TestClassFields.java b/testData/src/pkg/TestClassFields.java
index 8a77fe0038a8aad333b5004ca17c5d5d6edfa62d..6e31d5c7515e942c26821ad3320a2eb4dfead920 100644
--- a/testData/src/pkg/TestClassFields.java
+++ b/testData/src/pkg/TestClassFields.java
@@ -2,19 +2,17 @@ package pkg;
 
 public class TestClassFields {
   private static class Inner {
-    private static int staticMutable;
+    private static int staticMutable = 3;
   }
 
   private static int[] sizes;
-  private static String[] names;
+  private static String[] names = new String[]{"name1", "name2"};
 
   private static final int SIZE;
 
   static {
-    names = new String[]{"name1", "name2"};
     sizes = new int[names.length];
 
-    Inner.staticMutable = 3;
     SIZE = Inner.staticMutable;
   }
 }
\ No newline at end of file
