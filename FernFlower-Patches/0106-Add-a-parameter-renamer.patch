From 879a4330a3b7e46d9b72a3418e1980138af6f53f Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 25 Oct 2015 14:08:24 -0400
Subject: [PATCH 106/122] Add a parameter renamer

---
 .../jetbrains/java/decompiler/main/ClassWriter.java  | 12 +++++++++++-
 .../main/extern/IAbstractParameterRenamer.java       |  7 +++++++
 2 files changed, 18 insertions(+), 1 deletion(-)
 create mode 100644 src/org/jetbrains/java/decompiler/main/extern/IAbstractParameterRenamer.java

diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 7c8276c..808c5e1 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -18,6 +18,7 @@ package org.jetbrains.java.decompiler.main;
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
+import org.jetbrains.java.decompiler.main.extern.IAbstractParameterRenamer;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.main.rels.ClassWrapper;
@@ -730,6 +731,9 @@ public class ClassWriter {
 
             buffer.append(' ');
             String parameterName = methodWrapper.varproc.getVarName(new VarVersionPair(index, 0));
+            if ((flags & (CodeConstants.ACC_ABSTRACT | CodeConstants.ACC_NATIVE)) != 0) {
+                parameterName = renameParameterIfPossible(parameterName, index, methodWrapper, flags);
+            }
             buffer.append(parameterName == null ? "param" + index : parameterName); // null iff decompiled with errors
 
             firstParameter = false;
@@ -835,7 +839,13 @@ public class ClassWriter {
     return !hideMethod;
   }
 
-  private static void mapLines(TextBuffer code, StructLineNumberTableAttribute table, BytecodeMappingTracer tracer, int startLine) {
+  private String renameParameterIfPossible(String parameterName, int index, MethodWrapper methodWrapper, int flags) {
+    if (DecompilerContext.getProperty("abstractparamrenamer")==null) return parameterName;
+    IAbstractParameterRenamer property = (IAbstractParameterRenamer) DecompilerContext.getProperty("abstractparamrenamer");
+    return property.renameParameter(parameterName, index, methodWrapper, flags);
+}
+
+private static void mapLines(TextBuffer code, StructLineNumberTableAttribute table, BytecodeMappingTracer tracer, int startLine) {
     // build line start offsets map
     HashMap<Integer, Set<Integer>> lineStartOffsets = new HashMap<Integer, Set<Integer>>();
     for (Map.Entry<Integer, Integer> entry : tracer.getMapping().entrySet()) {
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IAbstractParameterRenamer.java b/src/org/jetbrains/java/decompiler/main/extern/IAbstractParameterRenamer.java
new file mode 100644
index 0000000..4c509eb
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/main/extern/IAbstractParameterRenamer.java
@@ -0,0 +1,7 @@
+package org.jetbrains.java.decompiler.main.extern;
+
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
+
+public interface IAbstractParameterRenamer {
+  public String renameParameter(String orig, int index, MethodWrapper wrapper, int flags);
+}
-- 
2.21.0.windows.1

