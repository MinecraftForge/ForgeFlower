From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Apr 2017 15:18:38 -0700
Subject: [PATCH] Convert Exprent.bytecode to a BitMap.

It gives better speed and functionality. Added method to gather bytecode markers for every expression. Allows us to get the bytecode offsets for an entire block of code. Also more aggressively capture bytecode ranges to better understand how much of the code we are processing/outputting

diff --git a/src/org/jetbrains/java/decompiler/code/Instruction.java b/src/org/jetbrains/java/decompiler/code/Instruction.java
index 1a260f2bbd2c593351eb45f345b334045c93ad4c..6d2463f7a97aca61bf0642c9bb4930645a6b96a1 100644
--- a/src/org/jetbrains/java/decompiler/code/Instruction.java
+++ b/src/org/jetbrains/java/decompiler/code/Instruction.java
@@ -2,20 +2,21 @@
 package org.jetbrains.java.decompiler.code;
 
 import org.jetbrains.java.decompiler.util.TextUtil;
+import static org.jetbrains.java.decompiler.code.CodeConstants.*;
 
 public class Instruction implements CodeConstants {
-  public static Instruction create(int opcode, boolean wide, int group, int bytecodeVersion, int[] operands) {
+  public static Instruction create(int opcode, boolean wide, int group, int bytecodeVersion, int[] operands, int length) {
     if (opcode >= opc_ifeq && opcode <= opc_if_acmpne ||
         opcode == opc_ifnull || opcode == opc_ifnonnull ||
         opcode == opc_jsr || opcode == opc_jsr_w ||
         opcode == opc_goto || opcode == opc_goto_w) {
-      return new JumpInstruction(opcode, group, wide, bytecodeVersion, operands);
+      return new JumpInstruction(opcode, group, wide, bytecodeVersion, operands, length);
     }
     else if (opcode == opc_tableswitch || opcode == opc_lookupswitch) {
-      return new SwitchInstruction(opcode, group, wide, bytecodeVersion, operands);
+      return new SwitchInstruction(opcode, group, wide, bytecodeVersion, operands, length);
     }
     else {
-      return new Instruction(opcode, group, wide, bytecodeVersion, operands);
+      return new Instruction(opcode, group, wide, bytecodeVersion, operands, length);
     }
   }
 
@@ -31,15 +32,17 @@ public class Instruction implements CodeConstants {
   public final int group;
   public final boolean wide;
   public final int bytecodeVersion;
+  public final int length;
 
   protected final int[] operands;
 
-  public Instruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands) {
+  public Instruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands, int length) {
     this.opcode = opcode;
     this.group = group;
     this.wide = wide;
     this.bytecodeVersion = bytecodeVersion;
     this.operands = operands;
+    this.length = length;
   }
 
   public void initInstruction(InstructionSequence seq) { }
@@ -82,6 +85,6 @@ public class Instruction implements CodeConstants {
   @Override
   @SuppressWarnings("MethodDoesntCallSuperMethod")
   public Instruction clone() {
-    return create(opcode, wide, group, bytecodeVersion, operands == null ? null : operands.clone());
+    return create(opcode, wide, group, bytecodeVersion, operands == null ? null : operands.clone(), length);
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/code/JumpInstruction.java b/src/org/jetbrains/java/decompiler/code/JumpInstruction.java
index 129df62e7295cbd4145880d2c215d5c1e717ffe6..1597df01326479fd8992af4b6e754dd6223a50e6 100644
--- a/src/org/jetbrains/java/decompiler/code/JumpInstruction.java
+++ b/src/org/jetbrains/java/decompiler/code/JumpInstruction.java
@@ -4,8 +4,8 @@ package org.jetbrains.java.decompiler.code;
 public class JumpInstruction extends Instruction {
   public int destination;
 
-  public JumpInstruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands) {
-    super(opcode, group, wide, bytecodeVersion, operands);
+  public JumpInstruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands, int length) {
+    super(opcode, group, wide, bytecodeVersion, operands, length);
   }
 
   @Override
diff --git a/src/org/jetbrains/java/decompiler/code/SwitchInstruction.java b/src/org/jetbrains/java/decompiler/code/SwitchInstruction.java
index 61810d96bea8e35006df80630e9caf029b33b41c..6379ccadaf4d0b7bf2a4001481b408dd33b3f7bd 100644
--- a/src/org/jetbrains/java/decompiler/code/SwitchInstruction.java
+++ b/src/org/jetbrains/java/decompiler/code/SwitchInstruction.java
@@ -6,8 +6,8 @@ public class SwitchInstruction extends Instruction {
   private int[] values;
   private int defaultDestination;
 
-  public SwitchInstruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands) {
-    super(opcode, group, wide, bytecodeVersion, operands);
+  public SwitchInstruction(int opcode, int group, boolean wide, int bytecodeVersion, int[] operands, int length) {
+    super(opcode, group, wide, bytecodeVersion, operands, length);
   }
 
   @Override
@@ -58,4 +58,4 @@ public class SwitchInstruction extends Instruction {
     copy.values = values.clone();
     return copy;
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java b/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
index 265ffca9a139bd0cb7a4a2e1e68a8f3032939b9a..e89d9e45ac59e28e49a82c1838f24d57f029406b 100644
--- a/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
+++ b/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
@@ -190,4 +190,19 @@ public class BasicBlock implements IGraphNode {
   public List<BasicBlock> getPredExceptions() {
     return predExceptions;
   }
+
+  public int getStartInstruction() {
+      if (seq.isEmpty()) {
+          return 0;
+      }
+      return instrOldOffsets.get(0);
+  }
+
+  public int getEndInstruction() {
+      if (seq.isEmpty()) {
+          return 0;
+      }
+      int end = seq.getLastInstr().length;
+      return end + instrOldOffsets.get(size() -1);
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/main/collectors/BytecodeMappingTracer.java b/src/org/jetbrains/java/decompiler/main/collectors/BytecodeMappingTracer.java
index c6a23b3277c3a93be621d6686b1554d51be01c9b..32ca965883f26cd8944bfb5e838d5cf584142f68 100644
--- a/src/org/jetbrains/java/decompiler/main/collectors/BytecodeMappingTracer.java
+++ b/src/org/jetbrains/java/decompiler/main/collectors/BytecodeMappingTracer.java
@@ -31,10 +31,10 @@ public class BytecodeMappingTracer {
     mapping.putIfAbsent(bytecode_offset, currentSourceLine);
   }
 
-  public void addMapping(Set<Integer> bytecode_offsets) {
+  public void addMapping(BitSet bytecode_offsets) {
     if (bytecode_offsets != null) {
-      for (Integer bytecode_offset : bytecode_offsets) {
-        addMapping(bytecode_offset);
+      for (int i = bytecode_offsets.nextSetBit(0); i >= 0; i = bytecode_offsets.nextSetBit(i+1)) {
+        addMapping(i);
       }
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 3625c482744fe98f41fda3736355c50b7ed514e6..5606e91f5ea92b921d73ea9d85360a8d924c14fc 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -532,7 +532,7 @@ public class NestedClassProcessor {
               if (mapParamsToNewVars.containsKey(varIndex)) {
                 VarVersionPair newVar = mapParamsToNewVars.get(varIndex);
                 method.varproc.getExternalVars().add(newVar);
-                return new VarExprent(newVar.var, method.varproc.getVarType(newVar), method.varproc);
+                return new VarExprent(newVar.var, method.varproc.getVarType(newVar), method.varproc, exprent.bytecode);
               }
             }
             else if (exprent.type == Exprent.EXPRENT_FIELD) {
@@ -543,7 +543,7 @@ public class NestedClassProcessor {
                 //		mapFieldsToNewVars.containsKey(key)) {
                 VarVersionPair newVar = mapFieldsToNewVars.get(key);
                 method.varproc.getExternalVars().add(newVar);
-                return new VarExprent(newVar.var, method.varproc.getVarType(newVar), method.varproc);
+                return new VarExprent(newVar.var, method.varproc.getVarType(newVar), method.varproc, exprent.bytecode);
               }
             }
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
index 7d5c207d5e58028c214db07093a1d16d76fb70a1..5290152d9aefe9d1aa8674325876a9b3fc4b445d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ConcatenationHelper.java
@@ -10,8 +10,8 @@ import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class ConcatenationHelper {
 
@@ -124,7 +124,7 @@ public class ConcatenationHelper {
     return createConcatExprent(lstOperands, expr.bytecode);
   }
 
-  private static Exprent createConcatExprent(List<Exprent> lstOperands, Set<Integer> bytecode) {
+  private static Exprent createConcatExprent(List<Exprent> lstOperands, BitSet bytecode) {
     // build exprent to return
     Exprent func = lstOperands.get(0);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 010566ba18cc005e72ddcbf7eea17f0f533a87d9..6aa061689f525158f31aee3fdcc114ac89f11ae5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -282,7 +282,15 @@ public class ExprProcessor implements CodeConstants {
 
       Instruction instr = seq.getInstr(i);
       Integer bytecode_offset = block.getOldOffset(i);
-      Set<Integer> bytecode_offsets = bytecode_offset >= 0 ? Collections.singleton(bytecode_offset) : null;
+      BitSet bytecode_offsets = null;
+      if (bytecode_offset >= 0) {
+        bytecode_offsets = new BitSet();
+        bytecode_offsets.set(bytecode_offset);
+        int end_offset = block.getOldOffset(i+1);
+        if (end_offset > bytecode_offset) {
+          bytecode_offsets.set(bytecode_offset, end_offset);
+        }
+      }
 
       switch (instr.opcode) {
         case opc_aconst_null:
@@ -322,7 +330,7 @@ public class ExprProcessor implements CodeConstants {
         case opc_fload:
         case opc_dload:
         case opc_aload:
-          pushEx(stack, exprlist, new VarExprent(instr.operand(0), varTypes[instr.opcode - opc_iload], varProcessor, bytecode_offset));
+          pushEx(stack, exprlist, new VarExprent(instr.operand(0), varTypes[instr.opcode - opc_iload], varProcessor, bytecode_offsets));
           break;
         case opc_iaload:
         case opc_laload:
@@ -352,8 +360,11 @@ public class ExprProcessor implements CodeConstants {
         case opc_astore:
           Exprent expr = stack.pop();
           int varindex = instr.operand(0);
+          if (bytecode_offsets != null) { //TODO: Figure out why this nulls in some cases
+            bytecode_offsets.set(bytecode_offset, bytecode_offset + instr.length);
+          }
           AssignmentExprent assign = new AssignmentExprent(
-            new VarExprent(varindex, varTypes[instr.opcode - opc_istore], varProcessor, nextMeaningfulOffset(block, i)), expr, bytecode_offsets);
+            new VarExprent(varindex, varTypes[instr.opcode - opc_istore], varProcessor, bytecode_offsets), expr, bytecode_offsets);
           exprlist.add(assign);
           break;
         case opc_iastore:
@@ -415,7 +426,7 @@ public class ExprProcessor implements CodeConstants {
           pushEx(stack, exprlist, new FunctionExprent(FunctionExprent.FUNCTION_NEG, stack, bytecode_offsets));
           break;
         case opc_iinc:
-          VarExprent vevar = new VarExprent(instr.operand(0), VarType.VARTYPE_INT, varProcessor);
+          VarExprent vevar = new VarExprent(instr.operand(0), VarType.VARTYPE_INT, varProcessor, bytecode_offsets);
           exprlist.add(new AssignmentExprent(vevar, new FunctionExprent(
             instr.operand(1) < 0 ? FunctionExprent.FUNCTION_SUB : FunctionExprent.FUNCTION_ADD, Arrays
             .asList(vevar.copy(), new ConstExprent(VarType.VARTYPE_INT, Math.abs(instr.operand(1)), null)),
@@ -614,23 +625,6 @@ public class ExprProcessor implements CodeConstants {
     }
   }
 
-  private static int nextMeaningfulOffset(BasicBlock block, int index) {
-    InstructionSequence seq = block.getSeq();
-    while (++index < seq.length()) {
-      switch (seq.getInstr(index).opcode) {
-        case opc_nop:
-        case opc_istore:
-        case opc_lstore:
-        case opc_fstore:
-        case opc_dstore:
-        case opc_astore:
-          continue;
-      }
-      return block.getOldOffset(index);
-    }
-    return -1;
-  }
-
   private void pushEx(ExprentStack stack, List<Exprent> exprlist, Exprent exprent) {
     pushEx(stack, exprlist, exprent, null);
   }
@@ -932,4 +926,4 @@ public class ExprProcessor implements CodeConstants {
     return VarType.VARTYPE_INT.isStrictSuperset(type) ||
            type.equals(VarType.VARTYPE_BYTE_OBJ) || type.equals(VarType.VARTYPE_SHORT_OBJ);
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
index bcd6a6c52620e19cf9f7cba7679dfe493ee54528..c3e37329d651b983484736154c6fccbe8b851218 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
@@ -318,6 +318,7 @@ public class FinallyProcessor {
       }
     }
 
+    final int store_length = var <= 3 ? 1 : var <= 128 ? 2 : 4;
     // disable semaphore at statement exit points
     for (BasicBlock block : setTry) {
       List<BasicBlock> lstSucc = block.getSuccs();
@@ -327,8 +328,8 @@ public class FinallyProcessor {
         if (dest != graph.getLast() && !setCopy.contains(dest)) {
           // disable semaphore
           SimpleInstructionSequence seq = new SimpleInstructionSequence();
-          seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}), -1);
-          seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}), -1);
+          seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}, 1), -1);
+          seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}, store_length), -1);
 
           // build a separate block
           BasicBlock newblock = new BasicBlock(++graph.last_id);
@@ -357,8 +358,8 @@ public class FinallyProcessor {
 
     // enable semaphore at the statement entrance
     SimpleInstructionSequence seq = new SimpleInstructionSequence();
-    seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{1}), -1);
-    seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}), -1);
+    seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{1}, 1), -1);
+    seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}, store_length), -1);
 
     BasicBlock newhead = new BasicBlock(++graph.last_id);
     newhead.setSeq(seq);
@@ -367,8 +368,8 @@ public class FinallyProcessor {
 
     // initialize semaphor with false
     seq = new SimpleInstructionSequence();
-    seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}), -1);
-    seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}), -1);
+    seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}, 1), -1);
+    seq.addInstruction(Instruction.create(CodeConstants.opc_istore, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{var}, store_length), -1);
 
     BasicBlock newheadinit = new BasicBlock(++graph.last_id);
     newheadinit.setSeq(seq);
@@ -993,4 +994,4 @@ public class FinallyProcessor {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index ed9f368b5913a7b0316cddd0e40c88d499510fe6..3f351c1c9c1d646854e4dff428c1f065296b1291 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -89,6 +89,12 @@ public class MergeHelper {
           if (ifedge.getType() == StatEdge.TYPE_BREAK) {
             ifexpr.negateIf();
           }
+
+          if (stat.getConditionExprent() != null) {
+            ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
+          }
+          ifexpr.getCondition().addBytecodeOffsets(lastif.getHeadexprent().bytecode);
+
           stat.setConditionExprent(ifexpr.getCondition());
           lastif.getFirst().removeSuccessor(ifedge);
           lastif.removeSuccessor(elseedge);
@@ -143,6 +149,12 @@ public class MergeHelper {
               // negate condition (while header)
               IfExprent ifexpr = (IfExprent)firstif.getHeadexprent().copy();
               ifexpr.negateIf();
+
+              if (stat.getConditionExprent() != null) {
+                ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
+              }
+              ifexpr.getCondition().addBytecodeOffsets(firstif.getHeadexprent().bytecode);
+
               stat.setConditionExprent(ifexpr.getCondition());
 
               // remove edges
@@ -181,7 +193,12 @@ public class MergeHelper {
               stat.setLooptype(DoStatement.LOOP_WHILE);
 
               // no need to negate the while condition
-              stat.setConditionExprent(((IfExprent)firstif.getHeadexprent().copy()).getCondition());
+              IfExprent ifexpr = (IfExprent)firstif.getHeadexprent().copy();
+              if (stat.getConditionExprent() != null) {
+                ifexpr.getCondition().addBytecodeOffsets(stat.getConditionExprent().bytecode);
+              }
+              ifexpr.getCondition().addBytecodeOffsets(firstif.getHeadexprent().bytecode);
+              stat.setConditionExprent(ifexpr.getCondition());
 
               // remove edges
               StatEdge ifedge = firstif.getIfEdge();
@@ -333,9 +350,17 @@ public class MergeHelper {
 
       stat.setLooptype(DoStatement.LOOP_FOR);
       if (hasinit) {
-        stat.setInitExprent(preData.getExprents().remove(preData.getExprents().size() - 1));
+        Exprent exp = preData.getExprents().remove(preData.getExprents().size() - 1);
+        if (stat.getInitExprent() != null) {
+          exp.addBytecodeOffsets(stat.getInitExprent().bytecode);
+        }
+        stat.setInitExprent(exp);
+      }
+      Exprent exp = lastData.getExprents().remove(lastData.getExprents().size() - 1);
+      if (stat.getIncExprent() != null) {
+        exp.addBytecodeOffsets(stat.getIncExprent().bytecode);
       }
-      stat.setIncExprent(lastData.getExprents().remove(lastData.getExprents().size() - 1));
+      stat.setIncExprent(exp);
     }
 
     if (lastData.getExprents().isEmpty()) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
index 72c845f20473ef66ad68ed0a30dbefd8597a6bb6..26f82b92d1b4a972032c05203e8bb642aaba493e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/SimplifyExprentsHelper.java
@@ -638,7 +638,7 @@ public class SimplifyExprentsHelper {
     if (stat.type == Statement.TYPE_IF && stat.getExprents() == null) {
       IfStatement statement = (IfStatement)stat;
       Exprent ifHeadExpr = statement.getHeadexprent();
-      Set<Integer> ifHeadExprBytecode = (ifHeadExpr == null ? null : ifHeadExpr.bytecode);
+      BitSet ifHeadExprBytecode = (ifHeadExpr == null ? null : ifHeadExpr.bytecode);
 
       if (statement.iftype == IfStatement.IFTYPE_IFELSE) {
         Statement ifStatement = statement.getIfstat();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/deobfuscator/ExceptionDeobfuscator.java b/src/org/jetbrains/java/decompiler/modules/decompiler/deobfuscator/ExceptionDeobfuscator.java
index 810291db635243e735195cebd131738904b33de5..26d78392196bdf3033d633d5e9f9a7f45211ffcb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/deobfuscator/ExceptionDeobfuscator.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/deobfuscator/ExceptionDeobfuscator.java
@@ -409,8 +409,8 @@ public class ExceptionDeobfuscator {
 
         // add some dummy instructions to prevent optimizing away the empty block  
         SimpleInstructionSequence seq = new SimpleInstructionSequence();
-        seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}), -1);
-        seq.addInstruction(Instruction.create(CodeConstants.opc_pop, false, CodeConstants.GROUP_GENERAL, bytecode_version, null), -1);
+        seq.addInstruction(Instruction.create(CodeConstants.opc_bipush, false, CodeConstants.GROUP_GENERAL, bytecode_version, new int[]{0}, 1), -1);
+        seq.addInstruction(Instruction.create(CodeConstants.opc_pop, false, CodeConstants.GROUP_GENERAL, bytecode_version, null, 1), -1);
 
         BasicBlock dummyBlock = new BasicBlock(++graph.last_id);
         dummyBlock.setSeq(seq);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
index c1d755183f276c66f087e86b0cf8b0aa4c198f75..a6601eee39bde738f840f01806a13b907583af50 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
@@ -9,6 +9,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
+import java.util.BitSet;
 import java.util.List;
 
 public class AnnotationExprent extends Exprent {
@@ -95,4 +96,10 @@ public class AnnotationExprent extends Exprent {
            InterpreterUtil.equalLists(parNames, ann.parNames) &&
            InterpreterUtil.equalLists(parValues, ann.parValues);
   }
+  
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, parValues);
+    measureBytecode(values);
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
index 753a0a60059ba84b3cb42edf782ab312a18791ca..bf5ff14382c3d5e655778298c87fbe6a8b6592c3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
@@ -9,15 +9,15 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class ArrayExprent extends Exprent {
   private Exprent array;
   private Exprent index;
   private final VarType hardType;
 
-  public ArrayExprent(Exprent array, Exprent index, VarType hardType, Set<Integer> bytecodeOffsets) {
+  public ArrayExprent(Exprent array, Exprent index, VarType hardType, BitSet bytecodeOffsets) {
     super(EXPRENT_ARRAY);
     this.array = array;
     this.index = index;
@@ -109,4 +109,11 @@ public class ArrayExprent extends Exprent {
   public Exprent getIndex() {
     return index;
   }
+  
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, array);
+    measureBytecode(values, index);
+    measureBytecode(values);
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
index 0dcb63d34c036a9cd21e21d77c2ea01f6f5b9266..097c10a32ed819368c48efa51866420c01584395 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
@@ -6,6 +6,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.exps;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 
+import java.util.BitSet;
 import java.util.List;
 
 public class AssertExprent extends Exprent {
@@ -39,4 +40,10 @@ public class AssertExprent extends Exprent {
 
     return buffer;
   }
+
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, parameters);
+    measureBytecode(values);
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
index c590ac5a15ba65b7dfc90cac27e1b34e5d1ffefd..e2768f5f53f670e2189454970d66524b4446021a 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
@@ -15,8 +15,8 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class AssignmentExprent extends Exprent {
 
@@ -40,7 +40,7 @@ public class AssignmentExprent extends Exprent {
   private Exprent right;
   private int condType = CONDITION_NONE;
 
-  public AssignmentExprent(Exprent left, Exprent right, Set<Integer> bytecodeOffsets) {
+  public AssignmentExprent(Exprent left, Exprent right, BitSet bytecodeOffsets) {
     super(EXPRENT_ASSIGNMENT);
     this.left = left;
     this.right = right;
@@ -170,6 +170,13 @@ public class AssignmentExprent extends Exprent {
            condType == as.getCondType();
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, left);
+    measureBytecode(values, right);
+    measureBytecode(values);
+  }
+
   // *****************************************************************************
   // getter and setter methods
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 691d613050f89cce24136dc957a38b65cc51fc4c..e97be6c82f048e553b0e24b9311169ea5626e263 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -36,15 +36,15 @@ public class ConstExprent extends Exprent {
   private final Object value;
   private final boolean boolPermitted;
 
-  public ConstExprent(int val, boolean boolPermitted, Set<Integer> bytecodeOffsets) {
+  public ConstExprent(int val, boolean boolPermitted, BitSet bytecodeOffsets) {
     this(guessType(val, boolPermitted), val, boolPermitted, bytecodeOffsets);
   }
 
-  public ConstExprent(VarType constType, Object value, Set<Integer> bytecodeOffsets) {
+  public ConstExprent(VarType constType, Object value, BitSet bytecodeOffsets) {
     this(constType, value, false, bytecodeOffsets);
   }
 
-  private ConstExprent(VarType constType, Object value, boolean boolPermitted, Set<Integer> bytecodeOffsets) {
+  private ConstExprent(VarType constType, Object value, boolean boolPermitted, BitSet bytecodeOffsets) {
     super(EXPRENT_CONST);
     this.constType = constType;
     this.value = value;
@@ -403,6 +403,11 @@ public class ConstExprent extends Exprent {
     return boolPermitted;
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values);
+  }
+  
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
index b3cc07de2a2ef613de320e120e2f0957aed4cbbd..61b29a83579f85aaba32dd0e432de825a106457d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
@@ -17,8 +17,8 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class ExitExprent extends Exprent {
 
@@ -29,7 +29,7 @@ public class ExitExprent extends Exprent {
   private Exprent value;
   private final VarType retType;
 
-  public ExitExprent(int exitType, Exprent value, VarType retType, Set<Integer> bytecodeOffsets) {
+  public ExitExprent(int exitType, Exprent value, VarType retType, BitSet bytecodeOffsets) {
     super(EXPRENT_EXIT);
     this.exitType = exitType;
     this.value = value;
@@ -141,6 +141,13 @@ public class ExitExprent extends Exprent {
     return retType;
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, value);
+    measureBytecode(values);
+  }
+
+  
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index 0994d9466eda95b46d3f234bf977e8e9aa0e0899..7183241d331031e66f1afca8bce8feffa985e7a2 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -16,7 +16,7 @@ import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 
 import java.util.ArrayList;
-import java.util.Collection;
+import java.util.BitSet;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashSet;
@@ -24,7 +24,7 @@ import java.util.List;
 import java.util.Map.Entry;
 import java.util.Set;
 
-public class Exprent implements IMatchable {
+public abstract class Exprent implements IMatchable {
   public static final int MULTIPLE_USES = 1;
   public static final int SIDE_EFFECTS_FREE = 2;
   public static final int BOTH_FLAGS = 3;
@@ -46,7 +46,7 @@ public class Exprent implements IMatchable {
 
   public final int type;
   public final int id;
-  public Set<Integer> bytecode = null;  // offsets of bytecode instructions decompiled to this exprent
+  public BitSet bytecode = null;  // offsets of bytecode instructions decompiled to this exprent
 
   public Exprent(int type) {
     this.type = type;
@@ -123,14 +123,31 @@ public class Exprent implements IMatchable {
 
   public void replaceExprent(Exprent oldExpr, Exprent newExpr) { }
 
-  public void addBytecodeOffsets(Collection<Integer> bytecodeOffsets) {
-    if (bytecodeOffsets != null && !bytecodeOffsets.isEmpty()) {
+  public void addBytecodeOffsets(BitSet bytecodeOffsets) {
+    if (bytecodeOffsets != null) {
       if (bytecode == null) {
-        bytecode = new HashSet<>(bytecodeOffsets);
-      }
-      else {
-        bytecode.addAll(bytecodeOffsets);
+        bytecode = new BitSet();
       }
+      bytecode.or(bytecodeOffsets);
+    }
+  }
+
+  public abstract void getBytecodeRange(BitSet values);
+
+  protected void measureBytecode(BitSet values) {
+    if (bytecode != null)
+      values.or(bytecode);
+  }
+
+  protected static void measureBytecode(BitSet values, Exprent exprent) {
+    if (exprent != null)
+      exprent.getBytecodeRange(values);
+  }
+
+  protected static void measureBytecode(BitSet values, List<? extends Exprent> list) {
+    if (list != null && !list.isEmpty()) {
+      for (Exprent e : list)
+        e.getBytecodeRange(values);
     }
   }
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
index c79f1a6fc6d13c3e61d877624c18b117a5567ce6..45b9f87924ca6d651fb2ab0a4671eb95cdb696fd 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
@@ -22,8 +22,8 @@ import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.util.TextUtil;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class FieldExprent extends Exprent {
   private final String name;
@@ -33,15 +33,15 @@ public class FieldExprent extends Exprent {
   private final FieldDescriptor descriptor;
   private boolean forceQualified = false;
 
-  public FieldExprent(LinkConstant cn, Exprent instance, Set<Integer> bytecodeOffsets) {
+  public FieldExprent(LinkConstant cn, Exprent instance, BitSet bytecodeOffsets) {
     this(cn.elementname, cn.classname, instance == null, instance, FieldDescriptor.parseDescriptor(cn.descriptor), bytecodeOffsets);
   }
 
-  public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, Set<Integer> bytecodeOffsets) {
+  public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, BitSet bytecodeOffsets) {
     this(name, classname, isStatic, instance, descriptor, bytecodeOffsets, false);
   }
 
-  public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, Set<Integer> bytecodeOffsets, boolean forceQualified) {
+  public FieldExprent(String name, String classname, boolean isStatic, Exprent instance, FieldDescriptor descriptor, BitSet bytecodeOffsets, boolean forceQualified) {
     super(EXPRENT_FIELD);
     this.name = name;
     this.classname = classname;
@@ -195,6 +195,12 @@ public class FieldExprent extends Exprent {
     this.forceQualified = value;
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, instance);
+    measureBytecode(values);
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
index 6bdd8dbe64e8fc562952e63f424b562d9bbc17b0..53b7403a24707b5719aeec34bfba8391c664b502 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
@@ -186,7 +186,7 @@ public class FunctionExprent extends Exprent {
   private VarType implicitType;
   private final List<Exprent> lstOperands;
 
-  public FunctionExprent(int funcType, ListStack<Exprent> stack, Set<Integer> bytecodeOffsets) {
+  public FunctionExprent(int funcType, ListStack<Exprent> stack, BitSet bytecodeOffsets) {
     this(funcType, new ArrayList<>(), bytecodeOffsets);
 
     if (funcType >= FUNCTION_BIT_NOT && funcType <= FUNCTION_PPI && funcType != FUNCTION_CAST && funcType != FUNCTION_INSTANCEOF) {
@@ -202,7 +202,7 @@ public class FunctionExprent extends Exprent {
     }
   }
 
-  public FunctionExprent(int funcType, List<Exprent> operands, Set<Integer> bytecodeOffsets) {
+  public FunctionExprent(int funcType, List<Exprent> operands, BitSet bytecodeOffsets) {
     super(EXPRENT_FUNCTION);
     this.funcType = funcType;
     this.lstOperands = operands;
@@ -210,7 +210,7 @@ public class FunctionExprent extends Exprent {
     addBytecodeOffsets(bytecodeOffsets);
   }
 
-  public FunctionExprent(int funcType, Exprent operand, Set<Integer> bytecodeOffsets) {
+  public FunctionExprent(int funcType, Exprent operand, BitSet bytecodeOffsets) {
     this(funcType, new ArrayList<>(1), bytecodeOffsets);
     lstOperands.add(operand);
   }
@@ -600,6 +600,12 @@ public class FunctionExprent extends Exprent {
     this.implicitType = implicitType;
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, lstOperands);
+    measureBytecode(values);
+  }
+  
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
index 32dd0ba62d28eb445ccae63f8d688b6a3d41404f..f9177d5f5f7991637bb793cdf479b6af63dcf414 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
@@ -10,6 +10,7 @@ import org.jetbrains.java.decompiler.util.ListStack;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
 import java.util.Set;
 
@@ -64,7 +65,7 @@ public class IfExprent extends Exprent {
 
   private Exprent condition;
 
-  public IfExprent(int ifType, ListStack<Exprent> stack, Set<Integer> bytecodeOffsets) {
+  public IfExprent(int ifType, ListStack<Exprent> stack, BitSet bytecodeOffsets) {
     this(null, bytecodeOffsets);
 
     if (ifType <= IF_LE) {
@@ -82,7 +83,7 @@ public class IfExprent extends Exprent {
     }
   }
 
-  private IfExprent(Exprent condition, Set<Integer> bytecodeOffsets) {
+  private IfExprent(Exprent condition, BitSet bytecodeOffsets) {
     super(EXPRENT_IF);
     this.condition = condition;
 
@@ -135,4 +136,10 @@ public class IfExprent extends Exprent {
   public void setCondition(Exprent condition) {
     this.condition = condition;
   }
-}
\ No newline at end of file
+
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, condition);
+    measureBytecode(values);
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index 3fe26b38b93b72d776e506b6158cb7968270d7c2..87522af363670f27a69bf5dee95a954ae14ed594 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -65,7 +65,7 @@ public class InvocationExprent extends Exprent {
                            LinkConstant cn,
                            List<PooledConstant> bootstrapArguments,
                            ListStack<? extends Exprent> stack,
-                           Set<Integer> bytecodeOffsets) {
+                           BitSet bytecodeOffsets) {
     this();
 
     name = cn.elementname;
@@ -618,6 +618,13 @@ public class InvocationExprent extends Exprent {
     return bootstrapArguments;
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, lstParameters);
+    measureBytecode(values, instance);
+    measureBytecode(values);
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
index 4172874fff5ab1323bb477bbf3cdd5710a197945..380f47a9de0e1b9d342d5c8557175d7e5a6b1e8a 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
@@ -8,8 +8,8 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class MonitorExprent extends Exprent {
 
@@ -19,7 +19,7 @@ public class MonitorExprent extends Exprent {
   private final int monType;
   private Exprent value;
 
-  public MonitorExprent(int monType, Exprent value, Set<Integer> bytecodeOffsets) {
+  public MonitorExprent(int monType, Exprent value, BitSet bytecodeOffsets) {
     super(EXPRENT_MONITOR);
     this.monType = monType;
     this.value = value;
@@ -75,4 +75,10 @@ public class MonitorExprent extends Exprent {
   public Exprent getValue() {
     return value;
   }
+
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, value);
+    measureBytecode(values);
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index e946c9a285276d946475add0803bfa789ccdd155..7914279296b8aaa495f85bed6439676c15963411 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -20,8 +20,9 @@ import org.jetbrains.java.decompiler.util.ListStack;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
+import java.util.Collections;
 import java.util.List;
-import java.util.Set;
 
 public class NewExprent extends Exprent {
   private InvocationExprent constructor;
@@ -34,11 +35,11 @@ public class NewExprent extends Exprent {
   private boolean lambda;
   private boolean enumConst;
 
-  public NewExprent(VarType newType, ListStack<Exprent> stack, int arrayDim, Set<Integer> bytecodeOffsets) {
+  public NewExprent(VarType newType, ListStack<Exprent> stack, int arrayDim, BitSet bytecodeOffsets) {
     this(newType, getDimensions(arrayDim, stack), bytecodeOffsets);
   }
 
-  public NewExprent(VarType newType, List<Exprent> lstDims, Set<Integer> bytecodeOffsets) {
+  public NewExprent(VarType newType, List<Exprent> lstDims, BitSet bytecodeOffsets) {
     super(EXPRENT_NEW);
     this.newType = newType;
     this.lstDims = lstDims;
@@ -438,6 +439,14 @@ public class NewExprent extends Exprent {
            InterpreterUtil.equalLists(lstArrayElements, ne.getLstArrayElements());
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values, lstArrayElements);
+    measureBytecode(values, lstDims);
+    measureBytecode(values, constructor);
+    measureBytecode(values);
+  }
+
   public InvocationExprent getConstructor() {
     return constructor;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
index 3a97175bf6ff44f745e9d4738a34aae2b4d05437..81f7546312493c244636b50fa972c0a3817b9aed 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
@@ -10,15 +10,15 @@ import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
-import java.util.Set;
 
 public class SwitchExprent extends Exprent {
 
   private Exprent value;
   private List<List<Exprent>> caseValues = new ArrayList<>();
 
-  public SwitchExprent(Exprent value, Set<Integer> bytecodeOffsets) {
+  public SwitchExprent(Exprent value, BitSet bytecodeOffsets) {
     super(EXPRENT_SWITCH);
     this.value = value;
 
@@ -100,6 +100,22 @@ public class SwitchExprent extends Exprent {
     return InterpreterUtil.equalObjects(value, sw.getValue());
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    if (caseValues != null && !caseValues.isEmpty()) {
+      for (List<Exprent> l : caseValues) {
+        if (l != null && !l.isEmpty()) {
+          for (Exprent e : l) {
+            if (e != null)
+              e.getBytecodeRange(values);
+          }
+        }
+      }
+    }
+    measureBytecode(values, value);
+    measureBytecode(values);
+  }
+
   public Exprent getValue() {
     return value;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index f30082ee0cfb054456d81f57658e8cc73ce206f1..e3b253c9526436c1dab974cac21680a571998f43 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -27,6 +27,7 @@ import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.util.TextUtil;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
 
 public class VarExprent extends Exprent {
@@ -38,21 +39,20 @@ public class VarExprent extends Exprent {
   private VarType varType;
   private boolean definition = false;
   private final VarProcessor processor;
-  private final int visibleOffset;
   private int version = 0;
   private boolean classDef = false;
   private boolean stack = false;
 
   public VarExprent(int index, VarType varType, VarProcessor processor) {
-    this(index, varType, processor, -1);
+    this(index, varType, processor, null);
   }
 
-  public VarExprent(int index, VarType varType, VarProcessor processor, int visibleOffset) {
+  public VarExprent(int index, VarType varType, VarProcessor processor, BitSet bytecode) {
     super(EXPRENT_VAR);
     this.index = index;
     this.varType = varType;
     this.processor = processor;
-    this.visibleOffset = visibleOffset;
+    this.addBytecodeOffsets(bytecode);
   }
 
   @Override
@@ -72,7 +72,7 @@ public class VarExprent extends Exprent {
 
   @Override
   public Exprent copy() {
-    VarExprent var = new VarExprent(index, getVarType(), processor, visibleOffset);
+    VarExprent var = new VarExprent(index, getVarType(), processor, bytecode);
     var.setDefinition(definition);
     var.setVersion(version);
     var.setClassDef(classDef);
@@ -121,7 +121,7 @@ public class VarExprent extends Exprent {
     if (attr != null && processor != null) {
       Integer origIndex = processor.getVarOriginalIndex(index);
       if (origIndex != null) {
-        String name = attr.getName(origIndex, visibleOffset);
+        String name = attr.getName(origIndex, bytecode == null ? -1 : bytecode.nextSetBit(0));
         if (name != null && TextUtil.isValidIdentifier(name, method.getClassStruct().getBytecodeVersion())) {
           return name;
         }
@@ -138,6 +138,7 @@ public class VarExprent extends Exprent {
         if (processor != null) {
           originalIndex = processor.getVarOriginalIndex(index);
         }
+        int visibleOffset = bytecode == null ? -1 : bytecode.length();
         if (originalIndex != null) {
           // first try from signature
           if (DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
@@ -182,6 +183,11 @@ public class VarExprent extends Exprent {
            InterpreterUtil.equalObjects(getVarType(), ve.getVarType()); // FIXME: varType comparison redundant?
   }
 
+  @Override
+  public void getBytecodeRange(BitSet values) {
+    measureBytecode(values);
+  }
+
   public int getIndex() {
     return index;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
index 262a01f7e3d64235423a7b2e5ed915ff057c9355..cf79818c542c47c6c1e128197dce3061002dcdb8 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
@@ -10,6 +10,7 @@ import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.util.TextBuffer;
+import org.jetbrains.java.decompiler.util.StartEndPair;
 
 public class BasicBlockStatement extends Statement {
 
@@ -84,4 +85,13 @@ public class BasicBlockStatement extends Statement {
   public BasicBlock getBlock() {
     return block;
   }
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    if (block.size() > 0) {
+      return new StartEndPair(block.getStartInstruction(), block.getEndInstruction());
+    } else {
+      return new StartEndPair(0, 0);
+    }
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DummyExitStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DummyExitStatement.java
index c1d4530d9264e3ab97563ab0541d9d674c7c130d..5fc00b45371c373f2a60cff44e04e9e2b789981d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DummyExitStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DummyExitStatement.java
@@ -1,25 +1,21 @@
 // Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 package org.jetbrains.java.decompiler.modules.decompiler.stats;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.BitSet;
 
 public class DummyExitStatement extends Statement {
-  public Set<Integer> bytecode = null;  // offsets of bytecode instructions mapped to dummy exit
+  public BitSet bytecode = null;  // offsets of bytecode instructions mapped to dummy exit
 
   public DummyExitStatement() {
     type = Statement.TYPE_DUMMYEXIT;
   }
 
-  public void addBytecodeOffsets(Collection<Integer> bytecodeOffsets) {
+  public void addBytecodeOffsets(BitSet bytecodeOffsets) {
     if (bytecodeOffsets != null && !bytecodeOffsets.isEmpty()) {
       if (bytecode == null) {
-        bytecode = new HashSet<>(bytecodeOffsets);
-      }
-      else {
-        bytecode.addAll(bytecodeOffsets);
+        bytecode = new BitSet();
       }
+      bytecode.or(bytecodeOffsets);
     }
   }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
index bf18c51ae7be623619ecf734fc70d870232c8f74..3b5d0d254e7325eaed110434744f29201c6229b6 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
@@ -11,6 +11,7 @@ import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.util.TextBuffer;
+import org.jetbrains.java.decompiler.util.StartEndPair;
 import org.jetbrains.java.decompiler.util.TextUtil;
 
 import java.util.ArrayList;
@@ -408,6 +409,13 @@ public class IfStatement extends Statement {
     return elseedge;
   }
 
+  @Override
+  public StartEndPair getStartEndRange() {
+    return StartEndPair.join(super.getStartEndRange(), 
+      ifstat != null ? ifstat.getStartEndRange() : null, 
+      elsestat != null ? elsestat.getStartEndRange(): null);
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
index 61eca33c037cb575b1b6df2addd1ffcdf2aa671b..8649444b62e0d98aa08ecc1276fc8602ea42dcdc 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
@@ -4,6 +4,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.stats;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.util.TextBuffer;
+import org.jetbrains.java.decompiler.util.StartEndPair;
 
 public class RootStatement extends Statement {
   private final DummyExitStatement dummyExit;
@@ -26,4 +27,9 @@ public class RootStatement extends Statement {
   public DummyExitStatement getDummyExit() {
     return dummyExit;
   }
-}
\ No newline at end of file
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    return StartEndPair.join(first.getStartEndRange(), dummyExit != null ? dummyExit.getStartEndRange() : null);
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index b905da55c9b3bd7dc48123559809a1d7ed9eaf9c..74f44c077c0985fa23145f39d617976f94571f55 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -16,6 +16,7 @@ import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
+import org.jetbrains.java.decompiler.util.StartEndPair;
 import org.jetbrains.java.decompiler.util.VBStyleCollection;
 
 import java.util.*;
@@ -835,6 +836,40 @@ public class Statement implements IMatchable {
     return id.toString();
   }
 
+  //TODO: Cleanup/cache?
+  public void getOffset(BitSet values) {
+    if (this instanceof DummyExitStatement && ((DummyExitStatement)this).bytecode != null)
+      values.or(((DummyExitStatement)this).bytecode);
+    if (this.getExprents() != null) {
+      for (Exprent e : this.getExprents()) {
+        e.getBytecodeRange(values);
+      }
+    } else {
+      for (Object obj : this.getSequentialObjects()) {
+        if (obj == null) {
+          //Humm? Skip it
+        } else if (obj instanceof Statement) {
+          ((Statement)obj).getOffset(values);
+        } else if (obj instanceof Exprent) {
+          ((Exprent)obj).getBytecodeRange(values);
+        } else {
+          System.out.println("WTF?" + obj.getClass());
+        }
+      }
+    }
+  }
+
+  private StartEndPair endpoints;
+  public StartEndPair getStartEndRange() {
+    if (endpoints == null) {
+      BitSet set = new BitSet();
+      getOffset(set);
+      endpoints = new StartEndPair(set.nextSetBit(0), set.length() - 1);
+    }
+    return endpoints;
+  }
+
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
index e14648190ba6e309992149b9a60105a53caacf9f..0f12b13c14272a923540ff71f59b41b1b1295f07 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
@@ -16,6 +16,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.exps.FieldExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.SwitchExprent;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.util.TextBuffer;
+import org.jetbrains.java.decompiler.util.StartEndPair;
 
 import java.util.*;
 
@@ -208,6 +209,17 @@ public class SwitchStatement extends Statement {
     sortEdgesAndNodes();
   }
 
+  @Override
+  public StartEndPair getStartEndRange() {
+    StartEndPair[] sepairs = new StartEndPair[caseStatements.size() + 1];
+    int i = 0;
+    sepairs[i++] = super.getStartEndRange();
+    for (Statement st : caseStatements) {
+      sepairs[i++] = st.getStartEndRange();
+    }
+    return StartEndPair.join(sepairs);
+  }
+
   // *****************************************************************************
   // private methods
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/struct/StructMethod.java b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
index 859805c20928564c3388e2593b80ac233599d8b3..dbfcc2cd5cb3cf326612bbc0f6496b83d5992de2 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructMethod.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
@@ -313,11 +313,11 @@ public class StructMethod extends StructMember {
         }
       }
 
-      Instruction instr = Instruction.create(opcode, wide, group, bytecode_version, ops);
+      i++;
 
-      instructions.addWithKey(instr, offset);
+      Instruction instr = Instruction.create(opcode, wide, group, bytecode_version, ops, i - offset);
 
-      i++;
+      instructions.addWithKey(instr, offset);
     }
 
     // initialize exception table
@@ -387,4 +387,4 @@ public class StructMethod extends StructMember {
   public String toString() {
     return name;
   }
-}
\ No newline at end of file
+}
diff --git a/src/org/jetbrains/java/decompiler/util/StartEndPair.java b/src/org/jetbrains/java/decompiler/util/StartEndPair.java
new file mode 100644
index 0000000000000000000000000000000000000000..ded36aadd72242ba74e3392e0891c6c82ac6b920
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/util/StartEndPair.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.util;
+
+public class StartEndPair {
+  public final int start;
+  public final int end;
+  public StartEndPair(int start, int end) {
+    this.start = start;
+    this.end = end;
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    return ((StartEndPair)obj).start == start && ((StartEndPair)obj).end == end;
+  }
+
+  @Override
+  public int hashCode() {
+    return start * 31 + end;
+  }
+
+  @Override
+  public String toString() {
+    return String.format("%d->%d",start,end);
+  }
+
+  public static StartEndPair join(StartEndPair... pairs) {
+    int start = Integer.MAX_VALUE;
+    int end = Integer.MIN_VALUE;
+    for (StartEndPair pair : pairs) {
+        if (pair == null) continue;
+        start = Math.min(start, pair.start);
+        end = Math.max(end, pair.end);
+    }
+    return new StartEndPair(start, end);
+  }
+}
diff --git a/testData/results/InvalidMethodSignature.dec b/testData/results/InvalidMethodSignature.dec
index e4b567c433b4a80e0c01119a8f115611dffe93be..ce8afaba80cd2197e1831af1af6be13da86962cb 100644
--- a/testData/results/InvalidMethodSignature.dec
+++ b/testData/results/InvalidMethodSignature.dec
@@ -26,19 +26,51 @@ class i implements bg {
 
 class 'a/a/a/a/e/f/i' {
    method '<init> (La/a/a/a/e/f/b;La/a/a/a/c/j;)V' {
+      0      13
+      1      13
       2      13
+      3      13
+      4      13
+      5      14
+      6      14
       7      14
+      8      14
+      9      14
       e      15
    }
 
    method 'a (La/a/a/a/c/c;La/a/a/a/a/k;Z)V' {
+      0      18
       1      18
+      2      18
+      3      18
       4      18
+      5      18
+      6      18
+      7      18
+      8      18
+      9      18
       a      18
+      b      18
+      c      18
+      d      18
+      e      18
       f      18
+      10      18
+      11      19
       12      19
+      13      19
+      14      19
       15      19
+      16      19
+      17      19
+      18      19
+      19      19
       1a      19
+      1b      19
+      1c      19
+      1d      19
+      1e      19
       20      20
    }
 
diff --git a/testData/results/TestAbstractMethods.dec b/testData/results/TestAbstractMethods.dec
index 781cbfcf0bf85491e31f60dc3087d3106436ed1b..c0e60eb5262ee228d5eb57719bd4caddc8c90651 100644
--- a/testData/results/TestAbstractMethods.dec
+++ b/testData/results/TestAbstractMethods.dec
@@ -16,12 +16,18 @@ public abstract class TestAbstractMethods {
 
 class 'pkg/TestAbstractMethods' {
    method 'test (I)I' {
+      0      6
       1      6
    }
 
    method 'test2 (Ljava/lang/String;)V' {
       0      12
+      1      12
+      2      12
+      3      12
       4      12
+      5      12
+      6      12
       7      13
    }
 }
diff --git a/testData/results/TestAccessReplace.dec b/testData/results/TestAccessReplace.dec
index f365126e79b21d9cc1d59591a00f219bf0755424..83d1eb2fac3378e5d556aeeebc70bb83a4e5cba8 100644
--- a/testData/results/TestAccessReplace.dec
+++ b/testData/results/TestAccessReplace.dec
@@ -15,7 +15,7 @@ public class TestAccessReplace {
 
    public class Inner {
       public Inner(String b) {
-         TestAccessReplace.fooS();// 26
+         TestAccessReplace.fooS();// 25
          TestAccessReplace.this.foo();// 27
          TestAccessReplace.fooSParams(1L, 2L);// 28
          TestAccessReplace.this.fooParams(1L, 2L);// 29
@@ -43,14 +43,22 @@ class 'pkg/TestAccessReplace' {
 
 class 'pkg/TestAccessReplace$Inner' {
    method '<init> (Lpkg/TestAccessReplace;Ljava/lang/String;)V' {
-      9      17
-      d      18
+      0      17
+      1      17
+      2      17
+      3      18
+      4      19
+      5      20
+      c      18
       10      19
       11      19
-      14      19
+      12      19
+      13      19
+      17      20
       18      20
       19      20
-      1c      20
+      1a      20
+      1b      20
       1f      21
    }
 }
@@ -60,10 +68,10 @@ Lines mapping:
 20 <-> 8
 21 <-> 11
 22 <-> 14
-26 <-> 18
+25 <-> 18
 27 <-> 19
 28 <-> 20
 29 <-> 21
 30 <-> 22
 Not mapped:
-25
+26
diff --git a/testData/results/TestAmbiguousCall.dec b/testData/results/TestAmbiguousCall.dec
index a48730dcfb207c76a0959c5c34d59c5d3d503897..dec7ba0f20eecdc5a3c7d0774a0fdd4f3b68e6f6 100644
--- a/testData/results/TestAmbiguousCall.dec
+++ b/testData/results/TestAmbiguousCall.dec
@@ -28,16 +28,38 @@ class 'pkg/TestAmbiguousCall' {
 
    method 'test ()V' {
       7      10
+      8      11
+      9      11
       a      11
+      b      11
       c      11
+      d      11
+      e      11
+      f      12
+      10      12
       11      12
+      12      12
       13      12
+      14      12
+      15      12
       1d      13
+      1e      14
+      1f      14
       20      14
+      21      14
       22      14
+      23      14
+      24      14
+      25      15
+      26      15
       27      15
+      28      15
+      29      15
       2a      15
+      2b      15
       2c      15
+      2d      15
+      2e      15
       2f      16
    }
 }
diff --git a/testData/results/TestAmbiguousCallWithDebugInfo.dec b/testData/results/TestAmbiguousCallWithDebugInfo.dec
index b697e795761f0f254e341663f4934e06ae3af8ef..e873e7e3cc488b036a46c332bd724e3fac30f720 100644
--- a/testData/results/TestAmbiguousCallWithDebugInfo.dec
+++ b/testData/results/TestAmbiguousCallWithDebugInfo.dec
@@ -28,16 +28,38 @@ class 'pkg/TestAmbiguousCall' {
 
    method 'test ()V' {
       7      10
+      8      11
+      9      11
       a      11
+      b      11
       c      11
+      d      11
+      e      11
+      f      12
+      10      12
       11      12
+      12      12
       13      12
+      14      12
+      15      12
       1d      13
+      1e      14
+      1f      14
       20      14
+      21      14
       22      14
+      23      14
+      24      14
+      25      15
+      26      15
       27      15
+      28      15
+      29      15
       2a      15
+      2b      15
       2c      15
+      2d      15
+      2e      15
       2f      16
    }
 }
diff --git a/testData/results/TestAnonymousClass.dec b/testData/results/TestAnonymousClass.dec
index 14c92f960012ea63747096f9237fca7ee5e70ced..b86b5fdcf18f733f846dd2cb4d5796d8046cf965 100644
--- a/testData/results/TestAnonymousClass.dec
+++ b/testData/results/TestAnonymousClass.dec
@@ -46,12 +46,12 @@ public abstract class TestAnonymousClass {
 
    void foo(int var1) throws Exception {
       if (var1 > 0) {// 10
-         TestAnonymousClass.I var2 = new TestAnonymousClass.I() {
+         TestAnonymousClass.I var2 = new TestAnonymousClass.I() {// 11
             public void foo() throws Exception {
                boolean var1 = true;// 13
                boolean var2 = true;// 14
             }// 15
-         };// 11
+         };
          var2.foo();// 17
       } else {
          System.out.println(5);// 21
@@ -158,10 +158,18 @@ class 'pkg/TestAnonymousClass$1' {
 
 class 'pkg/TestAnonymousClass' {
    method 'foo (I)V' {
+      0      47
       1      47
-      c      53
+      c      48
+      d      54
       e      54
+      f      54
+      10      54
+      11      54
+      12      54
       16      56
+      17      56
+      18      56
       19      56
       1a      56
       1d      59
@@ -192,7 +200,11 @@ class 'pkg/TestAnonymousClass$Inner$1' {
 
 class 'pkg/TestAnonymousClass$InnerRecursive' {
    method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
+      4      86
+      5      86
       6      86
+      7      86
+      8      86
       9      87
    }
 
@@ -203,7 +215,7 @@ class 'pkg/TestAnonymousClass$InnerRecursive' {
 
 Lines mapping:
 10 <-> 48
-11 <-> 54
+11 <-> 49
 13 <-> 51
 14 <-> 52
 15 <-> 53
diff --git a/testData/results/TestAnonymousClassConstructor.dec b/testData/results/TestAnonymousClassConstructor.dec
index 63abd4acbe8cf73eb9628724b632af1a9ca231a3..e0ab2c8e78b4489495c36623c734ca58c68fccd4 100644
--- a/testData/results/TestAnonymousClassConstructor.dec
+++ b/testData/results/TestAnonymousClassConstructor.dec
@@ -117,139 +117,207 @@ class TestAnonymousClassConstructor {
 class 'pkg/TestAnonymousClassConstructor' {
    method 'innerPrivateString ()V' {
       5      4
+      6      4
       b      6
    }
 
    method 'innerPrivate ()V' {
       5      9
+      6      9
+      7      9
       8      9
       d      11
    }
 
    method 'innerStaticPrivateString ()V' {
       5      14
+      6      14
       b      16
    }
 
    method 'innerStaticPrivate ()V' {
       5      19
+      6      19
+      7      19
       8      19
       d      21
    }
 
    method 'innerStaticPrivateStringStatic ()V' {
       4      24
+      5      24
       a      26
    }
 
    method 'innerStaticPrivateStatic ()V' {
       4      29
+      5      29
+      6      29
       7      29
       c      31
    }
 
    method 'innerPublicString ()V' {
       5      34
+      6      34
       b      36
    }
 
    method 'innerPublic ()V' {
       5      39
+      6      39
+      7      39
       8      39
       d      41
    }
 
    method 'innerStaticPublicString ()V' {
       5      44
+      6      44
       b      46
    }
 
    method 'innerStaticPublic ()V' {
       5      49
+      6      49
+      7      49
       8      49
       d      51
    }
 
    method 'innerStaticPublicStringStatic ()V' {
       4      54
+      5      54
       a      56
    }
 
    method 'innerStaticPublicStatic ()V' {
       4      59
+      5      59
+      6      59
       7      59
       c      61
    }
 
    method 'n (Ljava/lang/String;)V' {
       0      64
+      1      64
+      2      64
       a      64
+      b      64
+      f      64
       13      64
+      14      64
+      15      64
       16      64
+      17      64
+      18      64
       19      65
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerPrivate' {
    method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
+      10      69
       14      69
+      15      69
+      19      69
+      1a      69
       1e      69
+      1f      69
+      20      69
       21      69
+      22      69
+      23      69
       24      70
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerPrivateString' {
    method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
+      9      75
       a      75
+      b      75
+      c      75
       d      76
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerPublic' {
    method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
+      10      81
       14      81
+      15      81
+      19      81
+      1a      81
       1e      81
+      1f      81
+      20      81
       21      81
+      22      81
+      23      81
       24      82
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerPublicString' {
    method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
+      9      87
       a      87
+      b      87
+      c      87
       d      88
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerStaticPrivate' {
    method '<init> (JI)V' {
+      b      93
       f      93
+      10      93
+      14      93
       18      93
+      19      93
+      1a      93
       1b      93
+      1c      93
+      1d      93
       1e      94
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerStaticPrivateString' {
    method '<init> (Ljava/lang/String;)V' {
+      4      99
       5      99
+      6      99
+      7      99
       8      100
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerStaticPublic' {
    method '<init> (JI)V' {
+      b      105
       f      105
+      10      105
+      14      105
       18      105
+      19      105
+      1a      105
       1b      105
+      1c      105
+      1d      105
       1e      106
    }
 }
 
 class 'pkg/TestAnonymousClassConstructor$InnerStaticPublicString' {
    method '<init> (Ljava/lang/String;)V' {
+      4      111
       5      111
+      6      111
+      7      111
       8      112
    }
 }
diff --git a/testData/results/TestAnonymousParams.dec b/testData/results/TestAnonymousParams.dec
index c48794179eeaa512f49f552cdc691ee62c61adec..b963effed064e192a69c16c927a234a6708f68b2 100644
--- a/testData/results/TestAnonymousParams.dec
+++ b/testData/results/TestAnonymousParams.dec
@@ -6,31 +6,38 @@ import java.io.InputStream;
 
 public class TestAnonymousParams {
    void foo(InputStream in, final int a) throws IOException {
-      FilterInputStream filterInputStream = new FilterInputStream(in) {
+      FilterInputStream filterInputStream = new FilterInputStream(in) {// 24
          public int read() throws IOException {
             return a;// 27
          }
-      };// 24
+      };
       filterInputStream.read();// 30
    }// 31
 }
 
 class 'pkg/TestAnonymousParams$1' {
    method 'read ()I' {
+      1      10
+      2      10
+      3      10
       4      10
    }
 }
 
 class 'pkg/TestAnonymousParams' {
    method 'foo (Ljava/io/InputStream;I)V' {
-      a      12
+      5      8
+      a      8
+      b      13
       c      13
+      d      13
+      e      13
       10      14
    }
 }
 
 Lines mapping:
-24 <-> 13
+24 <-> 9
 27 <-> 11
 30 <-> 14
 31 <-> 15
diff --git a/testData/results/TestAnonymousSignature.dec b/testData/results/TestAnonymousSignature.dec
index 95ad203e3412f03b51eb06a9f926586f653042de..0c183ba28589c504aafed9631bea09e6524ae19d 100644
--- a/testData/results/TestAnonymousSignature.dec
+++ b/testData/results/TestAnonymousSignature.dec
@@ -21,6 +21,8 @@ public class TestAnonymousSignature {
 class 'pkg/TestAnonymousSignature$1' {
    method 'size ()I' {
       1      9
+      2      9
+      3      9
       4      9
    }
 }
@@ -35,9 +37,17 @@ class 'pkg/TestAnonymousSignature$2' {
 class 'pkg/TestAnonymousSignature' {
    method 'main ([Ljava/lang/String;)V' {
       0      7
+      1      7
+      2      7
       a      7
+      b      7
+      c      7
       d      12
+      e      12
+      f      12
       17      12
+      18      12
+      19      12
       1a      17
    }
 }
diff --git a/testData/results/TestAsserts.dec b/testData/results/TestAsserts.dec
index f260d9efcbc1332056ce9b534d56a3305fbd4bf1..c9e51a54a63c5615a5e6b03ef1e256b8067233e9 100644
--- a/testData/results/TestAsserts.dec
+++ b/testData/results/TestAsserts.dec
@@ -16,10 +16,13 @@ class 'pkg/TestAsserts' {
    method 'foo ()I' {
       0      4
       1      4
+      8      6
       9      6
       a      6
+      1b      8
       1c      8
       1d      8
+      20      8
       21      8
       22      8
       2d      10
diff --git a/testData/results/TestClashName.dec b/testData/results/TestClashName.dec
index 43348ea674adf840021a807e16fd231a51939c1d..14242655cc785caa4ba0773580f4795b410c2ef9 100644
--- a/testData/results/TestClashName.dec
+++ b/testData/results/TestClashName.dec
@@ -32,17 +32,37 @@ public class TestClashName extends ext.TestClashNameParent implements TestClashN
 
 class 'pkg/TestClashName' {
    method 'm ()I' {
+      0      20
       1      20
+      2      20
+      3      20
       4      20
+      5      21
       6      21
+      7      21
+      8      21
       9      21
+      a      21
+      b      21
       c      22
+      d      22
+      e      22
       f      22
+      10      23
       11      23
+      12      23
+      13      23
       14      23
+      15      23
+      16      23
       17      24
+      18      24
+      19      24
       1a      24
+      1b      25
+      1c      25
       1d      25
+      1e      25
       1f      25
       20      25
    }
diff --git a/testData/results/TestClassCast.dec b/testData/results/TestClassCast.dec
index e807294b770fefe3a7ea25c77e7b962b65e345f9..f602eea1b4bd4eb097a41992cd3271020a15c2c5 100644
--- a/testData/results/TestClassCast.dec
+++ b/testData/results/TestClassCast.dec
@@ -16,14 +16,29 @@ public class TestClassCast {
 
 class 'pkg/TestClassCast' {
    method 'test (Ljava/util/List;)V' {
+      0      7
       1      7
       3      8
       f      9
       10      9
+      11      9
       12      9
+      13      9
+      14      9
+      15      9
+      16      9
       18      12
+      19      12
+      1a      12
+      1b      12
       1c      12
+      1d      12
+      1e      12
+      1f      12
+      20      12
       21      12
+      22      12
+      23      12
       24      13
    }
 }
diff --git a/testData/results/TestClassFields.dec b/testData/results/TestClassFields.dec
index 852ae473bdfa591e28aa9b132f9f358ee1fc6eeb..1547551e536084420a529a7cb7c5d621159938b3 100644
--- a/testData/results/TestClassFields.dec
+++ b/testData/results/TestClassFields.dec
@@ -17,8 +17,12 @@ public class TestClassFields {
 class 'pkg/TestClassFields' {
    method '<clinit> ()V' {
       11      8
+      12      8
+      13      8
       14      8
       17      8
+      18      8
+      19      8
       20      9
    }
 }
diff --git a/testData/results/TestClassLambda.dec b/testData/results/TestClassLambda.dec
index cae1518889f1af8977a574de616e37574b3b2c16..9bb7d48e1531f3ac1e467ba8eac25de08b4da3da 100644
--- a/testData/results/TestClassLambda.dec
+++ b/testData/results/TestClassLambda.dec
@@ -22,12 +22,12 @@ public class TestClassLambda {
 
    public void testLambda1() {
       int var1 = (int)Math.random();// 39
-      Runnable var2 = () -> {
+      Runnable var2 = () -> {// 40
          System.out.println("hello1" + var1);
-      };// 40
-      Runnable var3 = () -> {
+      };
+      Runnable var3 = () -> {// 41
          System.out.println("hello2" + var1);
-      };// 41
+      };
    }// 42
 
    public void testLambda2() {
@@ -76,51 +76,88 @@ public class TestClassLambda {
 
    public void nestedLambdas() {
       byte var1 = 5;// 85
-      Runnable var2 = () -> {
-         Runnable var1x = () -> {
+      Runnable var2 = () -> {// 86
+         Runnable var1x = () -> {// 87
             System.out.println("hello2" + var1);
-         };// 87
+         };
          System.out.println("hello1" + var1);// 88
-      };// 86 89
+      };// 89
    }// 90
 }
 
 class 'pkg/TestClassLambda' {
    method 'lambda$testLambda$0 (ILjava/lang/Integer;)V' {
-      0      17
-      2      17
-      5      17
-      6      17
-      7      18
-      c      18
-      e      18
-      11      18
-      12      18
-      15      19
+      0      20
+      1      20
+      2      20
+      3      20
+      4      20
+      5      20
+      6      20
+      7      21
+      8      21
+      9      21
+      a      21
+      b      21
+      c      21
+      d      21
+      e      21
+      f      21
+      10      21
+      11      21
+      12      21
+      13      21
+      14      21
+      15      22
    }
 
    method 'testLambda ()V' {
-      7      14
-      8      14
-      e      14
-      f      14
-      15      14
-      16      14
-      1c      14
-      1d      14
-      23      14
-      24      14
-      2a      14
-      2c      14
-      33      14
-      35      14
-      39      14
-      3c      14
-      3d      15
-      40      15
-      41      15
-      4a      16
-      4f      20
+      7      17
+      8      17
+      9      17
+      a      17
+      e      17
+      f      17
+      10      17
+      11      17
+      15      17
+      16      17
+      17      17
+      18      17
+      1c      17
+      1d      17
+      1e      17
+      1f      17
+      23      17
+      24      17
+      25      17
+      26      17
+      2a      17
+      2b      17
+      2c      17
+      2d      17
+      2e      17
+      33      17
+      34      17
+      35      17
+      36      17
+      37      17
+      39      17
+      3a      17
+      3b      17
+      3c      17
+      3d      18
+      3e      18
+      3f      18
+      40      18
+      41      18
+      42      19
+      4a      19
+      4b      19
+      4c      19
+      4d      19
+      4e      19
+      4f      23
    }
 
    method 'lambda$testLambda1$1 (I)V' {
@@ -133,74 +170,143 @@ class 'pkg/TestClassLambda' {
 
    method 'lambda$testLambda1$2 (I)V' {
       0      28
+      1      28
+      2      28
       a      28
+      b      28
+      f      28
       13      28
+      14      28
+      15      28
       16      28
+      17      28
+      18      28
       19      29
    }
 
+   method 'lambda$testLambda1$2 (I)V' {
+      0      31
+      1      31
+      2      31
+      a      31
+      b      31
+      f      31
+      13      31
+      14      31
+      15      31
+      16      31
+      17      31
+      18      31
+      19      32
+   }
+
    method 'testLambda1 ()V' {
-      0      23
-      3      23
-      4      23
-      b      26
-      12      29
-      13      30
+      0      26
+      1      26
+      2      26
+      3      26
+      4      26
+      b      27
+      12      30
+      13      33
    }
 
    method 'lambda$testLambda2$3 (II)I' {
-      2      34
-      5      34
+      0      37
+      1      37
+      2      37
+      3      37
+      4      37
+      5      37
    }
 
    method 'testLambda2 ()V' {
-      5      33
-      9      36
+      5      36
+      6      36
+      7      36
+      9      39
    }
 
    method 'testLambda3 ()V' {
-      5      39
-      9      40
+      5      42
+      6      42
+      7      42
+      9      43
    }
 
    method 'testLambda4 ()V' {
-      5      43
-      9      44
+      5      46
+      6      46
+      7      46
+      9      47
    }
 
    method 'testLambda5 ()V' {
-      0      47
-      2      47
-      e      48
-      12      49
+      0      50
+      1      50
+      2      50
+      e      51
+      f      51
+      10      51
+      12      52
    }
 
    method 'lambda$testLambda6$4 (IILjava/lang/String;)Z' {
-      2      56
-      5      56
-      9      56
-      d      56
-      15      56
+      0      59
+      1      59
+      2      59
+      3      59
+      4      59
+      5      59
+      8      59
+      9      59
+      a      59
+      b      59
+      c      59
+      d      59
+      15      59
    }
 
    method 'testLambda6 ()V' {
-      7      52
-      9      53
-      e      53
-      f      53
-      10      53
-      12      54
-      17      54
-      18      54
-      19      54
-      22      55
-      28      58
+      7      55
+      8      56
+      9      56
+      a      56
+      b      56
+      c      56
+      d      56
+      e      56
+      f      56
+      10      56
+      11      57
+      12      57
+      13      57
+      14      57
+      15      57
+      16      57
+      17      57
+      18      57
+      19      57
+      1a      58
+      22      58
+      23      58
+      24      58
+      25      58
+      26      58
+      28      61
    }
 
    method 'testLambda7 ([Ljava/lang/annotation/Annotation;)V' {
-      1      61
-      9      61
-      f      62
+      0      64
+      1      64
+      2      64
+      3      64
+      9      64
+      a      64
+      b      64
+      c      64
+      d      64
+      f      65
    }
 
    method 'reduce (Ljava/util/function/IntBinaryOperator;)Ljava/util/OptionalInt;' {
@@ -209,9 +315,16 @@ class 'pkg/TestClassLambda' {
    }
 
    method 'function (Ljava/util/function/Supplier;)Ljava/lang/String;' {
-      1      69
-      6      69
-      9      69
+      0      72
+      1      72
+      2      72
+      3      72
+      4      72
+      5      72
+      6      72
+      7      72
+      8      72
+      9      72
    }
 
    method 'localMax (II)I' {
@@ -220,64 +333,80 @@ class 'pkg/TestClassLambda' {
    }
 
    method 'lambda$null$5 (I)V' {
-      0      80
-      a      80
-      13      80
-      16      80
-      19      81
+      0      83
+      1      83
+      2      83
+      a      83
+      b      83
+      f      83
+      13      83
+      14      83
+      15      83
+      16      83
+      17      83
+      18      83
+      19      84
    }
 
    method 'lambda$nestedLambdas$6 (I)V' {
-      6      81
-      7      82
-      11      82
-      1a      82
-      1d      82
-      20      83
+      6      82
+      7      85
+      8      85
+      9      85
+      11      85
+      12      85
+      16      85
+      1a      85
+      1b      85
+      1c      85
+      1d      85
+      1e      85
+      1f      85
+      20      86
    }
 
    method 'nestedLambdas ()V' {
-      0      77
-      1      77
-      8      83
-      9      84
+      0      80
+      1      80
+      8      81
+      9      87
    }
 }
 
 Lines mapping:
-29 <-> 15
-30 <-> 16
-32 <-> 17
-33 <-> 18
-34 <-> 19
-35 <-> 20
-36 <-> 21
-39 <-> 24
-40 <-> 27
-41 <-> 30
-42 <-> 31
-45 <-> 34
-46 <-> 37
-49 <-> 40
-50 <-> 41
-53 <-> 44
-54 <-> 45
-57 <-> 48
-58 <-> 49
-59 <-> 50
-62 <-> 53
-63 <-> 54
-64 <-> 55
-65 <-> 56
-66 <-> 59
-69 <-> 62
-70 <-> 63
-73 <-> 66
-77 <-> 70
-81 <-> 74
-85 <-> 78
-86 <-> 84
-87 <-> 82
-88 <-> 83
-89 <-> 84
-90 <-> 85
+29 <-> 18
+30 <-> 19
+32 <-> 20
+33 <-> 21
+34 <-> 22
+35 <-> 23
+36 <-> 24
+39 <-> 27
+40 <-> 28
+41 <-> 31
+42 <-> 34
+45 <-> 37
+46 <-> 40
+49 <-> 43
+50 <-> 44
+53 <-> 47
+54 <-> 48
+57 <-> 51
+58 <-> 52
+59 <-> 53
+62 <-> 56
+63 <-> 57
+64 <-> 58
+65 <-> 59
+66 <-> 62
+69 <-> 65
+70 <-> 66
+73 <-> 69
+77 <-> 73
+81 <-> 77
+85 <-> 81
+86 <-> 82
+87 <-> 83
+88 <-> 86
+89 <-> 87
+90 <-> 88
diff --git a/testData/results/TestClassLoop.dec b/testData/results/TestClassLoop.dec
index 55e369b4cb9d39272293f42d72f62fb60dea4f35..82e549f8076ccb6adf4989e71127c70b223922cc 100644
--- a/testData/results/TestClassLoop.dec
+++ b/testData/results/TestClassLoop.dec
@@ -78,41 +78,68 @@ public class TestClassLoop {
 class 'pkg/TestClassLoop' {
    method 'testSimpleInfinite ()V' {
       0      5
+      1      5
+      2      5
       3      5
+      4      5
+      5      5
    }
 
    method 'testFinally ()V' {
       0      10
+      1      10
+      2      10
       3      10
       4      10
       d      10
+      e      14
       f      14
       1a      15
       26      18
       27      18
+      28      18
+      29      18
       2a      18
+      2b      18
    }
 
    method 'testFinallyContinue ()V' {
       0      24
+      1      24
+      2      24
       3      24
       4      24
       d      24
       e      29
+      f      29
+      10      29
       11      29
+      12      29
       13      29
+      25      32
       26      32
       2a      33
+      2b      33
+      2c      33
       2d      33
+      2e      33
       2f      33
+      30      33
+      31      33
       32      34
       37      39
+      38      39
+      39      39
       3a      39
+      3b      39
       3c      39
    }
 
    method 'testWhileCombined (Ljava/lang/String;)I' {
+      0      44
       1      44
+      2      44
+      3      44
       4      44
       5      45
       6      45
@@ -120,29 +147,58 @@ class 'pkg/TestClassLoop' {
       8      46
       9      47
       a      47
+      b      47
       c      48
       d      48
+      e      48
       f      49
       10      49
+      11      49
       12      51
       13      51
+      14      51
+      15      51
+      16      51
       17      51
+      1a      52
+      1b      52
       1c      52
+      1d      52
+      1e      52
       1f      52
+      20      52
+      21      53
+      22      53
       23      53
+      24      53
       25      53
       28      54
+      29      54
+      2a      54
+      2e      56
+      2f      56
       30      56
+      31      56
       32      56
+      35      60
       36      60
       3d      61
+      3e      61
       42      61
+      43      64
       44      64
+      45      64
+      46      65
+      47      65
       48      65
       4b      66
       4e      69
       4f      69
       50      51
+      51      51
+      52      51
+      56      73
+      57      73
       58      73
    }
 }
diff --git a/testData/results/TestClassNestedInitializer.dec b/testData/results/TestClassNestedInitializer.dec
index 0576e74a1d8f22a9dee2d72ba7dc984e269abe9d..f2617df3c17a6b9caa908148f7d612a498ed9eee 100644
--- a/testData/results/TestClassNestedInitializer.dec
+++ b/testData/results/TestClassNestedInitializer.dec
@@ -4,34 +4,45 @@ public class TestClassNestedInitializer {
    public String secret;
 
    public void test() {
-      TestClassNestedInitializer var1 = new TestClassNestedInitializer() {
+      TestClassNestedInitializer var1 = new TestClassNestedInitializer() {// 22
          {
             this.secret = "one";
          }
-      };// 22
+      };
       System.out.println(var1.secret);// 23
    }// 24
 }
 
 class 'pkg/TestClassNestedInitializer$1' {
    method '<init> (Lpkg/TestClassNestedInitializer;)V' {
+      9      8
       a      8
+      b      8
       c      8
+      d      8
+      e      8
       f      9
    }
 }
 
 class 'pkg/TestClassNestedInitializer' {
    method 'test ()V' {
-      8      10
+      8      6
       9      11
+      a      11
+      b      11
+      c      11
       d      11
+      e      11
+      f      11
       10      11
+      11      11
+      12      11
       13      12
    }
 }
 
 Lines mapping:
-22 <-> 11
+22 <-> 7
 23 <-> 12
 24 <-> 13
diff --git a/testData/results/TestClassSimpleBytecodeMapping.dec b/testData/results/TestClassSimpleBytecodeMapping.dec
index d5f7070f5b6618b11ea075941af29d4278059b59..c033983370f38dda5935716026b9d339e9eac24a 100644
--- a/testData/results/TestClassSimpleBytecodeMapping.dec
+++ b/testData/results/TestClassSimpleBytecodeMapping.dec
@@ -49,8 +49,13 @@ public class TestClassSimpleBytecodeMapping {
 class 'pkg/TestClassSimpleBytecodeMapping$1' {
    method 'run ()V' {
       0      7
+      1      7
+      2      7
       3      7
+      4      7
       5      7
+      6      7
+      7      7
       8      8
    }
 }
@@ -58,40 +63,77 @@ class 'pkg/TestClassSimpleBytecodeMapping$1' {
 class 'pkg/TestClassSimpleBytecodeMapping' {
    method 'test ()I' {
       0      4
+      1      4
+      2      4
       3      4
+      4      4
       5      4
+      6      4
+      7      4
+      8      5
       11      5
+      12      5
+      13      5
+      14      10
       15      10
+      16      10
       17      10
+      18      10
+      19      10
       1a      11
+      1b      11
+      1c      11
       1d      11
       1e      11
       1f      11
       22      12
+      23      12
+      24      12
       25      12
+      26      12
       27      12
+      28      12
+      29      12
       2a      13
       2b      13
       2c      15
+      2d      15
+      2e      15
       2f      15
+      30      15
       31      15
+      32      15
+      33      15
       34      16
       35      16
    }
 
    method 'test2 (Ljava/lang/String;)V' {
+      0      22
       1      22
+      2      22
+      3      22
       10      23
       11      24
+      12      24
+      13      24
       15      24
       23      26
       24      26
+      25      26
+      26      26
       27      26
+      28      26
       2e      29
    }
 
    method 'run (Ljava/lang/Runnable;)V' {
+      0      32
       1      32
+      2      32
+      3      32
+      4      32
+      5      32
       6      33
    }
 }
@@ -99,8 +141,13 @@ class 'pkg/TestClassSimpleBytecodeMapping' {
 class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
    method 'print ()V' {
       0      37
+      1      37
+      2      37
       3      37
+      4      37
       5      37
+      6      37
+      7      37
       8      38
    }
 }
@@ -108,8 +155,13 @@ class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
 class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
    method 'print ()V' {
       0      43
+      1      43
+      2      43
       3      43
+      4      43
       5      43
+      6      43
+      7      43
       8      44
    }
 }
diff --git a/testData/results/TestClassSwitch.dec b/testData/results/TestClassSwitch.dec
index d8cb7242db570634da4bf4dfde39371dbd0676f3..a42bfc86fd3fa9948233d709ba8358f1b8ec7908 100644
--- a/testData/results/TestClassSwitch.dec
+++ b/testData/results/TestClassSwitch.dec
@@ -15,12 +15,20 @@ public class TestClassSwitch {
 
 class 'pkg/TestClassSwitch' {
    method 'testCaseOrder (I)V' {
+      0      4
       1      4
       1c      10
+      1d      10
+      1e      10
       1f      10
+      20      10
       21      10
+      22      10
+      23      10
       24      12
       25      6
+      26      6
+      27      6
       28      6
       29      6
       2c      8
diff --git a/testData/results/TestClassTypes.dec b/testData/results/TestClassTypes.dec
index 1b76bbb2e89b84dd33fbda862787f8a9d68ef8c0..cc61ae7e238d542e26bde5062a31523003d1b313 100644
--- a/testData/results/TestClassTypes.dec
+++ b/testData/results/TestClassTypes.dec
@@ -53,29 +53,41 @@ class 'pkg/TestClassTypes' {
       0      7
       1      7
       2      8
+      3      8
+      4      8
       5      8
+      6      9
       7      9
+      8      9
+      9      9
       a      9
       b      9
       c      9
       d      9
       10      10
       11      10
+      15      11
       16      11
+      17      11
+      18      11
       19      11
       1a      11
       1b      11
       1c      11
       1f      12
       20      12
+      21      15
       22      15
       23      15
       26      16
+      27      16
+      28      16
       29      16
       2c      19
    }
 
    method 'testBit (I)Z' {
+      0      22
       1      22
       2      22
       3      22
@@ -84,30 +96,59 @@ class 'pkg/TestClassTypes' {
    }
 
    method 'testSwitchConsts (I)V' {
+      0      26
       1      26
       2c      28
+      2d      28
+      2e      28
       2f      28
+      30      28
       31      28
+      32      28
+      33      28
       34      29
       37      31
+      38      31
+      39      31
       3a      31
+      3b      31
       3c      31
+      3d      31
+      3e      31
       3f      32
       42      35
+      43      35
+      44      35
       45      35
+      46      35
       47      35
       4a      38
    }
 
    method 'testAssignmentType (Ljava/util/List;)V' {
+      0      41
       1      41
       3      42
       f      43
       10      43
+      11      43
       12      43
+      13      43
+      14      43
+      15      43
+      16      43
       18      46
+      19      46
+      1a      46
+      1b      46
       1c      46
+      1d      46
+      1e      46
+      1f      46
+      20      46
       21      46
+      22      46
+      23      46
       24      47
    }
 }
diff --git a/testData/results/TestClassVar.dec b/testData/results/TestClassVar.dec
index 14e8b9e377dae1246dad22afec036b2e410c3dd9..a1c44f7954ab14e9caa6c85d098fc6d83c70ba82 100644
--- a/testData/results/TestClassVar.dec
+++ b/testData/results/TestClassVar.dec
@@ -42,20 +42,32 @@ class 'pkg/TestClassVar' {
    method 'testFieldSSAU ()V' {
       0      7
       1      7
+      2      7
       3      7
+      4      7
       5      7
       8      9
+      9      9
+      a      9
       b      9
+      1e      11
       1f      11
       20      11
+      21      11
+      22      11
       26      12
+      27      12
+      28      12
       29      12
       2e      7
       34      18
    }
 
    method 'testFieldSSAU1 ()Ljava/lang/Long;' {
+      4      21
       6      21
+      7      21
+      8      21
       b      21
       f      21
       13      21
@@ -64,17 +76,29 @@ class 'pkg/TestClassVar' {
    method 'testComplexPropagation ()V' {
       0      25
       1      25
+      2      27
       3      27
+      4      27
       5      27
+      8      29
       9      29
+      a      29
       b      29
+      c      29
       d      29
+      10      29
       11      29
       14      29
-      1c      32
-      1f      33
-      22      33
-      28      37
+      15      29
+      16      29
+      1a      33
+      1b      33
+      1c      33
+      1f      34
+      20      34
+      21      34
+      22      34
+      28      38
    }
 }
 
diff --git a/testData/results/TestCodeConstructs.dec b/testData/results/TestCodeConstructs.dec
index fefd4212a729bcafc87860b0ed02969149e019f7..2e422b84f097ceb4f923d2cafe9a0c84c1302881 100644
--- a/testData/results/TestCodeConstructs.dec
+++ b/testData/results/TestCodeConstructs.dec
@@ -15,11 +15,16 @@ class TestCodeConstructs {
 class 'pkg/TestCodeConstructs' {
    method 'expressions ()V' {
       7      6
+      8      6
+      9      6
       b      7
    }
 
    method 'fieldIncrement ()Ljava/lang/Integer;' {
+      4      10
       6      10
+      7      10
+      8      10
       b      10
       12      10
    }
diff --git a/testData/results/TestDebugSymbols.dec b/testData/results/TestDebugSymbols.dec
index e96eb3328706553b4bd8c131f5c1708a348531c1..1300ffd36f0d85b2334ff9b30d0dc824b0215caa 100644
--- a/testData/results/TestDebugSymbols.dec
+++ b/testData/results/TestDebugSymbols.dec
@@ -13,22 +13,44 @@ class TestDebugSymbols {
 class 'pkg/TestDebugSymbols' {
    method 'm ()I' {
       0      4
+      1      4
       2      4
       3      5
+      4      5
+      5      5
       6      5
+      7      6
       8      6
       9      6
+      a      6
       b      6
       c      6
+      d      6
       e      7
+      f      7
+      10      7
       11      7
       12      7
       13      7
+      14      7
+      1c      8
       20      8
+      21      8
+      25      8
       29      8
+      2a      8
+      2e      8
+      2f      8
       33      8
+      34      8
+      38      8
+      39      8
       3d      8
+      3e      8
+      3f      8
       40      8
+      41      8
+      42      8
       43      8
    }
 }
diff --git a/testData/results/TestEnum.dec b/testData/results/TestEnum.dec
index 6fabfaebda76ddd7136b9d8a9f8c354a398e9a0a..069e4efe131ecd59c97e979a3ab4f1fcb8170cfc 100644
--- a/testData/results/TestEnum.dec
+++ b/testData/results/TestEnum.dec
@@ -50,13 +50,20 @@ class 'pkg/TestEnum' {
 
    method '<init> (Ljava/lang/String;I)V' {
       3      20
+      4      20
       5      20
       6      20
+      7      20
+      8      20
       9      21
    }
 
    method '<init> (Ljava/lang/String;ILjava/lang/String;Lpkg/TestEnum$Type;)V' {
+      6      24
+      7      24
       8      24
+      9      24
+      a      24
       b      25
    }
 }
diff --git a/testData/results/TestExtendingSubclass.dec b/testData/results/TestExtendingSubclass.dec
index 2caf74011a7beee7fd2a9fdebe1873be625a8f1a..20f40571d8d00eee74650de2bf483f9ce2a1a1a5 100644
--- a/testData/results/TestExtendingSubclass.dec
+++ b/testData/results/TestExtendingSubclass.dec
@@ -21,7 +21,10 @@ class 'pkg/TestExtendingSubclass$Subclass1' {
 
 class 'pkg/TestExtendingSubclass$Subclass2' {
    method '<init> (Lpkg/TestExtendingSubclass;Ljava/lang/String;)V' {
+      7      10
       8      10
+      9      10
+      a      10
       b      11
    }
 }
diff --git a/testData/results/TestIffSimplification.dec b/testData/results/TestIffSimplification.dec
index 595c4cb3560eb0e2892ad78d4d1e09624972288f..f9e97f1441516c6c91781d0481182641c468eb2a 100644
--- a/testData/results/TestIffSimplification.dec
+++ b/testData/results/TestIffSimplification.dec
@@ -32,54 +32,91 @@ public class TestIffSimplification {
 
 class 'pkg/TestIffSimplification' {
    method 'simpleIff (Z[I)I' {
+      0      4
       1      4
+      4      4
       5      4
       6      4
+      a      4
       b      4
       c      4
       d      4
    }
 
    method 'simpleIf (Z[I)I' {
+      0      8
       1      8
+      4      8
       5      8
       6      8
+      8      8
       9      8
       a      8
    }
 
    method 'nestedIf (ZZ[I)I' {
+      0      12
       1      12
+      4      13
       5      13
+      8      13
       9      13
       a      13
+      c      13
       d      13
       e      13
+      10      15
       11      15
       12      15
       13      15
    }
 
    method 'compareTo (IIBBDDII)I' {
+      0      20
+      1      20
       2      20
+      5      21
+      6      21
       7      21
       a      21
       e      21
       f      21
+      10      22
+      11      22
+      12      22
       13      22
+      16      23
+      17      23
+      18      23
       19      23
       1c      23
       20      23
       21      23
+      22      24
+      23      24
+      24      24
+      25      24
       26      24
       27      24
+      28      24
+      29      24
       2a      24
+      2b      24
+      2c      24
       2d      24
       2e      24
+      31      25
+      32      25
+      33      25
+      34      25
       35      25
       38      25
       3c      25
       3d      25
+      3e      27
+      3f      27
+      40      27
+      41      27
       42      27
       43      27
       46      27
diff --git a/testData/results/TestIllegalVarName.dec b/testData/results/TestIllegalVarName.dec
index 3eb1ea54a6080827d3022ea409fdbdc84febf881..5178d8421eb80d2f354cf156bb0ada67c8093d19 100644
--- a/testData/results/TestIllegalVarName.dec
+++ b/testData/results/TestIllegalVarName.dec
@@ -21,10 +21,19 @@ public final class TestIllegalVarName {
 
 class 'pkg/TestIllegalVarName' {
    method 'm (Ljava/lang/String;I)Ljava/lang/String;' {
+      0      16
       1      16
+      2      16
       3      16
+      4      16
+      5      16
+      d      17
       11      17
+      12      17
+      16      17
       1a      17
+      1b      17
+      1c      17
       1d      17
    }
 }
diff --git a/testData/results/TestInnerClassConstructor.dec b/testData/results/TestInnerClassConstructor.dec
index f15701a8cc1a757ed8689f40ab375bc52e094be1..2c64a2779e6178a1059af45478e8b15d11ada2aa 100644
--- a/testData/results/TestInnerClassConstructor.dec
+++ b/testData/results/TestInnerClassConstructor.dec
@@ -29,6 +29,7 @@ class TestInnerClassConstructor {
 class 'pkg/TestInnerClassConstructor' {
    method 'l ()V' {
       5      4
+      6      4
       c      5
    }
 
@@ -40,25 +41,45 @@ class 'pkg/TestInnerClassConstructor' {
 
    method 'n (Ljava/lang/String;)V' {
       0      12
+      1      12
+      2      12
       a      12
+      b      12
+      f      12
       13      12
+      14      12
+      15      12
       16      12
+      17      12
+      18      12
       19      13
    }
 }
 
 class 'pkg/TestInnerClassConstructor$Another' {
    method '<init> (Lpkg/TestInnerClassConstructor;II)V' {
+      9      17
+      11      17
       15      17
+      16      17
+      1a      17
       1e      17
+      1f      17
+      20      17
       21      17
+      22      17
+      23      17
       24      18
    }
 }
 
 class 'pkg/TestInnerClassConstructor$Inner' {
    method '<init> (Lpkg/TestInnerClassConstructor;Ljava/lang/String;)V' {
+      9      23
+      a      23
       b      23
+      c      23
+      d      23
       e      24
    }
 }
diff --git a/testData/results/TestInnerLocal.dec b/testData/results/TestInnerLocal.dec
index f728ad7e3493b296f88d919a028b646096f733c7..5873a128dea3f646318c14f11822d08005c8673e 100644
--- a/testData/results/TestInnerLocal.dec
+++ b/testData/results/TestInnerLocal.dec
@@ -57,52 +57,79 @@ public class TestInnerLocal {
 
 class 'pkg/TestInnerLocal$1Inner' {
    method '<init> (Ljava/lang/String;)V' {
-      6      8
-      9      9
+      4      6
+      5      6
+      6      6
+      7      6
+      8      6
+      9      7
    }
 }
 
 class 'pkg/TestInnerLocal' {
    method 'testStaticMethod ()V' {
-      4      12
-      e      13
-      18      14
-      1e      15
+      4      10
+      5      10
+      e      11
+      f      11
+      18      12
+      19      12
+      1e      13
    }
 
    method 'testMethod ()V' {
-      5      26
-      f      27
-      1a      28
-      24      29
-      2a      30
+      5      24
+      6      24
+      f      25
+      10      25
+      1a      26
+      1b      26
+      24      27
+      25      27
+      2a      28
    }
 }
 
-class 'pkg/TestInnerLocal$2Inner' {
-   method '<init> (Lpkg/TestInnerLocal;Ljava/lang/String;)V' {
-      b      22
-      e      23
+class 'TestInnerLocal$2Inner' {
+   method '<init> (LTestInnerLocal;Ljava/lang/String;)V' {
+      9      20
+      a      20
+      b      20
+      c      20
+      d      20
+      e      21
    }
 }
 
 class 'TestInnerLocal$Inner1' {
    method '<init> (LTestInnerLocal;Ljava/lang/String;)V' {
+      9      34
+      a      34
       b      34
+      c      34
+      d      34
       e      35
    }
 }
 
 class 'TestInnerLocal$Inner1Static' {
    method '<init> (Ljava/lang/String;)V' {
+      4      42
+      5      42
       6      42
+      7      42
+      8      42
       9      43
    }
 }
 
 class 'pkg/TestInnerLocal$Inner1Static$Inner2Static' {
    method '<init> (Ljava/lang/String;)V' {
+      4      49
+      5      49
       6      49
+      7      49
+      8      49
       9      50
    }
 }
diff --git a/testData/results/TestInnerSignature.dec b/testData/results/TestInnerSignature.dec
index 8aab3c2b9f56368f1350f1ac98262c761bf6ed19..37b216917552fc933ebc5fa3239002fa2b52d575 100644
--- a/testData/results/TestInnerSignature.dec
+++ b/testData/results/TestInnerSignature.dec
@@ -38,27 +38,64 @@ public class TestInnerSignature<A, B, C> {
 
 class 'pkg/TestInnerSignature' {
    method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
-      6      8
-      b      9
-      10      10
-      13      11
+      4      6
+      5      6
+      6      6
+      7      6
+      8      6
+      9      7
+      a      7
+      b      7
+      c      7
+      d      7
+      e      8
+      f      8
+      10      8
+      11      8
+      12      8
+      13      9
    }
 }
 
 class 'TestInnerSignature$Inner' {
    method '<init> (LTestInnerSignature;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      9      17
+      a      17
       b      17
+      c      17
+      d      17
+      e      18
+      f      18
       10      18
+      11      18
+      12      18
+      13      19
+      14      19
+      15      19
       16      19
+      17      19
+      18      19
       19      20
    }
 }
 
 class 'TestInnerSignature$InnerStatic' {
    method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      4      29
+      5      29
       6      29
+      7      29
+      8      29
+      9      30
+      a      30
       b      30
+      c      30
+      d      30
+      e      31
+      f      31
       10      31
+      11      31
+      12      31
       13      32
    }
 }
diff --git a/testData/results/TestJava9StringConcat.dec b/testData/results/TestJava9StringConcat.dec
index 389bb85905dd216819edf881e0f7fd187a703d64..29890ed8d641519f957d34981fc41e678a7caf2f 100644
--- a/testData/results/TestJava9StringConcat.dec
+++ b/testData/results/TestJava9StringConcat.dec
@@ -12,12 +12,25 @@ public class TestJava9StringConcat {
 
 class 'java9/TestJava9StringConcat' {
    method 'test1 (Ljava/lang/String;I)Ljava/lang/String;' {
+      0      4
+      1      4
       2      4
+      3      4
+      4      4
+      5      4
+      6      4
       7      4
    }
 
    method 'test2 (Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;' {
+      0      8
+      1      8
+      2      8
       3      8
+      4      8
+      5      8
+      6      8
+      7      8
       8      8
    }
 }
diff --git a/testData/results/TestKotlinConstructorKt.dec b/testData/results/TestKotlinConstructorKt.dec
index d1e3f7b3570c456d37db7afb8bb2c9ae8096c9d6..0e941450d0dabcbec609f869f674d9cc5bdace33 100644
--- a/testData/results/TestKotlinConstructorKt.dec
+++ b/testData/results/TestKotlinConstructorKt.dec
@@ -16,12 +16,12 @@ import kotlin.collections.CollectionsKt;
 public final class TestKotlinConstructorKt {
    private static final List<Mapping> foo(Collection<String> list) {
       Iterable $receiver$iv = (Iterable)list;// 2
-      Collection destination$iv$iv = (Collection)(new ArrayList(CollectionsKt.collectionSizeOrDefault($receiver$iv, 10)));// 10
-      Iterator var4 = $receiver$iv.iterator();// 11
+      Collection destination$iv$iv = (Collection)(new ArrayList(CollectionsKt.collectionSizeOrDefault($receiver$iv, 10)));
+      Iterator var4 = $receiver$iv.iterator();// 10 11
 
       while(var4.hasNext()) {
          Object item$iv$iv = var4.next();
-         String it = (String)item$iv$iv;// 12
+         String it = (String)item$iv$iv;
          Mapping var10000 = new Mapping;
          if (it == null) {// 3
             throw new TypeCastException("null cannot be cast to non-null type kotlin.String");
@@ -29,7 +29,7 @@ public final class TestKotlinConstructorKt {
 
          var10000.<init>((String)it);
          Mapping var11 = var10000;
-         destination$iv$iv.add(var11);
+         destination$iv$iv.add(var11);// 12
       }
 
       return CollectionsKt.toList((Iterable)((List)destination$iv$iv));// 4 13
@@ -38,29 +38,84 @@ public final class TestKotlinConstructorKt {
 
 class 'TestKotlinConstructorKt' {
    method 'foo (Ljava/util/Collection;)Ljava/util/List;' {
+      0      17
       1      17
+      2      17
+      3      17
       4      17
+      6      19
+      c      18
       d      18
+      e      18
       f      18
+      10      18
+      11      18
       15      18
+      16      18
+      17      18
       18      18
       1b      19
+      1c      19
+      1d      19
+      1e      19
+      1f      19
       20      19
+      21      19
+      22      21
+      23      21
       24      21
+      25      21
+      26      21
+      27      21
+      28      21
+      2c      22
+      2d      22
       2e      22
+      2f      22
+      30      22
+      31      22
+      32      22
       33      22
+      34      22
+      35      31
+      36      23
+      37      23
       38      23
+      39      23
+      3a      23
       3b      23
+      3c      23
+      43      25
+      44      25
       46      25
       4d      26
+      4e      26
       52      26
       53      29
+      54      29
+      55      29
       56      29
+      57      29
+      58      29
       59      30
+      5a      30
+      5d      31
+      5e      31
       5f      31
+      60      31
+      61      31
+      62      31
+      63      31
+      68      34
       69      34
+      6a      34
+      6b      34
       6c      34
+      6d      34
+      6e      34
       6f      34
+      70      34
+      71      34
       72      34
    }
 }
@@ -69,7 +124,7 @@ Lines mapping:
 2 <-> 18
 3 <-> 26
 4 <-> 35
-10 <-> 19
+10 <-> 20
 11 <-> 20
-12 <-> 24
+12 <-> 32
 13 <-> 35
diff --git a/testData/results/TestLocalsNames.dec b/testData/results/TestLocalsNames.dec
index fe6fe796965768533ba3cde2a2a79ddc37ee7b3e..59563ddeb1c2cb82405b31d9f0073a1df450c9e8 100644
--- a/testData/results/TestLocalsNames.dec
+++ b/testData/results/TestLocalsNames.dec
@@ -26,40 +26,104 @@ public class TestLocalsNames {
 
 class 'pkg/TestLocalsNames' {
    method 'rename (Ljava/io/File;Z)V' {
+      0      6
       1      6
+      2      6
+      3      6
       4      6
       7      7
+      8      7
+      9      7
       a      7
+      b      8
       c      8
+      d      8
+      e      8
       f      8
+      10      8
+      11      9
+      12      9
       13      9
+      14      9
       17      10
       18      10
+      19      10
       1a      12
       1b      12
+      1c      12
+      1d      12
+      1e      12
+      1f      12
+      20      12
       21      12
+      24      13
+      25      13
+      26      13
+      27      13
       28      13
       29      13
+      2a      13
+      36      14
+      37      14
       38      14
+      39      14
+      3a      14
       3e      14
+      3f      14
       43      14
+      44      14
+      45      14
       49      14
+      4a      14
+      51      16
+      52      16
+      53      16
+      54      16
       55      16
+      56      16
+      57      16
       66      16
+      67      16
+      6b      16
+      6c      16
       70      16
+      71      16
+      75      16
+      76      16
       7a      16
+      7b      16
+      7c      16
       81      12
+      82      12
+      83      12
       87      19
+      88      19
+      89      19
+      8a      19
       8b      19
       8c      19
+      8d      19
       8e      20
+      8f      20
+      90      20
       98      20
+      99      20
+      9d      20
+      9e      20
       a2      20
+      a3      20
+      a7      20
+      a8      20
+      a9      20
+      aa      20
       ab      20
       ac      20
       ad      20
       b1      20
+      b2      20
       b6      20
+      b7      20
+      b8      20
       b9      20
       bc      23
    }
diff --git a/testData/results/TestLocalsSignature.dec b/testData/results/TestLocalsSignature.dec
index 2948bfdb98eaac6f172a7abf518ef795304bc56a..3da716bb86c538148347d67c29354a66dc416c17 100644
--- a/testData/results/TestLocalsSignature.dec
+++ b/testData/results/TestLocalsSignature.dec
@@ -13,8 +13,14 @@ public class TestLocalsSignature {
 class 'pkg/TestLocalsSignature' {
    method 'main ([Ljava/lang/String;)V' {
       7      7
+      8      8
       9      8
+      a      8
       b      8
+      c      8
+      d      8
+      e      8
+      f      8
       11      9
    }
 }
diff --git a/testData/results/TestMemberAnnotations.dec b/testData/results/TestMemberAnnotations.dec
index 1e3a41c0f8acf669d79049228dc72f63fc387528..72d29afee0f95f9b75898720f39cb0519a48863f 100644
--- a/testData/results/TestMemberAnnotations.dec
+++ b/testData/results/TestMemberAnnotations.dec
@@ -22,9 +22,14 @@ class TestMemberAnnotations {
 
 class 'pkg/TestMemberAnnotations' {
    method 'f (I)I' {
+      0      13
+      1      13
       2      13
+      3      13
+      4      13
       5      13
       6      13
+      7      13
       8      13
       9      13
    }
diff --git a/testData/results/TestMethodReferenceSameName.dec b/testData/results/TestMethodReferenceSameName.dec
index 2592d18d569d40e672ddbeee8d07b498a3596626..beaf26ef7981bb1d125430c4e3c41c10511d81e2 100644
--- a/testData/results/TestMethodReferenceSameName.dec
+++ b/testData/results/TestMethodReferenceSameName.dec
@@ -14,9 +14,19 @@ public class TestMethodReferenceSameName {
 
 class 'TestMethodReferenceSameName' {
    method 'foo ()V' {
+      0      4
       1      4
-      e      5
-      13      6
+      2      4
+      3      4
+      5      5
+      6      5
+      7      5
+      e      6
+      f      6
+      10      6
+      11      6
+      12      6
+      13      7
    }
 }
 
diff --git a/testData/results/TestPrimitives.dec b/testData/results/TestPrimitives.dec
index bc930a51035d6d89803c5c618fb2f2934c45eb63..a7d1557e6814e071df65c610fbdae860c8ff93bc 100644
--- a/testData/results/TestPrimitives.dec
+++ b/testData/results/TestPrimitives.dec
@@ -172,143 +172,178 @@ public class TestPrimitives {
 
 class 'pkg/TestPrimitives' {
    method 'printAll ()V' {
-      1      6
-      2      6
-      6      7
-      8      7
-      c      8
-      f      8
-      13      9
-      15      9
-      19      10
-      1c      10
-      20      11
-      22      11
-      26      12
-      29      12
-      2d      13
-      2f      13
-      33      14
-      37      14
-      3b      15
-      40      15
-      44      16
-      4a      16
-      4e      17
-      52      17
-      56      18
-      5b      18
-      5f      19
-      65      19
-      69      20
-      6e      20
-      72      21
-      78      21
-      7c      22
-      81      22
-      85      23
-      87      23
-      8a      23
-      8d      23
-      91      24
-      93      24
-      96      24
-      99      24
-      9d      25
-      9f      25
-      a2      25
-      a5      25
-      a9      26
-      ab      26
-      ae      26
-      b1      26
-      b5      27
-      b7      27
-      ba      27
-      bd      27
-      c1      28
-      c3      28
-      c6      28
-      c9      28
-      cd      29
-      cf      29
-      d2      29
-      d5      29
-      dd      30
-      e2      30
-      e5      30
-      ea      31
-      ed      31
-      f0      31
-      f5      32
-      f8      32
-      fb      32
-      fe      33
-      101      33
-      10a      33
-      10b      33
-      111      33
-      112      33
-      118      33
-      11b      33
-      121      33
-      123      33
-      129      33
-      12b      33
-      131      33
-      134      33
-      138      33
-      13c      34
-      13f      34
-      148      34
-      14b      34
-      152      34
-      155      34
-      15c      34
-      15f      34
-      166      34
-      169      34
-      16d      34
-      175      35
-      176      35
-      178      35
-      17b      35
-      17d      35
-      180      35
-      182      35
-      185      35
-      18f      36
-      194      36
-      19a      36
-      19f      36
-      1a5      36
-      1aa      36
-      1b0      36
-      1b5      36
-      1c1      37
-      1c3      37
-      1c6      37
-      1c9      37
-      1cb      37
-      1ce      37
-      1d1      37
-      1d3      37
-      1d6      37
-      1d9      37
-      1db      37
-      1de      37
-      1e1      37
-      1e3      37
-      1e6      37
-      1e9      37
-      1eb      37
-      1ee      37
-      1f1      37
-      1f3      37
-      1f6      37
-      1fd      37
-      202      37
-      209      38
+      0      4
+      1      4
+      2      4
+      3      4
+      4      4
+      5      5
+      6      5
+      7      5
+      8      5
+      9      5
+      a      5
+      b      6
+      c      6
+      d      6
+      e      6
+      f      6
+      10      6
+      11      6
+      12      7
+      13      7
+      14      7
+      15      7
+      16      7
+      17      7
+      18      8
+      19      8
+      1a      8
+      1b      8
+      1c      8
+      1d      8
+      1e      8
+      1f      9
+      20      9
+      21      9
+      22      9
+      23      9
+      24      9
+      25      10
+      26      10
+      27      10
+      28      10
+      29      10
+      2a      10
+      2b      10
+      2c      11
+      2d      11
+      2e      11
+      2f      11
+      30      11
+      31      11
+      32      12
+      33      12
+      37      12
+      3b      13
+      40      13
+      44      14
+      4a      14
+      4e      15
+      52      15
+      56      16
+      5b      16
+      5f      17
+      65      17
+      69      18
+      6e      18
+      72      19
+      78      19
+      7c      20
+      81      20
+      85      21
+      87      21
+      8a      21
+      8d      21
+      91      22
+      93      22
+      96      22
+      99      22
+      9d      23
+      9f      23
+      a2      23
+      a5      23
+      a9      24
+      ab      24
+      ae      24
+      b1      24
+      b5      25
+      b7      25
+      ba      25
+      bd      25
+      c1      26
+      c3      26
+      c6      26
+      c9      26
+      cd      27
+      cf      27
+      d2      27
+      d5      27
+      dd      28
+      e2      28
+      e5      28
+      ea      29
+      ed      29
+      f0      29
+      f5      30
+      f8      30
+      fb      30
+      fe      31
+      101      31
+      10a      31
+      10b      31
+      111      31
+      112      31
+      118      31
+      11b      31
+      121      31
+      123      31
+      129      31
+      12b      31
+      131      31
+      134      31
+      138      31
+      13c      32
+      13f      32
+      148      32
+      14b      32
+      152      32
+      155      32
+      15c      32
+      15f      32
+      166      32
+      169      32
+      16d      32
+      175      33
+      176      33
+      178      33
+      17b      33
+      17d      33
+      180      33
+      182      33
+      185      33
+      18f      34
+      194      34
+      19a      34
+      19f      34
+      1a5      34
+      1aa      34
+      1b0      34
+      1b5      34
+      1c1      35
+      1c3      35
+      1c6      35
+      1c9      35
+      1cb      35
+      1ce      35
+      1d1      35
+      1d3      35
+      1d6      35
+      1d9      35
+      1db      35
+      1de      35
+      1e1      35
+      1e3      35
+      1e6      35
+      1e9      35
+      1eb      35
+      1ee      35
+      1f1      35
+      1f3      35
+      1f6      35
+      1fd      35
+      202      35
+      209      36
    }
 
    method '<init> (ZBSIJFDC)V' {
diff --git a/testData/results/TestStaticNameClash.dec b/testData/results/TestStaticNameClash.dec
index 1c0f21a81b83a0ca7e8a43ba1d86f7f0f6fe7b8d..f36d336afcae4bd24201a7e0818d10362d098c90 100644
--- a/testData/results/TestStaticNameClash.dec
+++ b/testData/results/TestStaticNameClash.dec
@@ -10,7 +10,10 @@ public class TestStaticNameClash {
 
 class 'pkg/TestStaticNameClash' {
    method 'setProperty (Ljava/lang/String;)V' {
+      0      6
       1      6
+      2      6
+      3      6
       4      7
    }
 }
diff --git a/testData/results/TestStringConcat.dec b/testData/results/TestStringConcat.dec
index b3fc99579d32896fffb309beba1d89a9f14b84ce..951a761c030b7d6e62e309019b361722ebdd40d9 100644
--- a/testData/results/TestStringConcat.dec
+++ b/testData/results/TestStringConcat.dec
@@ -12,16 +12,29 @@ public class TestStringConcat {
 
 class 'pkg/TestStringConcat' {
    method 'test1 (Ljava/lang/String;I)Ljava/lang/String;' {
+      7      4
+      b      4
       f      4
+      10      4
+      11      4
       12      4
    }
 
    method 'test2 (Ljava/lang/String;ILjava/lang/Object;)Ljava/lang/String;' {
       7      8
+      8      8
+      c      8
       10      8
+      11      8
+      15      8
       19      8
+      1a      8
+      1e      8
       22      8
+      23      8
       27      8
+      28      8
+      29      8
       2a      8
    }
 }
diff --git a/testData/results/TestStringLiterals.dec b/testData/results/TestStringLiterals.dec
index c5afe1865540afe457073567009b4b96132d0a07..644701c21beb2a80ed07fc6ed7b2873f13d4e2db 100644
--- a/testData/results/TestStringLiterals.dec
+++ b/testData/results/TestStringLiterals.dec
@@ -12,20 +12,39 @@ public class TestStringLiterals {
 class 'pkg/TestStringLiterals' {
    method 'main ([Ljava/lang/String;)V' {
       0      4
+      1      4
       2      4
       9      5
+      a      5
       e      5
+      f      5
       13      5
+      14      5
       18      5
+      19      5
       1d      5
+      1e      5
       22      5
+      23      5
       28      5
+      29      5
       2e      5
+      2f      5
       31      5
       32      6
+      33      6
+      34      6
+      35      6
       36      6
+      37      6
+      38      6
       39      7
+      3a      7
+      3b      7
+      3c      7
       3d      7
+      3e      7
+      3f      7
       40      8
    }
 }
diff --git a/testData/results/TestSwitchOnEnum.dec b/testData/results/TestSwitchOnEnum.dec
index 34064819cc6a520a13bc3fd718a046861414ae4c..5afdee0f6dc9f35169315b838d25991b0dd8dd20 100644
--- a/testData/results/TestSwitchOnEnum.dec
+++ b/testData/results/TestSwitchOnEnum.dec
@@ -50,6 +50,7 @@ public class TestSwitchOnEnum {
 
 class 'pkg/TestSwitchOnEnum' {
    method 'testSOE (Ljava/util/concurrent/TimeUnit;)I' {
+      3      8
       8      8
       24      10
       25      10
diff --git a/testData/results/TestSynchronizedMapping.dec b/testData/results/TestSynchronizedMapping.dec
index 84ad48a1e66013579286702e7fee9e562a8369e8..6778aa19b6d347f20cac678bd6414c2e1eac369d 100644
--- a/testData/results/TestSynchronizedMapping.dec
+++ b/testData/results/TestSynchronizedMapping.dec
@@ -16,16 +16,26 @@ public class TestSynchronizedMapping {
 
 class 'pkg/TestSynchronizedMapping' {
    method 'test (I)I' {
+      0      4
       3      4
       4      5
+      5      5
+      6      5
       8      6
       12      8
+      13      8
+      14      8
       15      8
    }
 
    method 'test2 (Ljava/lang/String;)V' {
       0      12
+      1      12
+      2      12
+      3      12
       4      12
+      5      12
+      6      12
       7      13
    }
 }
diff --git a/testData/results/TestSyntheticAccess.dec b/testData/results/TestSyntheticAccess.dec
index d5016a28f9ecd2cd30317c4c595b8c30b21b63ea..290e7a3cd313d5b54036e0ce2b5eaed572524cb6 100644
--- a/testData/results/TestSyntheticAccess.dec
+++ b/testData/results/TestSyntheticAccess.dec
@@ -39,43 +39,66 @@ class TestSyntheticAccess {
 
 class 'pkg/TestSyntheticAccess$Assigner' {
    method 'assignI (I)V' {
+      1      8
+      2      8
+      3      8
+      4      8
       5      8
       9      9
    }
 
    method 'assignS (I)V' {
-      1      12
+      0      12
+      2      12
+      3      12
+      4      12
       5      13
    }
 }
 
 class 'pkg/TestSyntheticAccess$Incrementer' {
    method 'orI ()V' {
-      8      18
+      1      18
+      2      18
+      3      18
+      4      18
+      5      18
+      6      18
+      7      18
       b      18
       d      18
       11      19
    }
 
    method 'incrementI ()V' {
+      1      22
       2      22
+      3      22
       4      22
+      7      22
       8      23
    }
 
    method 'decrementI ()V' {
+      1      26
       2      26
+      3      26
       4      26
+      6      26
       8      27
    }
 
    method 'incrementS ()V' {
       0      30
-      4      31
+      1      30
+      2      30
+      4      30
    }
 
    method 'decrementS ()V' {
       0      34
+      1      34
+      2      34
       4      35
    }
 }
diff --git a/testData/results/TestThrowException.dec b/testData/results/TestThrowException.dec
index 7c52234203a98704f4631c8e7d3b6edd27f18c4f..1344ac4d312e381ad98e3c1ef2a33a36d6f6952e 100644
--- a/testData/results/TestThrowException.dec
+++ b/testData/results/TestThrowException.dec
@@ -26,10 +26,15 @@ class 'pkg/TestThrowException$1' {
 
 class 'pkg/TestThrowException' {
    method '<init> (I)V' {
+      4      6
       5      6
       c      7
+      d      7
       11      7
+      12      9
       1b      9
+      1c      9
+      1d      9
       1e      15
    }
 }
diff --git a/testData/results/TestTryCatchFinally.dec b/testData/results/TestTryCatchFinally.dec
index 2af717c0764a39b168d490d00d0933185ad11fde..20e9afb72b2d2dabc76d29f6bb1f4ef2bfbc5a20 100644
--- a/testData/results/TestTryCatchFinally.dec
+++ b/testData/results/TestTryCatchFinally.dec
@@ -42,42 +42,74 @@ public class TestTryCatchFinally {
 class 'pkg/TestTryCatchFinally' {
    method 'test1 (Ljava/lang/String;)V' {
       0      5
+      1      5
+      2      5
       3      5
+      4      5
       5      5
       14      8
+      15      8
+      16      8
       17      8
+      18      8
       19      8
       1f      9
-      2b      12
-      2d      12
-      30      12
-      38      15
+      2b      13
+      2c      13
+      2d      13
+      2e      13
+      2f      13
+      30      13
+      31      13
+      38      16
    }
 
    method 'foo (I)I' {
-      1      18
-      2      18
-      c      19
-      e      20
-      f      20
-      13      21
-      1b      23
+      0      19
+      1      19
+      2      19
+      c      20
+      d      21
+      e      21
+      f      21
+      12      22
+      13      22
+      1b      24
    }
 
    method 'test (Ljava/lang/String;)I' {
-      1      29
-      4      29
-      e      30
-      f      31
-      10      32
-      1a      32
-      23      32
-      26      32
-      31      37
-      34      34
-      35      34
-      38      34
-      3f      37
+      0      30
+      1      30
+      2      30
+      3      30
+      4      30
+      d      31
+      e      31
+      f      32
+      10      33
+      11      33
+      12      33
+      1a      33
+      1b      33
+      23      33
+      24      33
+      25      33
+      26      33
+      31      38
+      32      38
+      33      38
+      34      35
+      35      35
+      36      35
+      37      35
+      38      35
+      39      35
+      3a      38
+      3b      38
+      3c      38
+      3d      38
+      3e      38
+      3f      38
    }
 }
 
diff --git a/testData/results/TestVarArgCalls.dec b/testData/results/TestVarArgCalls.dec
index 6cdcd8fc638ceeec823172b2859ee8f970f61327..db4cb49cc7816f05dd2e3d82a6b79a7405001e4d 100644
--- a/testData/results/TestVarArgCalls.dec
+++ b/testData/results/TestVarArgCalls.dec
@@ -27,58 +27,135 @@ public class TestVarArgCalls {
 
 class 'pkg/TestVarArgCalls' {
    method 'doSmth ()V' {
+      0      4
       1      4
+      2      4
       7      4
+      8      4
+      9      4
+      a      5
       b      5
+      c      5
       13      5
+      14      5
       16      5
+      17      5
+      18      5
+      19      6
       1a      6
+      1b      6
       22      6
+      23      6
       27      6
+      28      6
       2a      6
+      2b      6
+      2c      6
+      2d      7
       2e      7
+      2f      7
       34      7
+      35      7
+      36      7
+      37      8
       38      8
+      39      8
       46      8
+      47      8
       4a      8
+      4b      8
+      4c      8
+      4d      9
       4e      9
+      4f      9
       5c      9
+      5d      9
       68      9
+      69      9
       6c      9
+      6d      9
+      6e      9
       6f      10
+      70      10
       75      10
+      76      10
+      77      10
       79      11
+      7a      11
       81      11
+      82      11
       83      11
+      84      11
+      85      11
       87      11
+      88      11
+      89      11
       8b      12
+      8c      12
       93      12
+      94      12
       95      12
+      96      12
+      97      12
       9b      12
+      9c      12
       9e      12
+      9f      12
+      a0      12
       a8      13
+      a9      13
       ab      13
       ac      14
+      ad      14
+      b4      14
       b6      14
+      b7      14
+      b8      14
       ba      15
+      bb      15
+      bc      15
       bd      15
+      be      15
+      bf      15
       c0      15
+      c1      15
+      c2      15
       c4      16
    }
 
    method 'printAll (Ljava/lang/String;[Ljava/lang/String;)V' {
       0      19
+      1      19
+      2      19
+      3      19
+      4      19
       5      19
+      6      19
+      7      19
       8      19
+      9      19
+      a      19
       b      19
+      c      19
+      d      19
       e      20
    }
 
    method 'printComplex (Ljava/lang/String;[[Ljava/lang/String;)V' {
       0      23
+      1      23
+      2      23
+      3      23
+      4      23
       5      23
+      6      23
+      7      23
       8      23
+      9      23
+      a      23
       b      23
+      c      23
+      d      23
       e      24
    }
 }
diff --git a/testData/results/TypeAnnotations.dec b/testData/results/TypeAnnotations.dec
index 590d89477cde2bc61395393b10827c7b5b180e7d..f743fc88a30f344f033bbde656589afee1e49bf7 100644
--- a/testData/results/TypeAnnotations.dec
+++ b/testData/results/TypeAnnotations.dec
@@ -31,6 +31,7 @@ class TypeAnnotations {
 class 'pkg/TypeAnnotations' {
    method 'm1 ()I' {
       0      13
+      1      13
       2      13
    }
 
