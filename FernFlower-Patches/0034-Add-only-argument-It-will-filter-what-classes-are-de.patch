From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 10 Jun 2020 09:59:19 -0700
Subject: [PATCH] Add -only argument It will filter what classes are decompiled
 from the target jar.

Uses a prefix system, so -only=net/minecraft/block/ will decompile all classes in the block package and subpackages.
Useful for debugging to limit scope/runtime.

diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 2c67a4fbcdf011cc91b9166f616feb27ce9dcd4c..3e168efbd10b661519a01fb48a3aabc16460f840 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -36,6 +36,7 @@ public class ClassesProcessor implements CodeConstants {
 
   private final StructContext context;
   private final Map<String, ClassNode> mapRootClasses = new HashMap<>();
+  private final Set<String> whitelist = new HashSet<>();
 
   private static class Inner {
     private String simpleName;
@@ -61,6 +62,22 @@ public class ClassesProcessor implements CodeConstants {
     this.context = context;
   }
 
+  public void addWhitelist(String prefix) {
+    this.whitelist.add(prefix);
+  }
+
+  public boolean isWhitelisted(String cls) {
+    if (this.whitelist.isEmpty())
+      return true;
+
+    for (String prefix : this.whitelist) {
+      if (cls.startsWith(prefix))
+        return true;
+    }
+
+    return false;
+  }
+
   public void loadClasses(IIdentifierRenamer renamer) {
     Map<String, Inner> mapInnerClasses = new HashMap<>();
     Map<String, Set<String>> mapNestedClassReferences = new HashMap<>();
@@ -160,9 +177,11 @@ public class ClassesProcessor implements CodeConstants {
           }
         }
 
-        ClassNode node = new ClassNode(ClassNode.CLASS_ROOT, cl);
-        node.access = cl.getAccessFlags();
-        mapRootClasses.put(cl.qualifiedName, node);
+        if (isWhitelisted(cl.qualifiedName)) {
+          ClassNode node = new ClassNode(ClassNode.CLASS_ROOT, cl);
+          node.access = cl.getAccessFlags();
+          mapRootClasses.put(cl.qualifiedName, node);
+        }
       }
       linkEnclosingMethods(cl);
     }
diff --git a/src/org/jetbrains/java/decompiler/main/Fernflower.java b/src/org/jetbrains/java/decompiler/main/Fernflower.java
index aa8b1132b84fc44bf6decd96ebaf5c021c185ac1..bc97cdaa10bcc5e99860241f0ee0ef8cfff8434e 100644
--- a/src/org/jetbrains/java/decompiler/main/Fernflower.java
+++ b/src/org/jetbrains/java/decompiler/main/Fernflower.java
@@ -116,6 +116,10 @@ public class Fernflower implements IDecompiledData {
     structContext.saveContext();
   }
 
+  public void addWhitelist(String prefix) {
+    classProcessor.addWhitelist(prefix);
+  }
+
   public void clearContext() {
     DecompilerContext.setCurrentContext(null);
   }
@@ -123,7 +127,7 @@ public class Fernflower implements IDecompiledData {
   @Override
   public String getClassEntryName(StructClass cl, String entryName) {
     ClassNode node = classProcessor.getMapRootClasses().get(cl.qualifiedName);
-    if (node.type != ClassNode.CLASS_ROOT) {
+    if (node == null || node.type != ClassNode.CLASS_ROOT) {
       return null;
     }
     else if (converter != null) {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
index b44bf391a4914dcee3228cfbb3bbdfefec2f3527..e77afd845015501a743b091d3a3cc716497ffc75 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
@@ -66,6 +66,7 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
     Map<String, Object> mapOptions = new HashMap<>();
     List<File> sources = new ArrayList<>();
     List<File> libraries = new ArrayList<>();
+    Set<String> whitelist = new HashSet<>();
 
     boolean isOption = true;
     for (int i = 0; i < args.length - 1; ++i) { // last parameter - destination
@@ -88,6 +89,9 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
         if (arg.startsWith("-e=")) {
           addPath(libraries, arg.substring(3));
         }
+        else if (arg.startsWith("-only=")) {
+          whitelist.add(arg.substring(6));
+        }
         else {
           addPath(sources, arg);
         }
@@ -114,6 +118,9 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
     for (File source : sources) {
       decompiler.addSource(source);
     }
+    for (String prefix : whitelist) {
+      decompiler.addWhitelist(prefix);
+    }
 
     decompiler.decompileContext();
   }
@@ -151,6 +158,10 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
     engine.addLibrary(library);
   }
 
+  public void addWhitelist(String prefix) {
+    engine.addWhitelist(prefix);
+  }
+
   public void decompileContext() {
     try {
       engine.decompileContext();
