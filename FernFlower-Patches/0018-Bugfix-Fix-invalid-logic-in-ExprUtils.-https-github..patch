From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 21 Feb 2018 18:27:17 -0800
Subject: [PATCH] Bugfix: Fix invalid logic in ExprUtils.
 https://github.com/MinecraftForge/FernFlower/commit/b3171e60c99f1f1a4668b4219e7296139e77f438
 This guy's commit inverted the ACC_STATIC logic.

The logic was also wrong in that it didn't take the inner class attributes into account either. As it appears that at least the Oracle jdk places the static modifier in in this attribute if the inner class is exposed.

Example:
public interface Test {
    void foo();
    public abstract class Inner {
        abstract void bar();
    }
}

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
index 58a653a79f3dd3215b65b75ccdee314e7e71f3ad..7db79c9324a3cbe50878f18a4e398731d6047edb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExprUtil.java
@@ -8,6 +8,9 @@ import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.main.rels.ClassWrapper;
 import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
+import org.jetbrains.java.decompiler.struct.StructClass;
+import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
+import org.jetbrains.java.decompiler.struct.attr.StructInnerClassesAttribute;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -34,7 +37,7 @@ public final class ExprUtil {
       }
       mask = methodWrapper.synthParameters;
     }
-    else if (parameters > 0 && node.type == ClassNode.CLASS_MEMBER && (node.access & CodeConstants.ACC_STATIC) == 0) {
+    else if (parameters > 0 && node.type == ClassNode.CLASS_MEMBER && !isStatic(node.classStruct)) {
       // non-static member class
       mask = new ArrayList<>(Collections.nCopies(parameters, null));
       mask.set(0, new VarVersionPair(-1, 0));
@@ -42,4 +45,18 @@ public final class ExprUtil {
 
     return mask;
   }
-}
\ No newline at end of file
+
+  private static boolean isStatic(StructClass struct) {
+    if (struct.hasModifier(CodeConstants.ACC_STATIC))
+      return true;
+    if (struct.hasAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES)) {
+      StructInnerClassesAttribute attr = (StructInnerClassesAttribute)struct.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
+      for (StructInnerClassesAttribute.Entry entry : attr.getEntries()) {
+        if (entry.innerName != null && entry.innerName.equals(struct.qualifiedName)) {
+          return (entry.accessFlags & CodeConstants.ACC_STATIC) == CodeConstants.ACC_STATIC;
+        }
+      }
+    }
+    return false;
+  }
+}
