From ded50868b3d9d908540f9c895eca95f44bb0ce9f Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sat, 17 Oct 2015 00:50:20 -0400
Subject: [PATCH 093/122] Fix constants with trailing zeros and incorrect
 types.

---
 .../modules/decompiler/exps/ConstExprent.java    | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 3398924..0fc4055 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -182,16 +182,16 @@ public class ConstExprent extends Exprent {
           String doublefield;
           if (literal) {
             if (Double.isNaN(dval)) {
-              return new TextBuffer("0.0D / 0.0");
+              return new TextBuffer("0.0D / 0.0D");
             }
             else if (dval == Double.POSITIVE_INFINITY) {
-              return new TextBuffer("1.0D / 0.0");
+              return new TextBuffer("1.0D / 0.0D");
             }
             else if (dval == Double.NEGATIVE_INFINITY) {
-              return new TextBuffer("-1.0D / 0.0");
+              return new TextBuffer("-1.0D / 0.0D");
             }
             else {
-              return new TextBuffer(value.toString()).append("D");
+              return new TextBuffer(trimZeros(value.toString())).append("D");
             }
           }
           else if (Double.isNaN(dval)) {
@@ -219,16 +219,16 @@ public class ConstExprent extends Exprent {
           String floatfield;
           if (literal) {
             if (Double.isNaN(fval)) {
-              return new TextBuffer("0.0F / 0.0");
+              return new TextBuffer("0.0F / 0.0F");
             }
             else if (fval == Double.POSITIVE_INFINITY) {
-              return new TextBuffer("1.0F / 0.0");
+              return new TextBuffer("1.0F / 0.0F");
             }
             else if (fval == Double.NEGATIVE_INFINITY) {
-              return new TextBuffer("-1.0F / 0.0");
+              return new TextBuffer("-1.0F / 0.0F");
             }
             else {
-              return new TextBuffer(value.toString()).append("F");
+              return new TextBuffer(trimZeros(value.toString())).append("F");
             }
           }
           else if (Float.isNaN(fval)) {
-- 
2.21.0.windows.1

