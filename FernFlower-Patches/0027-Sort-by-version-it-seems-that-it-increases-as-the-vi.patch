From b75a7c5fc84e6da8582a01e6a772572eaf1dcdc4 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sat, 8 Aug 2015 19:43:37 -0400
Subject: [PATCH 027/122] Sort by version (it seems that it increases as the
 visitors visit the various methods), and use that to align versions with
 different instances of the same variable. Still some tweaks need to be made,
 but it's starting to look promising.

---
 .../decompiler/vars/LocalVariableTable.java   | 11 +++----
 .../modules/decompiler/vars/VarProcessor.java | 29 +++++++++++++++----
 .../StructLocalVariableTableAttribute.java    |  5 ++--
 3 files changed, 31 insertions(+), 14 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index 99025a5..e5fbec8 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -9,7 +9,6 @@ import java.util.Set;
 public class LocalVariableTable {
   private Map<Integer, Set<LVTVariable>> startpoints;
   private ArrayList<LVTVariable> allLVT;
-  private Map<VarVersionPair, String> mapVarNames;
 private Map<Integer, List<LVTVariable>> mapLVT;
 
   public LocalVariableTable(int len) {
@@ -33,7 +32,7 @@ private Map<Integer, List<LVTVariable>> mapLVT;
         mine.merge(other);
       }
     }
-    mapVarNames = null; // Invalidate the cache and rebuild it.
+    mapLVT = null; // Invalidate the cache and rebuild it.
   }
 
   public LVTVariable find(Integer index, List<Integer> offsets) {
@@ -51,15 +50,14 @@ private Map<Integer, List<LVTVariable>> mapLVT;
     return null;
   }
 
-  public Map<VarVersionPair, String> getMapVarNames() {
-    if (mapVarNames == null)
+  public Map<Integer, List<LVTVariable>> getMapVarNames() {
+    if (mapLVT == null)
       buildNameMap();
-    return mapVarNames;
+    return mapLVT;
   }
 
   private void buildNameMap() {
     Map<Integer, Integer> versions = new HashMap<Integer, Integer>();
-    mapVarNames = new HashMap<VarVersionPair, String>();
     mapLVT = new HashMap<Integer,List<LVTVariable>>();
     for (LVTVariable lvt : allLVT) {
       Integer idx = versions.get(lvt.index);
@@ -74,7 +72,6 @@ private Map<Integer, List<LVTVariable>> mapLVT;
           mapLVT.put(lvt.index, lvtList);
       }
       lvtList.add(lvt);
-      mapVarNames.put(new VarVersionPair(lvt.index, idx.intValue()), lvt.name);
     }
   }
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index a2a79f5..ccd1bd6 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -52,7 +52,7 @@ private LocalVariableTable lvt;
     new VarDefinitionHelper(root, mt, this).setVarDefinitions();
   }
 
-  public void setDebugVarNames(Map<VarVersionPair, String> mapDebugVarNames) {
+  public void setDebugVarNames(Map<Integer, List<LVTVariable>> mapDebugVarNames) {
     if (varVersions == null) {
       return;
     }
@@ -68,16 +68,35 @@ private LocalVariableTable lvt;
     });
 
     Map<String, Integer> mapNames = new HashMap<String, Integer>();
-
+    Map<Integer,SortedSet<VarVersionPair>> indexedPairs = new HashMap<Integer,SortedSet<VarVersionPair>>();
+    Comparator<VarVersionPair> vvpVersionComparator = new Comparator<VarVersionPair>() {
+        @Override
+        public int compare(VarVersionPair o1, VarVersionPair o2) {
+            return o1.version - o2.version;
+        }
+    };
+    for (Entry<Integer, VarVersionPair> vvp : mapOriginalVarIndices.entrySet()) {
+        SortedSet<VarVersionPair> set = indexedPairs.get(vvp.getValue().var);
+        if (set == null) {
+            set = new TreeSet<VarVersionPair>(vvpVersionComparator);
+            indexedPairs.put(vvp.getValue().var, set);
+        }
+        set.add(vvp.getValue());
+    }
     for (VarVersionPair pair : listVars) {
       String name = mapVarNames.get(pair);
 
       VarVersionPair key = mapOriginalVarIndices.get(pair.var);
+
       boolean lvtName = false;
       if (key != null) {
-        if (mapDebugVarNames.containsKey(key)) {
-          name = mapDebugVarNames.get(key);
-          lvtName = true;
+        if (indexedPairs.containsKey(key.var)) {
+          int veridx = indexedPairs.get(key.var).headSet(key).size();
+          List<LVTVariable> list = mapDebugVarNames.get(key.var);
+          if (list.size()>veridx) {
+              name = list.get(veridx).name;
+              lvtName = true;
+          }
         }
       }
 
diff --git a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
index 4b00061..a983b27 100644
--- a/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
+++ b/src/org/jetbrains/java/decompiler/struct/attr/StructLocalVariableTableAttribute.java
@@ -23,6 +23,7 @@ import org.jetbrains.java.decompiler.util.DataInputFullStream;
 
 import java.io.IOException;
 import java.util.Collections;
+import java.util.List;
 import java.util.Map;
 
 /*
@@ -37,7 +38,7 @@ import java.util.Map;
 */
 public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
 
-  private Map<VarVersionPair, String> EMPTY_LVT = Collections.emptyMap();
+  private Map<Integer, List<LVTVariable>> EMPTY_LVT = Collections.emptyMap();
   private LocalVariableTable lvt;
 
   @Override
@@ -65,7 +66,7 @@ public class StructLocalVariableTableAttribute extends StructGeneralAttribute {
     attr.lvt = lvt;
   }
 
-  public Map<VarVersionPair, String> getMapVarNames() {
+  public Map<Integer, List<LVTVariable>> getMapVarNames() {
     return lvt == null ? EMPTY_LVT : lvt.getMapVarNames();
   }
 
-- 
2.21.0.windows.1

