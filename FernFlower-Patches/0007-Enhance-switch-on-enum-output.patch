From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Sat, 15 Apr 2017 17:32:28 -0700
Subject: [PATCH] Enhance switch on enum output


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 5606e91f5ea92b921d73ea9d85360a8d924c14fc..983298ea03a14f6b1911b5e43be3538d7e768ddc 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -2,6 +2,7 @@
 package org.jetbrains.java.decompiler.main.rels;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.code.cfg.BasicBlock;
 import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
@@ -11,8 +12,11 @@ import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.*;
 import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectGraph;
 import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectNode;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.DoStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.SequenceStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
@@ -85,6 +89,125 @@ public class NestedClassProcessor {
       processClass(root, child);
     }
   }
+  /**
+   * When Java introduced Enums they aded the ability to use them in Switch statements.
+   * This was done in a purely syntax sugar way using the old switch on int methods.
+   * The compiler creates a synthetic class with a static int array field.
+   * To support enums changing post compile, It initializes this field with a length of the current enum length.
+   * And then for every referenced enum value it adds a mapping in the form of:
+   *   try {
+   *     field[Enum.VALUE.ordinal()] = 1;
+   *   } catch (FieldNotFoundException e) {}
+   *
+   * If a class has multiple switches on multiple enums, the compiler adds the init and try list to the BEGINNING of the static initalizer.
+   * But they add the field to the END of the fields list.
+   */
+  /*
+  private void gatherEnumSwitchMaps(ClassNode node) {
+    for (ClassNode child : node.nested) {
+      gatherEnumSwitchMaps(child);
+    }
+
+    MethodWrapper clinit = node.getWrapper().getMethodWrapper("<clinit>", "()V");
+    if (clinit == null || clinit.root == null || clinit.root.getFirst().type != Statement.TYPE_SEQUENCE) {
+      return;
+    }
+
+    final int STATIC_FINAL_SYNTHETIC = CodeConstants.ACC_STATIC | CodeConstants.ACC_STATIC | CodeConstants.ACC_FINAL | CodeConstants.ACC_SYNTHETIC;
+    Set<String> potentialFields = new HashSet<String>();
+    for (StructField fd : node.classStruct.getFields()) {
+      if ((fd.getAccessFlags() & STATIC_FINAL_SYNTHETIC) == STATIC_FINAL_SYNTHETIC && "[I".equals(fd.getDescriptor())) {
+        potentialFields.add(fd.getName());
+      }
+    }
+
+    if (potentialFields.size() == 0) {
+      return;
+    }
+
+    SequenceStatement seq = (SequenceStatement)clinit.root.getFirst();
+    for (int x = 0; x < seq.getStats().size();) {
+      Statement stat = seq.getStats().get(x);
+      if (stat.type != Statement.TYPE_BASICBLOCK || stat.getExprents() == null || stat.getExprents().size() != 1 || stat.getExprents().get(0).type != Exprent.EXPRENT_ASSIGNMENT) {
+        break;
+      }
+      AssignmentExprent ass = (AssignmentExprent)stat.getExprents().get(0);
+      if (ass.getLeft().type != Exprent.EXPRENT_FIELD || ass.getRight().type != Exprent.EXPRENT_NEW) {
+        break;
+      }
+      FieldExprent mapField = (FieldExprent)ass.getLeft();
+      NewExprent _new = ((NewExprent)ass.getRight());
+      if (!mapField.getClassname().equals(node.classStruct.qualifiedName) || !potentialFields.contains(mapField.getName()) ||
+          _new.getNewType().type != CodeConstants.TYPE_INT || _new.getNewType().arrayDim != 1 ||
+          _new.getLstDims().size() != 1 || _new.getLstDims().get(0).type != Exprent.EXPRENT_FUNCTION) {
+        break;
+      }
+      FunctionExprent func = (FunctionExprent)_new.getLstDims().get(0);
+      if (func.getFuncType() != FunctionExprent.FUNCTION_ARRAY_LENGTH || func.getLstOperands().size() != 1 || func.getLstOperands().get(0).type != Exprent.EXPRENT_INVOCATION) {
+        break;
+      }
+      InvocationExprent invoc = (InvocationExprent)func.getLstOperands().get(0);
+      if (!"values".equals(invoc.getName()) || !("()[L" + invoc.getClassname() + ";").equals(invoc.getStringDescriptor())) {
+        break;
+      }
+
+      String fieldName = mapField.getName();
+      String enumName = invoc.getClassname();
+      Map<Integer, String> idToName = new HashMap<Integer, String>();
+
+      boolean replace = false;
+      int y = x;
+      while (++y < seq.getStats().size()) {
+        if (seq.getStats().get(y).type != Statement.TYPE_TRYCATCH) {
+          break;
+        }
+        CatchStatement _try = (CatchStatement)seq.getStats().get(y);
+        Statement first = _try.getFirst();
+        List<Exprent> exprents = first.getExprents();
+        if (_try.getVars().size() != 1 || !"java/lang/NoSuchFieldError".equals(_try.getVars().get(0).getVarType().value) ||
+            first.type != Statement.TYPE_BASICBLOCK || exprents == null || exprents.size() != 1 || exprents.get(0).type != Exprent.EXPRENT_ASSIGNMENT) {
+          break;
+        }
+        ass = (AssignmentExprent)exprents.get(0);
+        if (ass.getRight().type != Exprent.EXPRENT_CONST || (!(((ConstExprent)ass.getRight()).getValue() instanceof Integer)) ||
+            ass.getLeft().type != Exprent.EXPRENT_ARRAY){
+          break;
+        }
+        ArrayExprent array = (ArrayExprent)ass.getLeft();
+        if (array.getArray().type != Exprent.EXPRENT_FIELD || !array.getArray().equals(mapField) || array.getIndex().type != Exprent.EXPRENT_INVOCATION) {
+          break;
+        }
+        invoc = (InvocationExprent)array.getIndex();
+        if (!enumName.equals(invoc.getClassname()) || !"ordinal".equals(invoc.getName()) || !"()I".equals(invoc.getStringDescriptor()) ||
+            invoc.getInstance().type != Exprent.EXPRENT_FIELD) {
+          break;
+        }
+
+        FieldExprent enumField = (FieldExprent)invoc.getInstance();
+        if (!enumName.equals(enumField.getClassname()) || !enumField.isStatic()) {
+          break;
+        }
+
+        idToName.put((Integer)((ConstExprent)ass.getRight()).getValue(), enumField.getName());
+        seq.replaceStatement(_try, getNewEmptyStatement());
+        replace = true;
+      }
+
+      if (replace) {
+        seq.replaceStatement(seq.getStats().get(x), getNewEmptyStatement());
+        node.classStruct.getEnumSwitchMap().put(fieldName, idToName);
+        node.getWrapper().getHiddenMembers().add(InterpreterUtil.makeUniqueKey(fieldName, "[I"));
+      }
+      x = y;
+    }
+  }*/
+
+  private Statement getNewEmptyStatement() {
+    BasicBlockStatement bstat = new BasicBlockStatement(new BasicBlock(
+      DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER)));
+    bstat.setExprents(new ArrayList<Exprent>());
+    return bstat;
+  }
 
   private static void setLambdaVars(ClassNode parent, ClassNode child) {
     if (child.lambdaInformation.is_method_reference) { // method reference, no code and no parameters
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
index b49bf394176bd007bb7aa3571370ca281ea56024..23d28d7fe91ad5c8f5ca9f9ad5d247ae69fd7b93 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/SwitchHelper.java
@@ -8,7 +8,7 @@ import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
 import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.*;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.SwitchStatement;
-
+import org.jetbrains.java.decompiler.struct.StructField;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -67,13 +67,48 @@ public class SwitchHelper {
     }
   }
 
+  static final int STATIC_FINAL_SYNTHETIC = CodeConstants.ACC_STATIC | CodeConstants.ACC_STATIC | CodeConstants.ACC_FINAL | CodeConstants.ACC_SYNTHETIC;
+  /**
+   * When Java introduced Enums they aded the ability to use them in Switch statements.
+   * This was done in a purely syntax sugar way using the old switch on int methods.
+   * The compiler creates a synthetic class with a static int array field.
+   * To support enums changing post compile, It initializes this field with a length of the current enum length.
+   * And then for every referenced enum value it adds a mapping in the form of:
+   *   try {
+   *     field[Enum.VALUE.ordinal()] = 1;
+   *   } catch (FieldNotFoundException e) {}
+   *
+   * If a class has multiple switches on multiple enums, the compiler adds the init and try list to the BEGINNING of the static initalizer.
+   * But they add the field to the END of the fields list.
+   * 
+   * Note: SOME compilers name the field starting with $SwitchMap, so if we do not have full context this can be a guess.
+   * But Obfuscated/renamed code could cause issues
+   */
   private static boolean isEnumArray(Exprent exprent) {
     if (exprent instanceof ArrayExprent) {
-      Exprent field = ((ArrayExprent)exprent).getArray();
-      Exprent index = ((ArrayExprent)exprent).getIndex();
-      return field instanceof FieldExprent &&
-             (((FieldExprent)field).getName().startsWith("$SwitchMap") ||
-              (index instanceof InvocationExprent && ((InvocationExprent)index).getName().equals("ordinal")));
+      ArrayExprent arr = (ArrayExprent) exprent;
+      Exprent tmp = arr.getArray();
+      if (tmp instanceof FieldExprent) {
+        FieldExprent field = (FieldExprent)tmp;
+        Exprent index = arr.getIndex();
+        ClassesProcessor.ClassNode classNode = DecompilerContext.getClassProcessor().getMapRootClasses().get(field.getClassname());
+        
+        if (classNode == null || !"[I".equals(field.getDescriptor().descriptorString)) {
+          return field.getName().startsWith("$SwitchMap") || //This is non-standard but we don't have any more information so..
+            (index instanceof InvocationExprent && ((InvocationExprent) index).getName().equals("ordinal"));
+        }
+        
+        StructField stField = classNode.getWrapper().getClassStruct().getField(field.getName(), field.getDescriptor().descriptorString);
+        if ((stField.getAccessFlags() & STATIC_FINAL_SYNTHETIC) != STATIC_FINAL_SYNTHETIC) {
+          return false;
+        }
+        
+        if ((classNode.getWrapper().getClassStruct().getAccessFlags() & CodeConstants.ACC_SYNTHETIC) == CodeConstants.ACC_SYNTHETIC) {
+          return true; //TODO: Find a way to check the structure of the initalizer?
+          //Exprent init = classNode.getWrapper().getStaticFieldInitializers().getWithKey(InterpreterUtil.makeUniqueKey(field.getName(), field.getDescriptor().descriptorString));
+          //Above is null because we haven't preocess the class yet?
+        }
+      }
     }
     return false;
   }
diff --git a/testData/classes/pkg/TestEnum$1.class b/testData/classes/pkg/TestEnum$1.class
index fb5c29f40e2fe3fd9b19075f906072fc4b546339..cfff174c14e68acae8ae05607147141d86ade3ef 100644
GIT binary patch
delta 261
zcmaFOw2xWz)W2Q(7#J8#7(}@km>C4w8HCswgeQvH+6ejNCnx5FB^G5SCgr4tfCxqg
zmXeIjVnzlY&%C_UBIlgM;^I^wSHPzrJ6%5{wYbDJuQXT1(0XEkt&j*K10SmJ#C3u7
zMhq-KYZw?fw6tXyw=*zq1hSbJ*nuP)10#?WVc-CgJYY5l11AGFkO#Dnffq=!0omGM
rK2Qu@qZpD#MyN(+20oy2CI)^60U!;sSdf8%3&`XGn#KgA85}qOgYPD_

delta 178
zcmdnT{F+Jh)W2Q(7#J8#7=*YOm>GE48Ti;41SX2wPMlz^D9FgbSCE~qACg*J;+j{Q
zt76E=z~h;hms;eUlUQ7wT0HS?V2%O<3s55i1BaHj4C8hN#*IKWBLh2-WCPL+3?e|1
sgMkxBvH^LLU|FCFbY)^dL%4vFObpx%JU|*^C_j+J1=Pv}q!}DI01Rpu)c^nh

diff --git a/testData/classes/pkg/TestEnum$2.class b/testData/classes/pkg/TestEnum$2.class
index 3dedba7752417dc953984d6750c47d95d9ff7410..8503c8571788def2ab045dd16661d4dcca7909f3 100644
GIT binary patch
delta 343
zcmeyxJcU*9)W2Q(7#J8#805GZm>I;`86?;lBpDglY%=pQOYGPgq$VonCkXlECnx5F
zB^G5SCgr4tfCxqgmXeIjVnzl5pMvak{gBk+64$)aToog0Mg~Tpu#ityVp*boPGVlV
zesD=qW?ni-qJ)t_7*%~pWkIU-#6DX_nTco2SY#O)yeC>&PPS*XsrO`HV_*e3jay4w
zMpu%BaXSO!Mj)4ofeT2oF)#v2Nd|5psQ`31P#FUc122#UvG^GHp<)6If($G`wL%QS
zK#~(Es|~~;y%>f`gAL<>NHXwPfK6j&5CN)XVi08z1JW#DQ`vzmDIkj#h}j&ZfU-c~
Jz`-C5p#eGAGZz2=

delta 145
zcmbQj`ioid)W2Q(7#J8#7{s|4m>C4v83frGgcupvY%=pQOYGPggeNNIPyA%fC^}h>
z(Tqimk->YSmF47xj5dtQlkYK#IWRJC0kyL+Fak+QAj!?Z10*@YJO;2R<3=C{S(!A@
YB3_^v69XRu|KuDdMRpM&kHLWh0DhMfjsO4v

diff --git a/testData/classes/pkg/TestEnum$3.class b/testData/classes/pkg/TestEnum$3.class
new file mode 100644
index 0000000000000000000000000000000000000000..dc94a7b9fa9a1f1cdebf3289cef7bf02a494d872
GIT binary patch
literal 867
zcmZ`&YflqF6g{)ucH4CeZBdG~D%Dk6MarXEu?9(?BxoNW+SC|~$#lDE7na>-yT$m6
z{46Gf7{d?H|3tjAKmZ@f%)R%Vxn~}CW`3T0KL$`jMa6C0i6M@=F^Xmd%qh61B8&Ti
z)?*Ys5HKgAhr&D(Ca<8N;0Z%oZ+)_SV^HTqeYo4#+vdoxI^#VCX?u$y`=4RG{ds6I
zL|+-U<yihILnvS9Fv#m}kNC-&<(Q4}Uf1;6ylWGas<{TYJKVDbJ|p8TpBuZhbbx8&
z3~I|Adxp7b2~qrfH}gAupVPEe$FSXz<@D>OKX7{r<`g{DP{e|UBoZ1Hv7})cC5DWU
z6m9PGiw(CmHU^uPY4@t0=Xyf$Ov9uQJV#l>3t?7-d5JQ^1QnuqzO=r~plvyh>8;y*
zG%`mFiHoV5-5t~LDdVz)A$b{|)k;1sS!AEvV=>EgzOY^UE3ZP8Y;J5YO#O3AalM}9
za670s-B0q*Nk}hM7wHUF<N>=RhUhd>wUn5p$1y=~NJ`9zIsoLUfW*+HB84gP*9rYX
zh$7(Q5!mq$^&6xE(L#ri<>nX2Z;ucOc;x`pqKAl`@&Qx{hJ&;KULzQ}fEqz1fL{?t
zjMht&&tZ<PCyWJDuuA?l-k?stf%o`8K7<>z9~BbWGG>s+G(`fXso#S7P9e4<O#P}M
e>CGTDLur6a-vD?_Jw@_3c_gCrfwGui%lroClCh2e

literal 0
HcmV?d00001

diff --git a/testData/classes/pkg/TestEnum$Type.class b/testData/classes/pkg/TestEnum$Type.class
index 1e27737076d4e4680d1239e46a3aed67e3e065a4..92f267523f644eaaaab02638df6cd69940b59640 100644
GIT binary patch
delta 338
zcmZvWJx;?w5QX158?Uj<PmBa8goJ=YzzHz{mnmrI(jYAQ1zE=6m?$wwRGb0%B2WcU
zAS61t1r0}_LyVmkt@Pf^es47Mt-g!i$M4H402l5IIJR^&u`RGDVCyi@%A~DfRwvlb
z61y5onRf)7hu&w$>|dYD=v0nEc^3IzCJa2512VIJDQ~3{$vALMl2I53DQAr$PcFi7
z+GLTnhpxarLuq&wIG#UFj^dkv<=qW^11mT%u!d?nVPE$y6findH@W?c;v4uQbqbbA
z)tppOrrMaMu!>5~X`WI`RCiIJ2MD`WnLvHY@&DrjH7pQc&ogysC~Tmf{wT+_>DMN#
R95pacuG3DA9n2k;{{XgWF;oBm

delta 229
zcmX@i{+!L`)W2Q(7#J8#7z{WWSQwPJ7?c@Q*cpV`8PvEKco@_{ga!u#FBec!1EfNe
zgFz5PYq2wEPqaBb*@97Naw20En+}66JA>Zji;NO%`aBF$4APU|Gd_w_Vqjum1RBpJ
z#G<u>f%O0b%LX8ikwF|tvVmpffGU8hfutBvOrC)m2pJgIwX|inGq7#MP%Hx!VPcSF
k;9!trkewXN94HSFk!Mf<%P2DN18FXx(JTzA415k!05YH%f&c&j

diff --git a/testData/classes/pkg/TestEnum.class b/testData/classes/pkg/TestEnum.class
index 036f3e623b9467f49e9ec677abc19ea8c9156cb2..12bb8932e0bdf70f6b5d82adc8b325376e6abfcd 100644
GIT binary patch
literal 2479
zcmZ`*ZBr9h6n-{uyIB_vi=t3$0i%W>Ac}1*6hj4D6veton_6v`u;Oai&}8FF-#_)Q
zbf*2%hADLFwBzUgfc~6LpK}u+fi#)D=iYPAdCvRJ{{8PCe*u`l_a+i>WLZjbxoct>
zAL$s=@v(_P<PCfxR9)Un;uJm=+51U6z-I=|n)n>9fguA~1H*E^lEi5gOfL5gtO};5
z<DrQYb&NFwkA&&#cx>Q_2p3J9gd@y#9f6LL25UYDyz<qeTd8;z9UB^AOD{G&4UxHV
z4Tl#to~(^6d6jT3sIE^6_kt`JWtq^RRW#TOkKL#4SkVpE#+<P12Wynm)5|jpcjp`p
zNAB&%NIZ3mRgapTnV|!hv8$z3T0gSj2i~pf`ifUxa#xDv=t^txp@zZCL5oBCjo1sN
zf?Hg6%f6^LFk*qbPAF|%Lo_qA%vi%mJ{?I+`GFr!Yv^tRJuiYu$6pKFuv(`2WILgQ
zF12`+mZVM!k``*{YICO{(+0PVpnweCsRp6H?k)QjpW)qh%M2{^$}>Sw3f<5z1&pe@
z$){OwqwE#j&|773%#a0jp7~+nk%kT@bPG>zx*LrgooVC6e5)JdDv-$Y^X!7>>=JEW
zHf)U4emM;{+QJ>^m{vuVtX9^J&5L4+oo7rHijAW6H^nJ!I@O{%IV}-8rE0n0UGt@r
zI(GVbRNSyIiD_A;ER4!Dj#>BuWllzO>suUPrc}FP;T%RRgs570if1~WTX=ylb$n&v
zYkXtjTe(?9jxDx0J8R)AGMuAktn|2rA>nES${xICBDG-)-yvsVSY7X>OXAxP$CPxo
z;MWH@UMQ9VhI=$K)RdsbmB(HoWJ)eI7e>whWRqB9kef9dZ-C?JdgriX(zKf1Nha%Z
zkA0w*%Bz0h7S)9DoZ9o<c~J>H8NE`KGjObK%`c7J<~t*#LC=*pOqWt<WfOKogo*+6
zn*H8!lOxghKYppn<D}0m&)v!m@YOfSw{arZBZUD-Sqep22}PN5N<^g2K&n@og6Aav
z=P?cq7kC;Zm7iHdbPKUpi2uTqhKpPi>dvP81THn?Cx|B+rk%+C4*eApA|Gjyf0G=m
zE`_(mHurDiGFP!Utj^^9%1yIkKlT(gywh-=?Mx|AoIo5=QZqZ;XB*n~L4<S@g4sZL
zS6R7C3{D621?f6zoYW%HHj>$q-(c?d=Cs1<R~D@XmV_nA6fZ1XK@Kt0@n`TJc}dC5
zRc<7(+1-f$;Yo5<t>I913)bjQN(A#H!jJLk=OdYs6wK7nVISVYksmQ2+mzaN%eGT(
z56RZ%wuY`6j&9-D=+D&a;UjqRbc#qfMI^4MD$ghmai8Ho%LW)GZ-hA+WmeAP8XIDs
zoDW&BA{`HTvsaC3BmOz+C!uFd)6{$Q6ex6!)+D8iG$L{6Dy5PA*|Zf}wl1=pO&#yk
z2XR-&2ecniyX&}tr~+STfInol61<bjkMzXaRKAWsU6<O$H+S*PU3`<(uUF8-O;thS
z;udYjVK9uHHvK_i0S{gxk+%;=w-MRI@s~J}w^Q_>XA`~ZrZaB8#v0J4P4vCQ$-HeR
z?AL2}V;lXO7|{QudbEb)PCiycual40(C6e6H4HeLh)SO7!`7`jvI`wJie7&CoMSns
oVKc4u4!h0TNL$@OnsktvJVlC>!LOkN&g6ReLBwCqpsu3-0aPyDs{jB1

literal 1652
zcmZ`(>r&HD5dKatNg9JdfJ!S0)T%8PD+1n%P=u<LN|i#j<BT(*Mkd;(Oq)963-~<R
zj^fDZ_}hna+;du?H}hjR+5L9++dX^o`_K2E0G9AVg@k)ttolf-sYqa5##I^jRh-9$
zf=#Z4GpS&bgC59us9;*fK-2z6K}bQ$hY399{w*141(y^&;ihdBW4Ood85vJyJY(?e
zemFE4w3Ka|m5riNt(sK^S8{>jZ2IusL2TEoI!U`$igW7?E*801VqgT+({GLUMyzPq
z2eGVEvFroF$>H33dM}w}7<}2CLwau%YrMp8B--QjY?NOUnZdMWo7=V0zFFBd_KReZ
zMO5YuLnzW)G1^^(l^EQSXpTWzv24p(W$^cjOL2rRYaQ5zQ>##!ct22Yy^eBWKEOE7
z6zLQFA82T&W;<5N%vn{78hmP0jFRb?m37-LJBDMGZJLn3t@5UMSTPHRW4@;OUg=XP
z)mdplFxu)1>^ZT{P|;7PshLe#DHL1NoNA-Smt&;^A73SsYPMXf6wC(}Kfi&0TXc;V
z*Ki$+Tr6m~!uR{Ch8@tlXzdH9VGg^rWosJ3xU69kQ?!%qh%m)Zb1R$Iu!o$6P%nm7
zmd$E-&fS-U`?P;foi?!}XY)RI3&pZc#7861wpKIyZ_R>3%`LYNR@|C+8?1E^+9O*x
z$er2TWEkm~R&#;qCMI*q?Zh-)&hzv;kP-pjF+iGn6q>pdn%V&1;$s1Zf_#Sbt-yx}
zqF|VzuMlbesCBr%!t)E>PxQqwOHvX(o$zy*Kf$|%Rn?`LZ;*dM>cul$L#%}lh-{Sc
zb646aB1R`mvPr`WHzCxS*$G`?N4@wkZjj$aiFw>2p?O@Gw3oC-aYyjY%zuH}UFmWw
zatX_X^l|<-=><ceM7LTzCn=GKjIv1N>dv7H@a+~jL^UM>bGGvVPan2Ajrq>W5Izbt
z@ah;+UO(eLf~x`T7z26zEJY7CFeE&~UR|$agz_~odW^BW?w9m)b&MY&&_GcBLE-K?
zv~1o}$51x!tz$Hsm+A;+8*ra;_KTT}(9eDpL5$P!1+WU8T5QhnF5<-Ag%w;R9VGh%
RF}#on(r=%hghG)*{{<v4Oc4M8

diff --git a/testData/results/TestEnum.dec b/testData/results/TestEnum.dec
index 069e4efe131ecd59c97e979a3ab4f1fcb8170cfc..ce2511cc9f80e7162f6d7d3e8d061757a38ba125 100644
--- a/testData/results/TestEnum.dec
+++ b/testData/results/TestEnum.dec
@@ -21,10 +21,32 @@ public enum TestEnum {
       this("?", (TestEnum.Type)null);// 36
    }
 
-   private TestEnum(@Deprecated String var3, TestEnum.Type var4) {
-      this.s = var3;// 37
+   private TestEnum(@Deprecated String s, TestEnum.Type t) {
+      this.s = s;// 37
    }
 
+   private void testSwitch() {
+      switch(this) {// 40
+      case E1:
+         System.out.println("E1");// 42
+         break;// 43
+      case E2:
+         System.out.println("E2");// 45
+         break;// 46
+      case E3:
+         System.out.println("E3");// 48
+         break;// 49
+      case E4:
+         System.out.println("E4");// 51
+      }
+
+      switch(TestEnum.Type.ODD) {// 55
+      case ODD:
+         System.out.println("ODD");// 57
+      default:
+      }
+   }// 59
+
    private static enum Type {
       ODD,
       EVEN;
@@ -66,6 +88,67 @@ class 'pkg/TestEnum' {
       a      24
       b      25
    }
+
+   method 'testSwitch ()V' {
+      0      28
+      1      28
+      2      28
+      3      28
+      4      28
+      5      28
+      6      28
+      8      28
+      28      30
+      29      30
+      2a      30
+      2b      30
+      2c      30
+      2d      30
+      2e      30
+      2f      30
+      30      31
+      33      33
+      34      33
+      35      33
+      36      33
+      37      33
+      38      33
+      39      33
+      3a      33
+      3b      34
+      3e      36
+      3f      36
+      40      36
+      41      36
+      42      36
+      43      36
+      44      36
+      45      36
+      46      37
+      49      39
+      4a      39
+      4b      39
+      4c      39
+      4d      39
+      4e      39
+      51      42
+      52      42
+      53      42
+      54      42
+      55      42
+      56      42
+      57      42
+      58      42
+      59      42
+      5b      42
+      6c      44
+      6d      44
+      6e      44
+      6f      44
+      70      44
+      71      44
+      74      47
+   }
 }
 
 Lines mapping:
@@ -74,3 +157,14 @@ Lines mapping:
 32 <-> 18
 36 <-> 21
 37 <-> 25
+40 <-> 29
+42 <-> 31
+43 <-> 32
+45 <-> 34
+46 <-> 35
+48 <-> 37
+49 <-> 38
+51 <-> 40
+55 <-> 43
+57 <-> 45
+59 <-> 48
diff --git a/testData/src/pkg/TestEnum.java b/testData/src/pkg/TestEnum.java
index e474d341d406981b924706ac065121f2a9603ed4..974898e766f59086aa471ea2ca48352478bece3a 100644
--- a/testData/src/pkg/TestEnum.java
+++ b/testData/src/pkg/TestEnum.java
@@ -35,4 +35,26 @@ public enum TestEnum {
 
   private TestEnum() { this("?", null); }
   private TestEnum(@Deprecated String s, Type t) { this.s = s; }
+
+  private void testSwitch() {
+    switch (this) {
+      case E1:
+        System.out.println("E1");
+        break;
+      case E2:
+        System.out.println("E2");
+        break;
+      case E3:
+        System.out.println("E3");
+        break;
+      case E4:
+        System.out.println("E4");
+        break;
+    }
+
+    switch (Type.ODD) {
+      case ODD:
+        System.out.println("ODD");
+    }
+  }
 }
