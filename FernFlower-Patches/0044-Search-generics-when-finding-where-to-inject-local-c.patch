From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 17 Nov 2021 13:09:07 -0800
Subject: [PATCH] Search generics when finding where to inject local classes.


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 1518aae1cf006454e11471b52c54267991b65596..fe68098cb9bc2ecfb002438a7b1ed9748d957497 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -25,6 +25,7 @@ import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTableAttribute.LocalVariable;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.util.DotExporter;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
@@ -924,9 +925,15 @@ public class NestedClassProcessor {
         case Exprent.EXPRENT_VAR -> {
           VarExprent varExpr = (VarExprent)expr;
           if (varExpr.isDefinition()) {
-            VarType varType = varExpr.getVarType();
-            if (classType.equals(varType) || (varType.getArrayDim() > 0 && classType.getValue().equals(varType.getValue()))) {
-              res = true;
+            Stack<VarType> stack = new Stack<>();
+            stack.push(varExpr.getDefinitionType());
+            while (!stack.isEmpty()) {
+              VarType varType = stack.pop();
+              if (classType.equals(varType) || (varType != null && varType.getArrayDim() > 0 && classType.getValue().equals(varType.getValue()))) {
+                res = true;
+              } else if (varType != null && varType.isGeneric()) {
+                ((GenericType)varType).getArguments().forEach(stack::push);
+              }
             }
           }
         }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index 8807a1534a587af70c2779f2bf8f7cdf3ec9d7f2..0dd8768a10a4edb5901d3112145df58c871b68c9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -151,7 +151,8 @@ public class VarExprent extends Exprent {
   }
   */
 
-  private void appendDefinitionType(TextBuffer buffer) {
+
+  public VarType getDefinitionType() {
     if (DecompilerContext.getOption(IFernflowerPreferences.USE_DEBUG_VAR_NAMES)) {
 
       if (lvt != null) {
@@ -159,13 +160,11 @@ public class VarExprent extends Exprent {
           if (lvt.getSignature() != null) {
             GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(lvt.getSignature());
             if (descriptor != null) {
-              buffer.append(ExprProcessor.getCastTypeName(descriptor.type, Collections.emptyList()));
-              return;
+              return descriptor.type;
             }
           }
         }
-        buffer.append(ExprProcessor.getCastTypeName(getVarType(), Collections.emptyList()));
-        return;
+        return getVarType();
       }
 
       MethodWrapper method = (MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
@@ -185,8 +184,7 @@ public class VarExprent extends Exprent {
               if (signature != null) {
                 GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(signature);
                 if (descriptor != null) {
-                  buffer.append(ExprProcessor.getCastTypeName(descriptor.type, Collections.emptyList()));
-                  return;
+                  return descriptor.type;
                 }
               }
             }
@@ -197,15 +195,17 @@ public class VarExprent extends Exprent {
           if (attr != null) {
             String descriptor = attr.getDescriptor(originalIndex, visibleOffset);
             if (descriptor != null) {
-              buffer.append(ExprProcessor.getCastTypeName(new VarType(descriptor), Collections.emptyList()));
-              return;
+              return new VarType(descriptor);
             }
           }
         }
       }
     }
+    return getVarType();
+  }
 
-    buffer.append(ExprProcessor.getCastTypeName(getVarType(), Collections.emptyList()));
+  private void appendDefinitionType(TextBuffer buffer) {
+    buffer.append(ExprProcessor.getCastTypeName(getDefinitionType(), Collections.emptyList()));
   }
 
   @Override
