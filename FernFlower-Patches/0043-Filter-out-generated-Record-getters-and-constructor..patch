From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Thu, 11 Nov 2021 23:44:28 -0800
Subject: [PATCH] Filter out generated Record getters and constructor. Make
 canonical constructors that can be compact compact


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 507d0d89949ca203a0b33b42150ef35765bbb487..551c7de2d4ab785bbdafea06605a19af740ea20f 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -350,6 +350,18 @@ public class ClassWriter {
           return str.startsWith("return this." + name + "<invokedynamic>(this");
         }
       }
+
+      // Default getters
+      for (StructRecordComponent rec : cl.getRecordComponents()) {
+        if (name.equals(rec.getName()) && descriptor.equals("()" + rec.getDescriptor())) {
+          if (code.countLines() == 1) {
+            String str = code.toString().trim();
+            return str.startsWith("return this." + mt.getName() + ';');
+          } else {
+            return false;
+          }
+        }
+      }
     }
     return false;
   }
@@ -671,7 +683,7 @@ public class ClassWriter {
       boolean isAnnotation = cl.hasModifier(CodeConstants.ACC_ANNOTATION);
       boolean isEnum = cl.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
       boolean isDeprecated = mt.hasAttribute(StructGeneralAttribute.ATTRIBUTE_DEPRECATED);
-      boolean clInit = false, init = false, dInit = false;
+      boolean clInit = false, init = false, dInit = false, compact = false;
 
       MethodDescriptor md = MethodDescriptor.parseDescriptor(mt, node);
 
@@ -723,6 +735,41 @@ public class ClassWriter {
           name = node.simpleName;
           init = true;
         }
+
+        if (cl.getRecordComponents() != null) {
+          StringBuilder buf = new StringBuilder("(");
+          for (StructRecordComponent rec : cl.getRecordComponents()) {
+            buf.append(rec.getDescriptor());
+          }
+          String desc = buf.append(")V").toString();
+          if (desc.equals(mt.getDescriptor())) {
+            boolean[] found = new boolean[1];
+            compact = methodWrapper.getOrBuildGraph().iterateExprents((exprent) -> {
+              if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+                AssignmentExprent assignment = (AssignmentExprent) exprent;
+                if (assignment.getLeft().type == Exprent.EXPRENT_FIELD && assignment.getRight().type != Exprent.EXPRENT_VAR) {
+                  return 1;
+                } else if (assignment.getLeft().type == Exprent.EXPRENT_FIELD) {
+                  found[0] = true;
+                  return 0;
+                }
+              }
+              return found[0] ? 1 : 0;
+            });
+            if (compact) {
+              methodWrapper.getOrBuildGraph().iterateExprents((exprent) -> {
+                if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+                  AssignmentExprent assignment = (AssignmentExprent) exprent;
+                  if (assignment.getLeft().type == Exprent.EXPRENT_FIELD) {
+                    return 2;
+                  }
+                }
+                return 0;
+              });
+              hideMethod = methodWrapper.getOrBuildGraph().iterateExprents((exprent) -> 1);
+            }
+          }
+        }
       }
       else if (CodeConstants.CLINIT_NAME.equals(name)) {
         name = "";
@@ -747,6 +794,7 @@ public class ClassWriter {
         }
 
         buffer.append(toValidJavaIdentifier(name));
+        if (!compact) {
         buffer.append('(');
 
         List<VarVersionPair> mask = methodWrapper.synthParameters;
@@ -832,6 +880,7 @@ public class ClassWriter {
             buffer.append(ExprProcessor.getCastTypeName(type, Collections.emptyList()));
           }
         }
+        }
       }
 
       tracer.incrementCurrentSourceLine(buffer.countLines(start_index_method));
@@ -865,7 +914,7 @@ public class ClassWriter {
             BytecodeMappingTracer codeTracer = new BytecodeMappingTracer(tracer.getCurrentSourceLine());
             TextBuffer code = root.toJava(indent + 1, codeTracer);
 
-            hideMethod = code.length() == 0 &&
+            hideMethod |= code.length() == 0 &&
               (clInit || dInit || hideConstructor(node, !typeAnnotations.isEmpty(), init, throwsExceptions, paramCount, flags)) ||
               isSyntheticRecordMethod(cl, mt, code);
 
