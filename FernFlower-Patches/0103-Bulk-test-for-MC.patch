From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 25 Oct 2015 10:29:37 -0400
Subject: [PATCH] Bulk test for MC


diff --git a/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java b/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
index f2c344a925dda9d1081aa867987147fd3fb3664e..77eda8797ac72262d0c6dabbbd06a0ed0f481596 100644
--- a/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
+++ b/test/org/jetbrains/java/decompiler/DecompilerTestFixture.java
@@ -46,23 +46,26 @@ public class DecompilerTestFixture {
     assertTrue("current dir: " + new File("").getAbsolutePath(), isTestDataDir(testDataDir));
 
     //noinspection SSBasedInspection
-    tempDir = File.createTempFile("decompiler_test_", "_dir");
-    assertTrue(tempDir.delete());
-
+    tempDir = getRandomDir();
+    if (tempDir.exists()) tempDir.delete();
     targetDir = new File(tempDir, "decompiled");
-    assertTrue(targetDir.mkdirs());
+    targetDir.mkdirs();
     decompiler = new ConsoleDecompiler(this.targetDir, new HashMap<String, Object>() {{
       put(IFernflowerPreferences.LOG_LEVEL, "warn");
       put(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES, "1");
       put(IFernflowerPreferences.REMOVE_SYNTHETIC, "1");
       put(IFernflowerPreferences.REMOVE_BRIDGE, "1");
       put(IFernflowerPreferences.LITERALS_AS_IS, "1");
-      put(IFernflowerPreferences.UNIT_TEST_MODE, "1");
+      put(IFernflowerPreferences.MAX_PROCESSING_METHOD, "60000");
       putAll(options);
     }});
   }
 
-  public void tearDown() {
+  protected File getRandomDir() throws IOException {
+	  return File.createTempFile("decompiler_test_", "_dir");
+  }
+
+public void tearDown() {
     if (tempDir != null && cleanup) {
       delete(tempDir);
     }
@@ -95,6 +98,5 @@ public class DecompilerTestFixture {
         for (File f : files) delete(f);
       }
     }
-    assertTrue(file.delete());
   }
 }
diff --git a/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java b/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
index 087c8102c11b1258d8e3f1615fe64f745b8587d6..660d0313e68f87b72b694b886ab321792fb5a8bc 100644
--- a/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
+++ b/test/org/jetbrains/java/decompiler/MinecraftDecompilationTest.java
@@ -20,43 +20,54 @@ import org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import java.io.*;
+import java.math.BigInteger;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.Enumeration;
 import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
 public class MinecraftDecompilationTest {
   private DecompilerTestFixture fixture;
 
   private static final String MC_JAR = "minecraft_ff_in.jar";
   @Before
   public void setUp() throws IOException {
-    fixture = new DecompilerTestFixture();
-    // -din=1 -rbr=0 -dgs=1 -asc=1 -rsy=0
+    fixture = new DecompilerTestFixture() {
+      @Override
+      public File getRandomDir() {
+        return new File("/run/user/1000/fftest");
+      }
+    };
     Map<String,Object> mcFFOptions = new HashMap<String,Object>() {{
         put(IFernflowerPreferences.DECOMPILE_INNER,"1");
         put(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES,"1");
         put(IFernflowerPreferences.ASCII_STRING_CHARACTERS,"1");
         put(IFernflowerPreferences.INCLUDE_ENTIRE_CLASSPATH, "1");
+        put(IFernflowerPreferences.REMOVE_BRIDGE, "1");
+        put(IFernflowerPreferences.REMOVE_SYNTHETIC, "1");
+        put(IFernflowerPreferences.NEW_LINE_SEPARATOR, "0");
     }};
     fixture.setUp(mcFFOptions);
     if (!new File(fixture.getTestDataDir(), MC_JAR).exists()) {
-        throw new RuntimeException("Missing "+MC_JAR+" in testData dir - aborting");
+      throw new RuntimeException("Missing "+MC_JAR+" in testData dir - aborting");
     }
   }
 
   @After
   public void tearDown() {
-//    fixture.tearDown();
-//    fixture = null;
+    fixture.tearDown();
+    fixture = null;
   }
 
 //  @Test
@@ -72,32 +83,97 @@ public class MinecraftDecompilationTest {
 //  }
 
   @Test
-  public void testJar() {
+  public void testJar() throws IOException {
+    Map<String,String> md5s = new HashMap<String,String>();
+	MessageDigest md5;
+    try {
+	  md5 = MessageDigest.getInstance("MD5");
+	} catch (NoSuchAlgorithmException e1) {
+      md5 = null;
+	}
+
+    System.out.println("Decompiling base");
     ConsoleDecompiler decompiler = fixture.getDecompiler();
     decompiler.addSpace(new File(fixture.getTestDataDir(), MC_JAR), true);
     decompiler.decompileContext();
 
-    File unpacked = new File(fixture.getTempDir(), "unpacked");
-    unpack(new File(fixture.getTargetDir(), "bulk.jar"), unpacked);
+    Map<String, HashSet<String>> variants = new HashMap<String, HashSet<String>>();
+
+    Map<String, String> valid = readJar(new File(fixture.getTargetDir(), MC_JAR),md5s,md5);
+    
+    File outRoot = new File("/run/user/1000/ffbulk");
+    outRoot.mkdirs();
+    for (int x = 0; x < 10000; x++) {
+      this.tearDown();
+      this.setUp();
+      System.out.println(x + "/10000 Starting Decompile");
+      decompiler = fixture.getDecompiler();
+      decompiler.addSpace(new File(fixture.getTestDataDir(), MC_JAR), true);
+      decompiler.decompileContext();
+      System.gc();
 
+      Map<String, String> data = readJar(new File(fixture.getTargetDir(), MC_JAR),null,null);
+
+      for (Entry<String, String> e : data.entrySet()) {
+        String found = e.getValue();
+        String expected = valid.get(e.getKey());
+        if (!found.equals(expected)) {
+          HashSet<String> set = variants.get(e.getKey());
+          if (set == null) {
+            set = new HashSet<String>();
+            set.add(expected);
+            variants.put(e.getKey(), set);
+          }
+          String md5digest = md5digest(found, md5);
+		if (!set.contains(found)) {
+            System.out.println("New Variant: " + e.getKey());
+            set.add(found);
+            System.out.println("Orig md5:"+md5s.get(e.getKey()));
+            System.out.println("Variant md5: "+md5digest);
+            writeFile(expected,e.getKey(),outRoot);
+            writeFile(found,e.getKey()+"."+md5digest,outRoot);
+          }
+          else
+          {
+            System.out.println("Existing Variant: " + e.getKey());
+            System.out.println("Variant md5: "+md5digest);
+          }
+        }
+      }
+    }
 //    compareDirectories(new File(fixture.getTestDataDir(), "bulk"), unpacked);
   }
 
-  private static void unpack(File archive, File targetDir) {
+  private static void writeFile(String fl, String path, File outRoot) {
+	  File out = new File(outRoot,path);
+	  out.getParentFile().mkdirs();
+      try {
+		FileWriter fw = new FileWriter(out.getAbsoluteFile());
+		  fw.write(fl);
+		  fw.close();
+	} catch (IOException e) {
+		e.printStackTrace();
+	}
+  }
+  private static Map<String, String> readJar(File archive, Map<String, String> md5s, MessageDigest md5) {
+    Map<String, String> ret = new HashMap<String, String>();
     try {
       ZipFile zip = new ZipFile(archive);
       try {
         Enumeration<? extends ZipEntry> entries = zip.entries();
         while (entries.hasMoreElements()) {
           ZipEntry entry = entries.nextElement();
-          if (!entry.isDirectory()) {
-            File file = new File(targetDir, entry.getName());
-            assertTrue(file.getParentFile().mkdirs() || file.getParentFile().isDirectory());
+          if (!entry.isDirectory() && entry.getName().endsWith(".java")) {
             InputStream in = zip.getInputStream(entry);
-            OutputStream out = new FileOutputStream(file);
+            ByteArrayOutputStream out = new ByteArrayOutputStream((int)entry.getSize());
             InterpreterUtil.copyStream(in, out);
             out.close();
             in.close();
+            String fileContent = new String(out.toByteArray());
+			ret.put(entry.getName(), fileContent);
+			if (md5!=null && md5s != null) {
+				md5s.put(entry.getName(), md5digest(fileContent, md5));
+			}
           }
         }
       }
@@ -108,17 +184,14 @@ public class MinecraftDecompilationTest {
     catch (IOException e) {
       throw new RuntimeException(e);
     }
+    return ret;
   }
-
-  private static void compareDirectories(File expected, File actual) {
-    String[] expectedList = expected.list();
-    String[] actualList = actual.list();
-    assertThat(actualList, Matchers.arrayContainingInAnyOrder(expectedList));
-    for (String name : expectedList) {
-      File child = new File(expected, name);
-      if (child.isDirectory()) {
-        compareDirectories(child, new File(actual, name));
-      }
-    }
+  private static String md5digest(String input, MessageDigest md5) {
+	  md5.reset();
+	  try {
+		return String.format("0%032x",new BigInteger(1,md5.digest(input.getBytes("UTF-8"))));
+	} catch (UnsupportedEncodingException e) {
+		return null;
+	}
   }
 }
