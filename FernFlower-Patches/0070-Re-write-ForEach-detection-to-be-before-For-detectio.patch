From fd8b2a3bfada12e9d371230cb329f64ab801544e Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Sun, 4 Oct 2015 04:23:24 -0700
Subject: [PATCH 070/122] Re-write ForEach detection to be before For
 detection. Fixes issues where incrementors would be added back in
 incorrectly.

---
 .../modules/decompiler/MergeHelper.java       | 159 ++++++------------
 1 file changed, 56 insertions(+), 103 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index 0e7f1ab..f354f06 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -20,6 +20,7 @@ import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.ArrayExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.FunctionExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
@@ -67,10 +68,9 @@ public class MergeHelper {
 
         // identify a while loop
         if (matchWhile(stat)) {
-          // identify a for loop - subtype of while
-          matchFor(stat);
-          // identify for each loop,
-          matchForEach(stat);
+          if (!matchForEach(stat)) {
+            matchFor(stat);
+          }
         }
         else {
           // identify a do{}while loop
@@ -79,8 +79,9 @@ public class MergeHelper {
 
         break;
       case DoStatement.LOOP_WHILE:
-        matchFor(stat);
-        matchForEach(stat);
+        if (!matchForEach(stat)) {
+          matchFor(stat);
+        }
     }
 
     return (stat.getLooptype() != oldloop);
@@ -402,8 +403,10 @@ public class MergeHelper {
   }
 
   private static boolean matchForEach(DoStatement stat) {
-    AssignmentExprent firstDoExprent = null, initDoExprent = null, initCopyExprent = null;
-    Statement firstData, preData = null;
+    AssignmentExprent firstDoExprent = null;
+    AssignmentExprent[] initExprents = new AssignmentExprent[3];
+    Statement firstData = null, preData = null, lastData = null;
+    Exprent lastExprent = null;
 
     // search for an initializing exprent
     Statement current = stat;
@@ -421,14 +424,13 @@ public class MergeHelper {
           preData = current.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).get(0);
           preData = getLastDirectData(preData);
           if (preData != null && !preData.getExprents().isEmpty()) {
-            Exprent exprent = preData.getExprents().get(preData.getExprents().size() - 1);
-            if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
-              initDoExprent = (AssignmentExprent)exprent;
-              if (preData.getExprents().size() >= 2) {
-                exprent = preData.getExprents().get(preData.getExprents().size() - 2);
-                if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
-                  initCopyExprent = (AssignmentExprent)exprent;
-                }
+            int size = preData.getExprents().size();
+            for (int x = 0; x < initExprents.length; x++) {
+              if (size > x) {
+                 Exprent exprent = preData.getExprents().get(size - 1 - x);
+                 if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+                   initExprents[x] = (AssignmentExprent)exprent;
+                 }
               }
             }
           }
@@ -444,10 +446,14 @@ public class MergeHelper {
     if (firstData != null && firstData.getExprents().get(0).type == Exprent.EXPRENT_ASSIGNMENT) {
       firstDoExprent = (AssignmentExprent)firstData.getExprents().get(0);
     }
+    lastData = getLastDirectData(stat.getFirst());
+    if (lastData != null && !lastData.getExprents().isEmpty()) {
+      lastExprent = lastData.getExprents().get(lastData.getExprents().size() - 1);
+    }
 
-    if (stat.getLooptype() == DoStatement.LOOP_WHILE && initDoExprent != null && firstDoExprent != null) {
-      if (initDoExprent.type == Exprent.EXPRENT_ASSIGNMENT &&
-          isIteratorCall(((AssignmentExprent)initDoExprent).getRight())) {
+    if (stat.getLooptype() == DoStatement.LOOP_WHILE && initExprents[0] != null && firstDoExprent != null) {
+      if (initExprents[0].type == Exprent.EXPRENT_ASSIGNMENT &&
+          isIteratorCall(((AssignmentExprent)initExprents[0]).getRight())) {
 
         if (!isHasNextCall(drillNots(stat.getConditionExprent())) ||
             firstDoExprent.type != Exprent.EXPRENT_ASSIGNMENT) {
@@ -463,13 +469,13 @@ public class MergeHelper {
         InvocationExprent hnext = (InvocationExprent)getUncast(drillNots(stat.getConditionExprent()));
         if (next.getInstance().type != Exprent.EXPRENT_VAR ||
             hnext.getInstance().type != Exprent.EXPRENT_VAR ||
-            ExprentUtil.isVarReferenced((VarExprent)initDoExprent.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+            ExprentUtil.isVarReferenced((VarExprent)initExprents[0].getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
           return false;
         }
 
-        InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initDoExprent).getRight();
+        InvocationExprent holder = (InvocationExprent)((AssignmentExprent)initExprents[0]).getRight();
 
-        holder.getInstance().addBytecodeOffsets(initDoExprent.bytecode);
+        holder.getInstance().addBytecodeOffsets(initExprents[0].bytecode);
         ass.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
         if (stat.getIncExprent() != null) {
           holder.getInstance().addBytecodeOffsets(stat.getIncExprent().bytecode);
@@ -481,88 +487,31 @@ public class MergeHelper {
         stat.setLooptype(DoStatement.LOOP_FOREACH);
         stat.setInitExprent(ass.getLeft());
         stat.setIncExprent(holder.getInstance());
-        preData.getExprents().remove(initDoExprent);
+        preData.getExprents().remove(initExprents[0]);
         firstData.getExprents().remove(firstDoExprent);
+        return true;
       }
-    }
-    else if (stat.getLooptype() == DoStatement.LOOP_FOR) {
-      if (isType(stat.getInitExprent(), Exprent.EXPRENT_ASSIGNMENT) &&
-          isIteratorCall(((AssignmentExprent)stat.getInitExprent()).getRight()) &&
-          isType(stat.getConditionExprent(), Exprent.EXPRENT_FUNCTION)) {
-
-        Exprent exp = drillNots(stat.getConditionExprent());
-        if (!isHasNextCall(exp) ||
-            !isType(stat.getIncExprent(), Exprent.EXPRENT_ASSIGNMENT)) {
+      else if (initExprents[0] != null && initExprents[1] != null && firstDoExprent != null) {
+        if (firstDoExprent.getRight().type != Exprent.EXPRENT_ARRAY || firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR) {
           return false;
         }
 
-        AssignmentExprent itr = (AssignmentExprent)stat.getInitExprent();
-        InvocationExprent hnext = (InvocationExprent)exp;
-        if (itr.getLeft().type != Exprent.EXPRENT_VAR || hnext.getInstance().type != Exprent.EXPRENT_VAR) {
+        if (lastExprent == null || lastExprent.type != Exprent.EXPRENT_FUNCTION) {
           return false;
         }
 
-        AssignmentExprent ass = (AssignmentExprent)stat.getIncExprent();
-        if (!isNextCall(ass.getRight()) || ass.getLeft().type != Exprent.EXPRENT_VAR) {
-
-          if (firstDoExprent == null || !isNextCall(firstDoExprent.getRight()) ||
-              firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR) {
-            return false;
-          }
-
-          InvocationExprent next = (InvocationExprent)getUncast(firstDoExprent.getRight());
-          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
-            return false;
-          }
-
-          //Move the inc exprent back to the end of the body and remove the .next call
-          Statement last = getLastDirectData(stat.getFirst());
-          InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
-
-          firstData.getExprents().remove(firstDoExprent);
-          last.getExprents().add(stat.getIncExprent());
-
-          firstDoExprent.getLeft().addBytecodeOffsets(stat.getInitExprent().bytecode);
-          firstDoExprent.getLeft().addBytecodeOffsets(stat.getIncExprent().bytecode);
-          firstDoExprent.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-
-          stat.setLooptype(DoStatement.LOOP_FOREACH);
-          stat.setInitExprent(firstDoExprent.getLeft());
-          stat.setIncExprent(holder.getInstance());
-        }
-        else {
-          InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
-          if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
-            return false;
-          }
-
-          InvocationExprent holder = (InvocationExprent)getUncast(((AssignmentExprent)stat.getInitExprent()).getRight());
-
-          holder.getInstance().addBytecodeOffsets(stat.getInitExprent().bytecode);
-          ass.getLeft().addBytecodeOffsets(stat.getIncExprent().bytecode);
-
-          stat.setLooptype(DoStatement.LOOP_FOREACH);
-          stat.setInitExprent(ass.getLeft());
-          stat.setIncExprent(holder.getInstance());
-        }
-      }
-      else if (initDoExprent != null && initDoExprent.getRight().type == Exprent.EXPRENT_FUNCTION) {
-        if (firstDoExprent == null ||
-            firstDoExprent.getRight().type != Exprent.EXPRENT_ARRAY ||
-            firstDoExprent.getLeft().type != Exprent.EXPRENT_VAR ||
-            !isType(stat.getIncExprent(), Exprent.EXPRENT_FUNCTION) ||
-            !isType(stat.getInitExprent(), Exprent.EXPRENT_ASSIGNMENT)) {
+        if (initExprents[0].getRight().type != Exprent.EXPRENT_CONST ||
+            initExprents[1].getRight().type != Exprent.EXPRENT_FUNCTION) {
           return false;
         }
 
-        FunctionExprent funcRight = (FunctionExprent)initDoExprent.getRight();
-        FunctionExprent funcInc = (FunctionExprent)stat.getIncExprent();
-        ArrayExprent arr = (ArrayExprent)firstDoExprent.getRight();
+        FunctionExprent funcRight = (FunctionExprent)initExprents[1].getRight();
+        FunctionExprent funcInc   = (FunctionExprent)lastExprent;
+        ArrayExprent    arr       = (ArrayExprent)firstDoExprent.getRight();
+        int incType = funcInc.getFuncType();
 
         if (funcRight.getFuncType() != FunctionExprent.FUNCTION_ARRAY_LENGTH ||
-            (funcInc.getFuncType() != FunctionExprent.FUNCTION_PPI && funcInc.getFuncType() != FunctionExprent.FUNCTION_IPP) ||
+            (incType != FunctionExprent.FUNCTION_PPI && incType != FunctionExprent.FUNCTION_IPP) ||
             arr.getIndex().type != Exprent.EXPRENT_VAR ||
             arr.getArray().type != Exprent.EXPRENT_VAR) {
             return false;
@@ -577,33 +526,37 @@ public class MergeHelper {
           return false;
         }
 
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(initDoExprent.bytecode);
-        funcRight.getLstOperands().get(0).addBytecodeOffsets(stat.getIncExprent().bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[0].bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(initExprents[1].bytecode);
+        funcRight.getLstOperands().get(0).addBytecodeOffsets(lastExprent.bytecode);
         firstDoExprent.getLeft().addBytecodeOffsets(firstDoExprent.bytecode);
-        firstDoExprent.getLeft().addBytecodeOffsets(stat.getInitExprent().bytecode);
+        firstDoExprent.getLeft().addBytecodeOffsets(initExprents[0].bytecode);
 
         stat.setLooptype(DoStatement.LOOP_FOREACH);
         stat.setInitExprent(firstDoExprent.getLeft());
         stat.setIncExprent(funcRight.getLstOperands().get(0));
-        preData.getExprents().remove(initDoExprent);
+        preData.getExprents().remove(initExprents[0]);
+        preData.getExprents().remove(initExprents[1]);
         firstData.getExprents().remove(firstDoExprent);
+        lastData.getExprents().remove(lastExprent);
 
-
-        if (initCopyExprent != null && initCopyExprent.getLeft().type == Exprent.EXPRENT_VAR) {
-          VarExprent copy = (VarExprent)initCopyExprent.getLeft();
+        if (initExprents[2] != null && initExprents[2].getLeft().type == Exprent.EXPRENT_VAR) {
+          VarExprent copy = (VarExprent)initExprents[2].getLeft();
           if (copy.getIndex() == array.getIndex() && copy.getVersion() == array.getVersion()) {
-            preData.getExprents().remove(initCopyExprent);
-            initCopyExprent.getRight().addBytecodeOffsets(initCopyExprent.bytecode);
-            initCopyExprent.getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
-            stat.setIncExprent(initCopyExprent.getRight());
+            preData.getExprents().remove(initExprents[2]);
+            initExprents[2].getRight().addBytecodeOffsets(initExprents[2].bytecode);
+            initExprents[2].getRight().addBytecodeOffsets(stat.getIncExprent().bytecode);
+            stat.setIncExprent(initExprents[2].getRight());
           }
         }
+
+        return true;
       }
     }
 
     //cleanEmptyStatements(stat, firstData); //TODO: Look into this and see what it does...
 
-    return true;
+    return false;
   }
 
   private static boolean isType(Exprent exp, int type) { //This is just a helper macro, Wish java had real macros.
-- 
2.21.0.windows.1

