From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Fri, 2 Oct 2015 01:34:53 -0700
Subject: [PATCH] Cleanup unwanted variables in synchronized headers, fix
 switch cases leaking variables incorrectly


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index 5844b931ca6c6f2634455d2d91c6eca0680bcc5b..a22d269e7e2609576be0c7fb3752ac0c710d3158 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -205,6 +205,8 @@ public class MethodProcessorRunnable implements Runnable {
 
     SecondaryFunctionsHelper.identifySecondaryFunctions(root);
 
+    SynchronizedHelper.cleanSynchronizedVar(root);
+
     varProc.setVarDefinitions(root);
 
     // must be the last invocation, because it makes the statement structure inconsistent
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
index 5ba4dcd0944696d200a8a5857d7afccc3737e5fb..5adf32354b34abd479184f162ea22d45a342a271 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/MergeHelper.java
@@ -26,6 +26,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.*;
+import org.jetbrains.java.decompiler.util.ExprentUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -462,7 +463,7 @@ public class MergeHelper {
         InvocationExprent hnext = (InvocationExprent)getUncast(drillNots(stat.getConditionExprent()));
         if (next.getInstance().type != Exprent.EXPRENT_VAR ||
             hnext.getInstance().type != Exprent.EXPRENT_VAR ||
-            isVarReferenced((VarExprent)initDoExprent.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+            ExprentUtil.isVarReferenced((VarExprent)initDoExprent.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
           return false;
         }
 
@@ -511,7 +512,7 @@ public class MergeHelper {
 
           InvocationExprent next = (InvocationExprent)getUncast(firstDoExprent.getRight());
           if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
             return false;
           }
 
@@ -533,7 +534,7 @@ public class MergeHelper {
         else {
           InvocationExprent next = (InvocationExprent)getUncast(ass.getRight());
           if (next.getInstance().type != Exprent.EXPRENT_VAR ||
-              isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
+              ExprentUtil.isVarReferenced((VarExprent)itr.getLeft(), stat, (VarExprent)next.getInstance(), (VarExprent)hnext.getInstance())) {
             return false;
           }
 
@@ -605,53 +606,6 @@ public class MergeHelper {
     return true;
   }
 
-  private static boolean isVarReferenced(VarExprent var, Statement stat, VarExprent... whitelist) {
-    if (stat.getExprents() == null) {
-      for (Object obj : stat.getSequentialObjects()) {
-        if (obj instanceof Statement) {
-          if (isVarReferenced(var, (Statement)obj, whitelist)) {
-            return true;
-          }
-        }
-        else if (obj instanceof Exprent) {
-          if (isVarReferenced(var, (Exprent)obj, whitelist)) {
-            return true;
-          }
-        }
-      }
-    }
-    else {
-      for (Exprent exp : stat.getExprents()) {
-        if (isVarReferenced(var, exp, whitelist)) {
-          return true;
-        }
-      }
-    }
-    return false;
-  }
-
-  private static boolean isVarReferenced(VarExprent target, Exprent exp, VarExprent... whitelist) {
-    List<Exprent> lst = exp.getAllExprents(true);
-    lst.add(exp);
-    for (Exprent ex : lst) {
-      if (ex != target && ex.type == Exprent.EXPRENT_VAR) {
-        VarExprent var = (VarExprent)ex;
-        if (var.getIndex() == target.getIndex() && var.getVersion() == target.getVersion()) {
-          boolean allowed = false;
-          for (VarExprent white : whitelist) {
-            if (var == white) {
-              allowed = true;
-            }
-          }
-          if (!allowed) {
-            return true;
-          }
-        }
-      }
-    }
-    return false;
-  }
-
   private static boolean isType(Exprent exp, int type) { //This is just a helper macro, Wish java had real macros.
     return exp != null && exp.type == type;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/SynchronizedHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/SynchronizedHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..371fc5aafff4dd8f7dc86bc476e97f8e199366b2
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/SynchronizedHelper.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2000-2015 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.modules.decompiler;
+
+import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.MonitorExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.SynchronizedStatement;
+import org.jetbrains.java.decompiler.util.ExprentUtil;
+
+public class SynchronizedHelper {
+  public static void cleanSynchronizedVar(Statement stat) {
+    for (Statement st : stat.getStats()) {
+      cleanSynchronizedVar(st);
+    }
+
+    if (stat.type == Statement.TYPE_SYNCRONIZED) {
+      SynchronizedStatement sync = (SynchronizedStatement)stat;
+      if (sync.getHeadexprent().type == Exprent.EXPRENT_MONITOR) {
+        MonitorExprent mon = (MonitorExprent)sync.getHeadexprent();
+        for (Exprent e : sync.getFirst().getExprents()) {
+          if (e.type == Exprent.EXPRENT_ASSIGNMENT) {
+            AssignmentExprent ass = (AssignmentExprent)e;
+            if (ass.getLeft().type == Exprent.EXPRENT_VAR) {
+              VarExprent var = (VarExprent)ass.getLeft();
+              if (ass.getRight().equals(mon.getValue()) && !ExprentUtil.isVarReferenced(var, stat.getParent())) {
+                sync.getFirst().getExprents().remove(e);
+                break;
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 8ae12fe552787580c73728af83502a1de26d8d5a..2259ce1c9b2bc515fd588ff44a2d152567ab3cf4 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -638,6 +638,15 @@ public class VarDefinitionHelper {
                 leaked.putAll(leaked_n); //First is outside the scope so leak!
               }
             }
+            else if (stat.type == Statement.TYPE_SWITCH ||
+                     stat.type == Statement.TYPE_SYNCRONIZED) {
+              if (obj == stat.getFirst()) {
+                leaked.putAll(leaked_n); //First is outside the scope so leak!
+              }
+              else {
+                leaked_n.clear();
+              }
+            }
             this_vars.putAll(leaked_n);
           }
         }
diff --git a/src/org/jetbrains/java/decompiler/util/ExprentUtil.java b/src/org/jetbrains/java/decompiler/util/ExprentUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..39ce7ff03344f2c0dc9a23e85663af003e312fc6
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/util/ExprentUtil.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2000-2014 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jetbrains.java.decompiler.util;
+
+import java.util.List;
+
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+
+public class ExprentUtil {
+  public static boolean isVarReferenced(VarExprent var, Statement stat, VarExprent... whitelist) {
+    if (stat.getExprents() == null) {
+      for (Object obj : stat.getSequentialObjects()) {
+        if (obj instanceof Statement) {
+          if (isVarReferenced(var, (Statement)obj, whitelist)) {
+            return true;
+          }
+        }
+        else if (obj instanceof Exprent) {
+          if (isVarReferenced(var, (Exprent)obj, whitelist)) {
+            return true;
+          }
+        }
+      }
+    }
+    else {
+      for (Exprent exp : stat.getExprents()) {
+        if (isVarReferenced(var, exp, whitelist)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  private static boolean isVarReferenced(VarExprent target, Exprent exp, VarExprent... whitelist) {
+    List<Exprent> lst = exp.getAllExprents(true);
+    lst.add(exp);
+    for (Exprent ex : lst) {
+      if (ex != target && ex.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)ex;
+        if (var.getIndex() == target.getIndex() && var.getVersion() == target.getVersion()) {
+          boolean allowed = false;
+          for (VarExprent white : whitelist) {
+            if (var == white) {
+              allowed = true;
+            }
+            }
+          if (!allowed) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }
+}
