From 59732c39518f9dc24da57d846df7adceaf806dbf Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Fri, 6 Nov 2015 02:30:26 -0500
Subject: [PATCH 112/122] Fix up some name issues. Still outstanding:
 propogating the parent context into child methods. Current placement in
 insertLocalVars is too late.

---
 .../jetbrains/java/decompiler/main/ClassesProcessor.java  | 8 ++++++++
 .../java/decompiler/main/rels/NestedClassProcessor.java   | 1 -
 .../decompiler/modules/decompiler/vars/LVTVariable.java   | 4 +++-
 .../jetbrains/java/decompiler/util/JADNameProvider.java   | 3 ++-
 test/org/jetbrains/java/decompiler/LVTTest.java           | 2 +-
 5 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 0060021..b3bd44e 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -24,6 +24,7 @@ import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.main.extern.IIdentifierRenamer;
 import org.jetbrains.java.decompiler.main.rels.ClassWrapper;
 import org.jetbrains.java.decompiler.main.rels.LambdaProcessor;
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.main.rels.NestedClassProcessor;
 import org.jetbrains.java.decompiler.main.rels.NestedMemberAccess;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
@@ -334,6 +335,13 @@ public class ClassesProcessor {
     node.wrapper = wrapper;
 
     for (ClassNode nd : node.nested) {
+      // Stuff the parent context into enclosed child methods
+      if (nd.enclosingMethod != null) {
+        MethodWrapper encmeth = wrapper.getMethods().getWithKey(nd.enclosingMethod);
+        for (final MethodWrapper meth : nd.getWrapper().getMethods()) {
+          meth.methodStruct.renamer.addParentContext(encmeth.methodStruct.renamer);
+        }
+      }
       initWrappers(nd);
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 07ac606..9be9edb 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -577,7 +577,6 @@ public class NestedClassProcessor {
     for (final MethodWrapper meth : child.getWrapper().getMethods()) {
 
       if (meth.root != null) { // neither abstract nor native
-        if (encmeth != null) { meth.methodStruct.renamer.addParentContext(encmeth.methodStruct.renamer); }
         // local var names
         HashMap<VarVersionPair, String> mapNewNames = new HashMap<VarVersionPair, String>();
         // local var types
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
index cb376d9..16f2bfb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
@@ -88,6 +88,8 @@ public class LVTVariable implements Comparable<LVTVariable> {
   }
 
   public LVTVariable rename(String newName) {
-    return new LVTVariable(newName, desc, start, end, index, isLVTT);
+    LVTVariable lvtVariable = new LVTVariable(newName, desc, start, end, index, isLVTT);
+    lvtVariable.sig = this.sig;
+    return lvtVariable;
   }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/util/JADNameProvider.java b/src/org/jetbrains/java/decompiler/util/JADNameProvider.java
index 010ef5f..4c0c976 100644
--- a/src/org/jetbrains/java/decompiler/util/JADNameProvider.java
+++ b/src/org/jetbrains/java/decompiler/util/JADNameProvider.java
@@ -46,6 +46,7 @@ public class JADNameProvider implements IVariableNameProvider {
       remap.put("long", "int");
     }
 
+    @Override
     public void addParentContext(IVariableNameProvider iparent) {
         JADNameProvider parent = (JADNameProvider) iparent;
         last = new HashMap<String, Holder>();
@@ -94,7 +95,7 @@ public class JADNameProvider implements IVariableNameProvider {
           continue;
         }
         if (type.indexOf('<') != -1) {
-          type = type.substring(0, type.indexOf('<') - 1);
+          type = type.substring(0, type.indexOf('<'));
         }
         if (type.indexOf('.') != -1) {
           type = type.substring(type.lastIndexOf('.')+1);
diff --git a/test/org/jetbrains/java/decompiler/LVTTest.java b/test/org/jetbrains/java/decompiler/LVTTest.java
index ff2457b..b4af1f7 100644
--- a/test/org/jetbrains/java/decompiler/LVTTest.java
+++ b/test/org/jetbrains/java/decompiler/LVTTest.java
@@ -59,5 +59,5 @@ public class LVTTest extends SingleClassesTestBase {
 //  @Test public void testMCAbstractResourcePack() { doTest("net/minecraft/client/resources/AbstractResourcePack"); }
 //  @Test public void testMCGuiShareToLan() { doTest("net/minecraft/client/gui/GuiShareToLan"); }
 //  @Test public void testMCContainerPlayer() { doTest("net/minecraft/inventory/ContainerPlayer"); }
-  @Test public void testMCContainerPlayer() { doTest("net/minecraft/inventory/ContainerPlayer"); }
+  @Test public void testMCContainerPlayer() { doTest("net/minecraft/command/PlayerSelector"); }
 }
-- 
2.21.0.windows.1

