From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zml <zml@stellardrift.ca>
Date: Fri, 23 Apr 2021 14:59:09 -0700
Subject: [PATCH] Expose line mapping information in archive mode

This allows modifying the input classes to have line numbers that match
the decompiled source, allowing for easier debugging.

Add -dcl {dump code lines} to dump this line data to a file in the output archive.
This will allow external projects to do this remapping as well.

diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
index ac1fc2f7588fb23b9d0232e675492f3d7c5c10fc..bd3535557b78014919d34c3ee5d17c34ea523e2d 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
@@ -265,7 +265,7 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -293,7 +293,11 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  public void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     String file = new File(getAbsolutePath(path), archiveName).getPath();
 
     if (!checkEntry(entryName, file)) {
@@ -302,9 +306,13 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
 
     try {
       ZipOutputStream out = mapArchiveStreams.get(file);
-      out.putNextEntry(new ZipEntry(entryName));
+      ZipEntry entry = new ZipEntry(entryName);
+      if (extra != null) {
+        entry.setExtra(extra);
+      }
+      out.putNextEntry(entry);
       if (content != null) {
-        out.write(content.getBytes(StandardCharsets.UTF_8));
+        out.write(content);
       }
     }
     catch (IOException ex) {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java b/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
index 8775e47858f45abaac925543be718bf3cc97a1bf..8e37643c54c6e961c317d9bc2c1ed5556e0b4179 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
@@ -4,6 +4,7 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.jar.JarOutputStream;
@@ -56,7 +57,7 @@ public class SingleFileSaver implements IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -80,14 +81,21 @@ public class SingleFileSaver implements IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  private void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     if (!checkEntry(entryName))
         return;
 
     try {
-      output.putNextEntry(new ZipEntry(entryName));
+      ZipEntry entry = new ZipEntry(entryName);
+      if (extra != null)
+        entry.setExtra(extra);
+      output.putNextEntry(entry);
       if (content != null)
-          output.write(content.getBytes("UTF-8"));
+        output.write(content);
     }
     catch (IOException ex) {
       String message = "Cannot write entry " + entryName + " to " + target;
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
index f434fc92661e1337acfd2ebc7576fbd43f15622f..585494c81bda9c2bde5ea284fb8851df3c1b072b 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
@@ -74,7 +74,7 @@ public class ThreadSafeResultSaver implements IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -103,7 +103,11 @@ public class ThreadSafeResultSaver implements IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  private void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     String file = new File(getAbsolutePath(path), archiveName).getPath();
     ArchiveContext ctx = getCtx(file);
     if (ctx == null) {
@@ -114,9 +118,13 @@ public class ThreadSafeResultSaver implements IResultSaver {
         return;
       }
       try {
-        ctx.stream.putNextEntry(new ZipEntry(entryName));
+        ZipEntry entry = new ZipEntry(entryName);
+        if (extra != null) {
+          entry.setExtra(extra);
+        }
+        ctx.stream.putNextEntry(entry);
         if (content != null) {
-          ctx.stream.write(content.getBytes(StandardCharsets.UTF_8));
+          ctx.stream.write(content);
         }
       } catch (IOException e) {
         DecompilerContext.getLogger().writeMessage("Cannot write entry " + entryName + " to " + file, e);
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index a2be81c2a329812c30ffe2606cae2b5f7ab43c3c..23ed017fc66747daf2f7b603df7d123835145570 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -58,6 +58,8 @@ public interface IFernflowerPreferences {
 
   String SKIP_EXTRA_FILES = "sef";
 
+  String DUMP_CODE_LINES = "dcl";
+
   Map<String, Object> DEFAULTS = getDefaults();
 
   static Map<String, Object> getDefaults() {
@@ -105,6 +107,7 @@ public interface IFernflowerPreferences {
     defaults.put(DUMP_ORIGINAL_LINES, "0");
     defaults.put(USE_JAD_VARNAMING, "0");
     defaults.put(SKIP_EXTRA_FILES, "0");
+    defaults.put(DUMP_CODE_LINES, "0");
 
     return Collections.unmodifiableMap(defaults);
   }
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java b/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
index fad1ddcfb9d2e43720b4cd3acaa165ba86e94892..e16c60301264feaeaabfaf281495807d888456db 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
@@ -1,6 +1,8 @@
 // Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 package org.jetbrains.java.decompiler.main.extern;
 
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
 import java.util.jar.Manifest;
 
 public interface IResultSaver {
@@ -8,6 +10,7 @@ public interface IResultSaver {
 
   void copyFile(String source, String path, String entryName);
 
+  // mapping: a flat array of pairs of (input line number, output line number). null when -bsm=0
   void saveClassFile(String path, String qualifiedName, String entryName, String content, int[] mapping);
 
   void createArchive(String path, String archiveName, Manifest manifest);
@@ -16,7 +19,29 @@ public interface IResultSaver {
 
   void copyEntry(String source, String path, String archiveName, String entry);
 
-  void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content);
+  @Deprecated
+  default void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {}
+
+  // mapping: a flat array of pairs of (input line number, output line number). null when -bsm=0
+  default void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    this.saveClassEntry(path, archiveName, qualifiedName, entryName, content);
+  }
 
   void closeArchive(String path, String archiveName);
+
+  default byte[] getCodeLineData(int[] mappings) {
+    if (mappings == null || mappings.length == 0) {
+      return null;
+    }
+    ByteBuffer buf = ByteBuffer.allocate(5 + (mappings.length * 2));
+    buf.order(ByteOrder.LITTLE_ENDIAN);
+    // Zip Extra entry header, described in http://www.info-zip.org/doc/appnote-19970311-iz.zip
+    buf.putShort((short)0x4646); //FF - ForgeFlower
+    buf.putShort((short)((mappings.length * 2) + 1)); // Mapping data + our version marker
+    buf.put((byte)1); // Version code, in case we want to change it in the future.
+    for (int line : mappings) {
+        buf.putShort((short)line);
+    }
+    return buf.array();
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
index 9eb1e3b71ee54001c902f11f6fa6c132c5a670fc..5e119e5030efab2bccc1bd96601075c081056339 100644
--- a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
+++ b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
@@ -201,7 +201,11 @@ public class ContextUnit {
               futures.add(executor.submit(() -> {
                 DecompilerContext.setCurrentContext(clCtx.ctx);
                 String content = decompiledData.getClassContent(clCtx.cl);
-                resultSaver.saveClassEntry(archivePath, filename, clCtx.cl.qualifiedName, clCtx.entryName, content);
+                int[] mapping = null;
+                if (DecompilerContext.getOption(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING)) {
+                  mapping = DecompilerContext.getBytecodeSourceMapper().getOriginalLinesMapping();
+                }
+                resultSaver.saveClassEntry(archivePath, filename, clCtx.cl.qualifiedName, clCtx.entryName, content, mapping);
                 DecompilerContext.setCurrentContext(null);
               }));
             }
@@ -216,7 +220,11 @@ public class ContextUnit {
             if (entryName != null) {
               if (decompiledData.processClass(cl)) {
                 String content = decompiledData.getClassContent(cl);
-                resultSaver.saveClassEntry(archivePath, filename, cl.qualifiedName, entryName, content);
+                int[] mapping = null;
+                if (DecompilerContext.getOption(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING)) {
+                  mapping = DecompilerContext.getBytecodeSourceMapper().getOriginalLinesMapping();
+                }
+                resultSaver.saveClassEntry(archivePath, filename, cl.qualifiedName, entryName, content, mapping);
               }
             }
           }
diff --git a/test/org/jetbrains/java/decompiler/MinecraftTest.java b/test/org/jetbrains/java/decompiler/MinecraftTest.java
index 8ec8c36234a30e76b7f75d54220f771afe58e264..b5f5d82ee5a62234932d8527cdc1a9ae0ec38e8a 100644
--- a/test/org/jetbrains/java/decompiler/MinecraftTest.java
+++ b/test/org/jetbrains/java/decompiler/MinecraftTest.java
@@ -69,7 +69,7 @@ public class MinecraftTest  extends SingleClassesTestBase {
           }
 
           @Override
-          public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+          public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
             RESULTS.put(qualifiedName, content);
           }
         };
