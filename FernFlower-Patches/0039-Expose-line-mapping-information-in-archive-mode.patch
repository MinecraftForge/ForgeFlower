From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: zml <zml@stellardrift.ca>
Date: Fri, 23 Apr 2021 14:59:09 -0700
Subject: [PATCH] Expose line mapping information in archive mode

This allows modifying the input classes to have line numbers that match
the decompiled source, allowing for easier debugging.

Add -dcl {dump code lines} to dump this line data to a file in the output archive.
This will allow external projects to do this remapping as well.

diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
index 7af078ed357349951585906564c1bf8239c0c810..b4869c2a756adb1c2da8b62fd8d4dc3f3f7cb2ca 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ConsoleDecompiler.java
@@ -255,7 +255,7 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -285,7 +285,11 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  public void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     String file = new File(getAbsolutePath(path), archiveName).getPath();
 
     if (!checkEntry(entryName, file)) {
@@ -296,9 +300,12 @@ public class ConsoleDecompiler implements IBytecodeProvider, IResultSaver {
       ZipOutputStream out = mapArchiveStreams.get(file);
       ZipEntry entry = new ZipEntry(entryName);
       entry.setTime(STABLE_ZIP_TIMESTAMP);
+      if (extra != null) {
+        entry.setExtra(extra);
+      }
       out.putNextEntry(entry);
       if (content != null) {
-        out.write(content.getBytes(StandardCharsets.UTF_8));
+        out.write(content);
       }
     }
     catch (IOException ex) {
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java b/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
index 651584c6758413e31edd5ee6952cb069246c10d4..272e4db3578da68aed40eb864f09eb547f85784d 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/SingleFileSaver.java
@@ -4,6 +4,7 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.jar.JarFile;
@@ -62,7 +63,7 @@ public class SingleFileSaver implements IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -88,16 +89,22 @@ public class SingleFileSaver implements IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  private void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     if (!checkEntry(entryName))
         return;
 
     try {
       ZipEntry entry = new ZipEntry(entryName);
       entry.setTime(STABLE_ZIP_TIMESTAMP);
+      if (extra != null)
+        entry.setExtra(extra);
       output.putNextEntry(entry);
       if (content != null)
-          output.write(content.getBytes("UTF-8"));
+        output.write(content);
     }
     catch (IOException ex) {
       String message = "Cannot write entry " + entryName + " to " + target;
diff --git a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
index 98fe00844f7b4d5bbdcef09e379bb8e634a96dff..114b7ab0681c661c5486e20f42993402f45debc6 100644
--- a/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/decompiler/ThreadSafeResultSaver.java
@@ -77,7 +77,7 @@ public class ThreadSafeResultSaver implements IResultSaver {
 
   @Override
   public void saveDirEntry(String path, String archiveName, String entryName) {
-    saveClassEntry(path, archiveName, null, entryName, null);
+    saveEntryData(path, archiveName, entryName, null, null);
   }
 
   @Override
@@ -106,7 +106,11 @@ public class ThreadSafeResultSaver implements IResultSaver {
   }
 
   @Override
-  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+  public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    saveEntryData(path, archiveName, entryName, content.getBytes(StandardCharsets.UTF_8), getCodeLineData(mapping));
+  }
+
+  private void saveEntryData(String path, String archiveName, String entryName, byte[] content, byte[] extra) {
     String file = new File(getAbsolutePath(path), archiveName).getPath();
     ArchiveContext ctx = getCtx(file);
     if (ctx == null) {
@@ -118,9 +122,12 @@ public class ThreadSafeResultSaver implements IResultSaver {
     try {
       ZipEntry entry = new ZipEntry(entryName);
       entry.setTime(STABLE_ZIP_TIMESTAMP);
+      if (extra != null) {
+        entry.setExtra(extra);
+      }
       ctx.stream.putNextEntry(entry);
       if (content != null) {
-        ctx.stream.write(content.getBytes(StandardCharsets.UTF_8));
+        ctx.stream.write(content);
       }
     } catch (IOException e) {
       DecompilerContext.getLogger().writeMessage("Cannot write entry " + entryName + " to " + file, e);
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index 19ba388f94dfd41c9a544ea58295ef6f69141738..2a5d4e6285a08d313ff3ba97ec07d1765d5db923 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -61,6 +61,8 @@ public interface IFernflowerPreferences {
 
   String SKIP_EXTRA_FILES = "sef";
 
+  String DUMP_CODE_LINES = "dcl";
+
   Map<String, Object> DEFAULTS = getDefaults();
 
   static Map<String, Object> getDefaults() {
@@ -111,6 +113,7 @@ public interface IFernflowerPreferences {
     defaults.put(USE_JAD_VARNAMING, "0");
     defaults.put(USE_JAD_PARAMETER_RENAMING, "0");
     defaults.put(SKIP_EXTRA_FILES, "0");
+    defaults.put(DUMP_CODE_LINES, "1");
 
     return Collections.unmodifiableMap(defaults);
   }
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java b/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
index cf03900654e427bd435ba6dc2d5a0cec8c8708e4..017d3975a3cbe06e485b65ca1b75d6c64d62c249 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IResultSaver.java
@@ -1,6 +1,10 @@
 // Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 package org.jetbrains.java.decompiler.main.extern;
 
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
 import java.util.jar.Manifest;
 
 public interface IResultSaver {
@@ -10,6 +14,7 @@ public interface IResultSaver {
 
   void copyFile(String source, String path, String entryName);
 
+  // mapping: a flat array of pairs of (input line number, output line number). null when -bsm=0
   void saveClassFile(String path, String qualifiedName, String entryName, String content, int[] mapping);
 
   void createArchive(String path, String archiveName, Manifest manifest);
@@ -18,7 +23,29 @@ public interface IResultSaver {
 
   void copyEntry(String source, String path, String archiveName, String entry);
 
-  void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content);
+  @Deprecated
+  default void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {}
+
+  // mapping: a flat array of pairs of (input line number, output line number). null when -bsm=0
+  default void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
+    this.saveClassEntry(path, archiveName, qualifiedName, entryName, content);
+  }
 
   void closeArchive(String path, String archiveName);
+
+  default byte[] getCodeLineData(int[] mappings) {
+    if (mappings == null || mappings.length == 0 || !DecompilerContext.getOption(IFernflowerPreferences.DUMP_CODE_LINES)) {
+      return null;
+    }
+    ByteBuffer buf = ByteBuffer.allocate(5 + (mappings.length * 2));
+    buf.order(ByteOrder.LITTLE_ENDIAN);
+    // Zip Extra entry header, described in http://www.info-zip.org/doc/appnote-19970311-iz.zip
+    buf.putShort((short)0x4646); //FF - ForgeFlower
+    buf.putShort((short)((mappings.length * 2) + 1)); // Mapping data + our version marker
+    buf.put((byte)1); // Version code, in case we want to change it in the future.
+    for (int line : mappings) {
+        buf.putShort((short)line);
+    }
+    return buf.array();
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
index 7d44617f437ad6e78e204d56c394be5e0d5962c4..32a48812223687f21030a448926e45a3f89061cb 100644
--- a/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
+++ b/src/org/jetbrains/java/decompiler/struct/ContextUnit.java
@@ -193,6 +193,9 @@ public class ContextUnit {
             futures.add(executor.submit(() -> {
               DecompilerContext.setCurrentContext(clCtx.ctx);
               clCtx.classContent = decompiledData.getClassContent(clCtx.cl);
+              if (DecompilerContext.getOption(IFernflowerPreferences.BYTECODE_SOURCE_MAPPING)) {
+                clCtx.mapping = DecompilerContext.getBytecodeSourceMapper().getOriginalLinesMapping();
+              }
               DecompilerContext.setCurrentContext(null);
             }));
           }
@@ -202,7 +205,7 @@ public class ContextUnit {
 
         for (final ClassContext clCtx : toProcess) {
           if (clCtx.shouldContinue) {
-            resultSaver.saveClassEntry(archivePath, filename, clCtx.cl.qualifiedName, clCtx.entryName, clCtx.classContent);
+            resultSaver.saveClassEntry(archivePath, filename, clCtx.cl.qualifiedName, clCtx.entryName, clCtx.classContent, clCtx.mapping);
           }
         }
 
@@ -239,6 +242,7 @@ public class ContextUnit {
     public boolean shouldContinue;
     public DecompilerContext ctx;
     String classContent;
+    int[] mapping;
 
     private ClassContext(StructClass cl, String entryName) {
       this.cl = cl;
diff --git a/test/org/jetbrains/java/decompiler/MinecraftTest.java b/test/org/jetbrains/java/decompiler/MinecraftTest.java
index 1f9a9dd03dab30cdb464bfc4901b9c592d558b8f..1e60f70430e50430928ac902c8dd7bfb63ef0c8c 100644
--- a/test/org/jetbrains/java/decompiler/MinecraftTest.java
+++ b/test/org/jetbrains/java/decompiler/MinecraftTest.java
@@ -65,7 +65,7 @@ public class MinecraftTest extends SingleClassesTestBase {
           }
 
           @Override
-          public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content) {
+          public void saveClassEntry(String path, String archiveName, String qualifiedName, String entryName, String content, int[] mapping) {
             RESULTS.put(qualifiedName, content);
           }
         };
