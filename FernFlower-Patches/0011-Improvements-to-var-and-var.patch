From 397301fa2f659be631343ceee5c276655796adb6 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Fri, 14 Apr 2017 10:13:01 -0700
Subject: [PATCH] Improvements to var++ and var--


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 451238c..10ae1b1 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -1051,7 +1051,7 @@ public class NestedClassProcessor {
           res = classname.equals(((InvocationExprent)expr).getClassname());
           break;
         case Exprent.EXPRENT_NEW:
-          VarType newType = expr.getExprType();
+          VarType newType = ((NewExprent)expr).getNewType();
           res = newType.type == CodeConstants.TYPE_OBJECT && classname.equals(newType.value);
           break;
         case Exprent.EXPRENT_VAR:
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
index 94dc0a3..806bec5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/PPandMMHelper.java
@@ -13,7 +13,6 @@ import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
-import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -25,7 +24,7 @@ public class PPandMMHelper {
 
   private boolean exprentReplaced;
   private VarProcessor varProc;
-  private Map<VarVersionPair, VarVersionPair> remaps = new HashMap<>();
+  private DirectGraph dgraph;
 
   public PPandMMHelper(VarProcessor varProc) {
     this.varProc = varProc;
@@ -34,10 +33,10 @@ public class PPandMMHelper {
   public boolean findPPandMM(RootStatement root) {
 
     FlattenStatementsHelper flatthelper = new FlattenStatementsHelper();
-    DirectGraph dgraph = flatthelper.buildDirectGraph(root);
+    this.dgraph = flatthelper.buildDirectGraph(root);
 
     LinkedList<DirectNode> stack = new LinkedList<>();
-    stack.add(dgraph.first);
+    stack.add(this.dgraph.first);
 
     HashSet<DirectNode> setVisited = new HashSet<>();
 
@@ -57,8 +56,6 @@ public class PPandMMHelper {
       stack.addAll(node.succs);
     }
 
-    updateVersions(dgraph);
-
     return res;
   }
 
@@ -133,7 +130,7 @@ public class PPandMMHelper {
           if (econst.type == Exprent.EXPRENT_CONST && ((ConstExprent)econst).hasValueOne()) {
             Exprent left = as.getLeft();
 
-            VarType condtype = econd.getExprType();
+            VarType condtype = left.getExprType();
             if (exprsEqual(left, econd) && (midlayer == null || midlayer.equals(condtype))) {
               FunctionExprent ret = new FunctionExprent(
                 func.getFuncType() == FunctionExprent.FUNCTION_ADD ? FunctionExprent.FUNCTION_PPI : FunctionExprent.FUNCTION_MMI,
@@ -143,7 +140,7 @@ public class PPandMMHelper {
               exprentReplaced = true;
 
               if (!left.equals(econd)) {
-                remaps.put(new VarVersionPair((VarExprent)left), new VarVersionPair((VarExprent)econd));
+                updateVersions(this.dgraph, new VarVersionPair((VarExprent)left), new VarVersionPair((VarExprent)econd));
               }
 
               return ret;
@@ -171,13 +168,13 @@ public class PPandMMHelper {
 
     VarExprent v1 = (VarExprent)e1;
     VarExprent v2 = (VarExprent)e2;
-    return varProc.getVarOriginalIndex(v1.getIndex()) == varProc.getVarOriginalIndex(v2.getIndex())
-            && InterpreterUtil.equalObjects(v1.getVarType(), v2.getVarType());
+    return varProc.getVarOriginalIndex(v1.getIndex()) == varProc.getVarOriginalIndex(v2.getIndex());
+    // TODO: Verify the types are in the same 'family' {byte->short->int}
+    //        && InterpreterUtil.equalObjects(v1.getVarType(), v2.getVarType());
   }
 
 
-  private void updateVersions(DirectGraph graph) {
-    if (remaps.isEmpty()) return;
+  private void updateVersions(DirectGraph graph, final VarVersionPair oldVVP, final VarVersionPair newVVP) {
     graph.iterateExprents(new DirectGraph.ExprentIterator() {
       @Override
       public int processExprent(Exprent exprent) {
@@ -187,10 +184,9 @@ public class PPandMMHelper {
         for (Exprent expr : lst) {
           if (expr.type == Exprent.EXPRENT_VAR) {
             VarExprent var = (VarExprent)expr;
-            VarVersionPair nvar = remaps.get(new VarVersionPair(var));
-            if (nvar != null) {
-              var.setIndex(nvar.var);
-              var.setVersion(nvar.version);
+            if (var.getIndex() == oldVVP.var && var.getVersion() == oldVVP.version) {
+              var.setIndex(newVVP.var);
+              var.setVersion(newVVP.version);
             }
           }
         }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 4e81505..cd08934 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -408,7 +408,12 @@ public class ConstExprent extends Exprent {
   public void getBytecodeRange(BitSet values) {
     measureBytecode(values);
   }
-  
+
+  @Override
+  public String toString() {
+    return "const(" + toJava(0, new BytecodeMappingTracer()) + ")";
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/test/org/jetbrains/java/decompiler/LVTTest.java b/test/org/jetbrains/java/decompiler/LVTTest.java
index 71d689d..76e4064 100644
--- a/test/org/jetbrains/java/decompiler/LVTTest.java
+++ b/test/org/jetbrains/java/decompiler/LVTTest.java
@@ -45,4 +45,5 @@ public class LVTTest extends SingleClassesTestBase {
   @Test public void testLVTComplex() { doTest("pkg/TestLVTComplex"); }
   @Test public void testVarType() { doTest("pkg/TestVarType"); }
   @Test public void testLoopMerging() { doTest("pkg/TestLoopMerging"); }
+  @Test public void testPPMM() { doTest("pkg/TestPPMM"); }
 }
diff --git a/testData/classes/pkg/TestPPMM.class b/testData/classes/pkg/TestPPMM.class
new file mode 100644
index 0000000000000000000000000000000000000000..8caf72506e9847d87715ffb7804ba9538aea668f
GIT binary patch
literal 1271
zcmb8u+ins;9LMqBEVL+6ig>66Db{$PR*M()lwvhjYfz{pHuZYJ6}NH<rN#&73wfpS
z!Uyo7tlt5|hHfOy?#_Q_X6OHz*~$F+{o|*kRb`_JD;-rxmm|tVv|uz{@LPUw-6)h>
z+A#`mwBLJ1vn9XfZS6O!UU%EAHfTwf+BLVa<92;pA2x=2AN@U}c&YQLp5ONNdX-AK
zyhbj+(=jqGPmx-u<J-1old{?5Jxu=x0v$HcV*_0T)8jQ)w39JkjG}Mb``wzi>Dx)n
z{54i~-Op}JQ<{$HqUMZZM`vJ^u>JXl+p6c^RCm2vPm3%%%ukS_GIk(kgj$|xh*P(|
z$$aI-(J4yXEhTlDGB)^tfoG^;jRwD?=Fm19DjXOyy8op~@u`@hqdCk=q@E{9N^zz8
zscjF#hp8RSaK%Z=4xALpkZJ)W3vvZykwjM~Ac<h)@W2f3@s(Tyxejsz<R(ZCWN89&
z_N2%%$Ze22AS)nwkh>F*<Orz`_aqxCq}h@0astEn%2q+|f!tR@57@1T{LDv3(ClcB
zGNU~@7ldM_K?B1$x&~SRc?`M^`ULdp1oV6m$`TI;D?J{@(Py9=AkRTxfNp}moPb^k
zLNNy`4G80C5%d+vYtRyC8FcHvXw)8T_R=2GWgdGTj~&oTKgHmH8qQa||KU8PqtqYe
C6pbVR

literal 0
HcmV?d00001

diff --git a/testData/results/TestPPMM.dec b/testData/results/TestPPMM.dec
new file mode 100644
index 0000000..ba3a5fc
--- /dev/null
+++ b/testData/results/TestPPMM.dec
@@ -0,0 +1,70 @@
+package pkg;
+
+public class TestPPMM {
+   public void ipp() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+
+   public void ppi() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+
+   public void imm() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+
+   public void mmi() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+
+   public void ippf() {
+      int a = 0;
+      t(a++);
+      t(a++);
+      t(a++);
+      t(a++);
+   }
+
+   public void ppif() {
+      int a = 0;
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
+   }
+
+   public void immf() {
+      int a = 0;
+      t(a--);
+      t(a--);
+      t(a--);
+      t(a--);
+   }
+
+   public void mmif() {
+      int a = 0;
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
+   }
+
+   private static void t(int x) {
+   }
+}
diff --git a/testData/src/pkg/TestPPMM.java b/testData/src/pkg/TestPPMM.java
new file mode 100644
index 0000000..0a062be
--- /dev/null
+++ b/testData/src/pkg/TestPPMM.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package pkg;
+
+public class TestPPMM {
+   // Bytecode wise ipp and ppi are identical when not using the intermediate value. 
+   // We keep these seperate tests just to see the bytecode.
+   public void ipp() {
+      int a = 0;
+      a++;
+      a++;
+      a++;
+      a++;
+   }
+   public void ppi() {
+      int a = 0;
+      ++a;
+      ++a;
+      ++a;
+      ++a;
+   }
+   public void imm() {
+      int a = 0;
+      a--;
+      a--;
+      a--;
+      a--;
+   }
+   public void mmi() {
+      int a = 0;
+      --a;
+      --a;
+      --a;
+      --a;
+   }
+   
+   // These versions actually use the intermediate value
+   public void ippf() {
+      int a = 0;
+      t(a++);
+      t(a++);
+      t(a++);
+      t(a++);
+   }
+   public void ppif() {
+      int a = 0;
+      t(++a);
+      t(++a);
+      t(++a);
+      t(++a);
+   }
+   public void immf() {
+      int a = 0;
+      t(a--);
+      t(a--);
+      t(a--);
+      t(a--);
+   }
+   public void mmif() {
+      int a = 0;
+      t(--a);
+      t(--a);
+      t(--a);
+      t(--a);
+   }
+   private static void t(int x){
+   }
+}
\ No newline at end of file
-- 
2.14.1.windows.1

