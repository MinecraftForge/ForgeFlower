From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cpw <cpw@weeksfamily.ca>
Date: Sun, 13 Sep 2015 18:26:04 -0400
Subject: [PATCH] Change begin/end detection. Less derpy.


diff --git a/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java b/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
index a36047be9d5aaafd1e37ea1fc4ed861b7e26e5c9..407aaa96659637e8a746a5e21e6a30d07e09aa31 100644
--- a/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
+++ b/src/org/jetbrains/java/decompiler/code/cfg/BasicBlock.java
@@ -264,17 +264,17 @@ public class BasicBlock implements IGraphNode {
   }
 
   public int getStartInstruction() {
-      if (seq.isEmpty()) {
-          return 0;
-      }
-      return instrOldOffsets.get(0);
+    if (seq.isEmpty()) {
+      return 0;
+    }
+    return instrOldOffsets.get(0);
   }
 
   public int getEndInstruction() {
-      if (seq.isEmpty()) {
-          return 0;
-      }
-      int end = seq.getLastInstr().length();
-      return end + instrOldOffsets.get(size() -1);
+    if (seq.isEmpty()) {
+      return 0;
+    }
+    int end = seq.getLastInstr().length();
+    return end + instrOldOffsets.get(size() -1);
   }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
index 762fd011314ca3f5c7fdc370ffe2bccdbb01a509..e68cb97ea66761387a6d05a8b38f0f1bf0e1225e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/BasicBlockStatement.java
@@ -24,6 +24,7 @@ import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 public class BasicBlockStatement extends Statement {
 
@@ -94,4 +95,13 @@ public class BasicBlockStatement extends Statement {
   public BasicBlock getBlock() {
     return block;
   }
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    if (block.size() > 0) {
+      return new StartEndPair(block.getStartInstruction(), block.getEndInstruction());
+    } else {
+      return null;
+    }
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
index e7220368e6116aec755c46f25e397bf6f8f76443..acc74a60fd6a90ad15959f6c3164757390542ada 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
@@ -21,6 +21,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
index 8be0dcc0ca2e0e3a9da1f5f92d625ee25f7d7e7a..8f3e4679be0d5821df94253a9f58082aa4f236d4 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/IfStatement.java
@@ -22,6 +22,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.IfExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -425,18 +426,18 @@ public class IfStatement extends Statement {
   public StatEdge getElseEdge() {
     return elseedge;
   }
-  
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
-  
+
   public IMatchable findObject(MatchNode matchNode, int index) {
 
     IMatchable object = super.findObject(matchNode, index);
     if(object != null) {
       return object;
     }
-    
+
     if(matchNode.getType() == MatchNode.MATCHNODE_EXPRENT) {
       String position = (String)matchNode.getRuleValue(MatchProperties.EXPRENT_POSITION);
       if("head".equals(position)) {
@@ -459,8 +460,14 @@ public class IfStatement extends Statement {
         return false;
       }
     }
-        
+
     return true;
   }
-  
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    return StartEndPair.join(super.getStartEndRange(),
+      ifstat != null ? ifstat.getStartEndRange() : null,
+      elsestat != null ? elsestat.getStartEndRange(): null);
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
index 7193f9a787a2b849aac667354b6931e4ed2816d8..d8329ff22605f0ef278cefc29483eb760b90a02f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/RootStatement.java
@@ -18,6 +18,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.stats;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 
 public class RootStatement extends Statement {
@@ -46,4 +47,9 @@ public class RootStatement extends Statement {
   public void setDummyExit(DummyExitStatement dummyExit) {
     this.dummyExit = dummyExit;
   }
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    return first.getStartEndRange();
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
index 7d2ee435ce1c153b6da410d825d697d9790e35fe..81d31a58f6a913ddc4f5a89ae22fe69f98c63f3e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SequenceStatement.java
@@ -20,6 +20,7 @@ import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.DecHelper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 
 import java.util.Arrays;
 import java.util.List;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
index c12605070b1de0bd65ebed44eacb25467666efbc..f71ed84bc4ad195a97b4c535f21b55a9568cac62 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/Statement.java
@@ -24,6 +24,7 @@ import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.StrongConnectivityHelper;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -938,12 +939,17 @@ public class Statement implements IMatchable {
     return true;
   }
 
-  private SequenceStatement parentSeqStat;
-public SequenceStatement getParentSequenceStat() {
-    if (parentSeqStat == null) {
-        parentSeqStat = (getParent()!=null && getParent().type == TYPE_SEQUENCE) ? (SequenceStatement)getParent() : new SequenceStatement(Arrays.asList(this));
+  private StartEndPair endpoints;
+  public StartEndPair getStartEndRange() {
+    if (endpoints == null) {
+      int start = Integer.MAX_VALUE;
+      int end   = Integer.MIN_VALUE;
+      for (Statement st : getStats()) {
+        start = Math.min(start, st.getBasichead().getBlock().getStartInstruction());
+        end   = Math.max(end,   st.getBasichead().getBlock().getEndInstruction());
+      }
+      endpoints = new StartEndPair(start, end);
     }
-    return parentSeqStat;
-}
-
+    return endpoints;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
index 59164900d91a1d02526de1ab32958fac7083357b..3e272016903de00ee47c55fad62db4b0687a04b5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
@@ -27,6 +27,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.StatEdge;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.ConstExprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.modules.decompiler.exps.SwitchExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.StartEndPair;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.*;
@@ -365,4 +366,15 @@ public class SwitchStatement extends Statement {
   public List<List<ConstExprent>> getCaseValues() {
     return caseValues;
   }
+
+  @Override
+  public StartEndPair getStartEndRange() {
+    StartEndPair[] sepairs = new StartEndPair[caseStatements.size() + 1];
+    int i = 0;
+    sepairs[i++] = super.getStartEndRange();
+    for (Statement st : caseStatements) {
+      sepairs[i++] = st.getStartEndRange();
+    }
+    return StartEndPair.join(sepairs);
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
index 1de71812af2089eb1445f9b8448c1a8086b1d435..7f3447bcf43c09321eeb34e8e62185bb6a38a261 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LocalVariableTable.java
@@ -1,14 +1,11 @@
 package org.jetbrains.java.decompiler.modules.decompiler.vars;
 
 import java.util.ArrayList;
-import java.util.BitSet;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import org.jetbrains.java.decompiler.main.rels.MethodProcessorRunnable;
-import org.jetbrains.java.decompiler.modules.decompiler.stats.SequenceStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
 
 public class LocalVariableTable {
@@ -77,8 +74,8 @@ public class LocalVariableTable {
       versions.put(lvt.index, idx);
       List<LVTVariable> lvtList = mapLVT.get(lvt.index);
       if (lvtList == null) {
-          lvtList = new ArrayList<LVTVariable>();
-          mapLVT.put(lvt.index, lvtList);
+        lvtList = new ArrayList<LVTVariable>();
+        mapLVT.put(lvt.index, lvtList);
       }
       lvtList.add(lvt);
     }
@@ -88,33 +85,17 @@ public class LocalVariableTable {
     return getMapVarNames().get(index);
   }
 
-  public Map<Integer, LVTVariable> getVars(SequenceStatement sequenceStatement) {
-      if (sequenceStatement == null) return new HashMap<Integer, LVTVariable>();
-      int start = Integer.MAX_VALUE;
-      int end = Integer.MIN_VALUE;
-      for (Statement st : sequenceStatement.getStats()) {
-          start = Math.min(start, st.getBasichead().getBlock().getStartInstruction());
-          end = Math.max(end, st.getBasichead().getBlock().getEndInstruction());
-      }
-    //System.out.println(indent + stat.getClass().getSimpleName() + " (" + start +", " + end + ")");
-
-    StartEndPair sepair = new StartEndPair(start, end);
+  public Map<Integer, LVTVariable> getVars(Statement statement) {
     Map<Integer, LVTVariable> ret = new HashMap<Integer, LVTVariable>();
+    if (statement == null) {
+      return ret;
+    }
+    StartEndPair sepair = statement.getStartEndRange();
     if (endpoints.containsKey(sepair)) {
-        for (LVTVariable lvt : endpoints.get(sepair)) {
-            ret.put(lvt.index,lvt);
-        }
+      for (LVTVariable lvt : endpoints.get(sepair)) {
+        ret.put(lvt.index, lvt);
+      }
     }
-//    for (Entry<Integer, List<LVTVariable>> entry : endpoints.get(end)) {
-//      for (LVTVariable lvt : entry.getValue()) {
-//        if (lvt.start >= start && lvt.end <= end) {
-//          if (ret.containsKey(entry.getKey())) {
-//            System.out.println("DUPLICATE INDEX WHAT THE FUCK: " + entry.getKey());
-//          }
-//          ret.put(entry.getKey(), lvt);
-//        }
-//      }
-//    }
     return ret;
   }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
index 23a3929a12446772fb3e35196223925853b28ec3..32c87996ea629302559202e7cd39c9e345a67398 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/StartEndPair.java
@@ -15,4 +15,19 @@ public class StartEndPair {
     public int hashCode() {
         return start * 31 + end;
     }
+    @Override
+    public String toString() {
+        return String.format("%d->%d",start,end);
+    }
+
+    public static StartEndPair join(StartEndPair... pairs) {
+        int start = Integer.MAX_VALUE;
+        int end = Integer.MIN_VALUE;
+        for (StartEndPair pair : pairs) {
+            if (pair == null) continue;
+            start = Math.min(start, pair.start);
+            end = Math.max(end, pair.end);
+        }
+        return new StartEndPair(start, end);
+    }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 2436d6d6bcf284bede78fb2e31a9f4efd2578d20..56061fe881f6c9f0e78a27ac62613136fd0277c3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -127,13 +127,13 @@ public class VarDefinitionHelper {
   public void setVarDefinitions() {
     VarNamesCollector vc = DecompilerContext.getVarNamesCollector();
 
-    Map<SequenceStatement,Map<Integer,VarExprent>> trackingMap = new HashMap<SequenceStatement,Map<Integer,VarExprent>>();
+    Map<Statement,Map<Integer,VarExprent>> trackingMap = new HashMap<Statement,Map<Integer,VarExprent>>();
     for (Entry<Integer, Statement> en : mapVarDefStatements.entrySet()) {
       Statement stat = en.getValue();
-      if (!trackingMap.containsKey(stat.getParentSequenceStat())) {
-          trackingMap.put(stat.getParentSequenceStat(), new HashMap<Integer,VarExprent>());
+      if (!trackingMap.containsKey(stat)) {
+          trackingMap.put(stat, new HashMap<Integer,VarExprent>());
       }
-      Map<Integer, VarExprent> scopedMap = trackingMap.get(stat.getParentSequenceStat());
+      Map<Integer, VarExprent> scopedMap = trackingMap.get(stat);
       Integer index = en.getKey();
       int newindex = varproc.getRemapped(index);
       setupLVTs(stat);
@@ -221,7 +221,7 @@ public class VarDefinitionHelper {
         var.setDefinition(true);
 
         if (varproc.getLVT() != null) {
-          Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat.getParentSequenceStat());
+          Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat);
           if (vars.containsKey(var.getIndex())) {
               var.setLVT(vars.get(var.getIndex()));
           }
@@ -388,7 +388,7 @@ public class VarDefinitionHelper {
       return;
     }
 
-    Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat.getParentSequenceStat());
+    Map<Integer, LVTVariable> vars = varproc.getLVT().getVars(stat);
 
     if (stat.getExprents() == null) {
       for (Object obj : stat.getSequentialObjects()) {
@@ -421,6 +421,8 @@ public class VarDefinitionHelper {
         LVTVariable lvt = lvts.get(index);
         if (lvt != null) {
           var.setLVT(lvt);
+        } else {
+            System.currentTimeMillis();
         }
       }
     }
