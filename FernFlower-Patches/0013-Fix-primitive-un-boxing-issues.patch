From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Thu, 11 May 2017 03:24:33 -0700
Subject: [PATCH] Fix primitive un/boxing issues.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 03a59cb999d3d05d647128c96007e9743938a0ea..474ffda1b9d610968bd12160f2153713b37f2db9 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -876,12 +876,14 @@ public class ExprProcessor implements CodeConstants {
 
     if (unbox) {
       // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
-      if (exprent.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)exprent).isBoxingCall()) {
-        InvocationExprent invocationExprent = (InvocationExprent)exprent;
-        exprent = invocationExprent.getLstParameters().get(0);
-        int paramType = invocationExprent.getDescriptor().params[0].type;
-        if (exprent.type == Exprent.EXPRENT_CONST && ((ConstExprent)exprent).getConstType().type != paramType) {
-          leftType = new VarType(paramType);
+      if (exprent.type == Exprent.EXPRENT_INVOCATION) {
+        InvocationExprent invocationExprent = (InvocationExprent) exprent;
+        if (invocationExprent.isBoxingCall() && !invocationExprent.shouldForceBoxing()) {
+          exprent = invocationExprent.getLstParameters().get(0);
+          int paramType = invocationExprent.getDescriptor().params[0].type;
+          if (exprent.type == Exprent.EXPRENT_CONST && ((ConstExprent) exprent).getConstType().type != paramType) {
+            leftType = new VarType(paramType);
+          }
         }
       }
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
index 161f55c45a3f2c199fcc24b9fdd1bd269bafbfb8..068e44b80f9972be77bfd9fe095a5549edf40a2f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
@@ -566,6 +566,19 @@ public class FunctionExprent extends Exprent {
     }
 
     if (funcType <= FUNCTION_I2S) {
+      // We can't directly cast some object types, so we need to make sure the unboxing happens.
+      // The types seem to be inconsistant but there is no harm in forcing the unboxing when not strictly needed.
+      // Type   | Works | Doesn't
+      // Integer| LFD   | BCS
+      // Long   | FD    | I
+      // Float  | D     | IL
+      // Double |       | ILF
+      if (lstOperands.get(0).type == Exprent.EXPRENT_INVOCATION) {
+        InvocationExprent inv = (InvocationExprent)lstOperands.get(0);
+        if (inv.isUnboxingCall()) {
+          inv.forceUnboxing(true);
+        }
+      }
       return wrapOperandString(lstOperands.get(0), true, indent, tracer).prepend("(" + ExprProcessor.getTypeName(
         TYPES[funcType - FUNCTION_I2L]) + ")");
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index d72870ee498d9da075a08dc6e2afef906ba44ad2..1c822f357c117f4bc8af4ced1842421d2224af18 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -59,6 +59,8 @@ public class InvocationExprent extends Exprent {
   private List<Exprent> lstParameters = new ArrayList<>();
   private List<PooledConstant> bootstrapArguments;
   private List<VarType> genericArgs = new ArrayList<>();
+  private boolean forceBoxing = false;
+  private boolean forceUnboxing = false;
 
   public InvocationExprent() {
     super(EXPRENT_INVOCATION);
@@ -261,10 +263,10 @@ public class InvocationExprent extends Exprent {
     }
 
     if (isStatic) {
-      if (isBoxingCall() && canIgnoreBoxing) {
+      if (isBoxingCall() && canIgnoreBoxing && !forceBoxing) {
         // process general "boxing" calls, e.g. 'Object[] data = { true }' or 'Byte b = 123'
         // here 'byte' and 'short' values do not need an explicit narrowing type cast
-        ExprProcessor.getCastedExprent(lstParameters.get(0), descriptor.params[0], buf, indent, false, false, false, false, tracer);
+        ExprProcessor.getCastedExprent(lstParameters.get(0), descriptor.params[0], buf, indent, false, false, true, false, tracer);
         return buf;
       }
 
@@ -310,16 +312,36 @@ public class InvocationExprent extends Exprent {
           TextUtil.writeQualifiedSuper(buf, super_qualifier);
         }
         else if (instance != null) {
-          TextBuffer res = instance.toJava(indent, tracer);
-
-          if (isUnboxingCall()) {
+          VarType leftType = new VarType(CodeConstants.TYPE_OBJECT, 0, classname);
+          if (isUnboxingCall() && !forceUnboxing) {
             // we don't print the unboxing call - no need to bother with the instance wrapping / casting
-            buf.append(res);
+            if (instance.type == Exprent.EXPRENT_FUNCTION) {
+              FunctionExprent func = (FunctionExprent)instance;
+              if (func.getFuncType() == FunctionExprent.FUNCTION_CAST && func.getLstOperands().get(1).type == Exprent.EXPRENT_CONST) {
+                ConstExprent _const = (ConstExprent)func.getLstOperands().get(1);
+                boolean skipCast = false;
+
+                if (func.getLstOperands().get(0).type == Exprent.EXPRENT_VAR) {
+                  VarType inferred = func.getLstOperands().get(0).getInferredExprType(leftType);
+                  skipCast = inferred.type != CodeConstants.TYPE_OBJECT ||
+                    DecompilerContext.getStructContext().instanceOf(inferred.value, this.classname);
+                } else if (this.classname.equals(_const.getConstType().value)) {
+                  skipCast = true;
+                }
+
+                if (skipCast) {
+                  buf.append(func.getLstOperands().get(0).toJava(indent, tracer));
+                  return buf;
+                }
+              }
+            }
+            buf.append(instance.toJava(indent, tracer));
             return buf;
           }
 
+          TextBuffer res = instance.toJava(indent, tracer);
+
           VarType rightType = instance.getExprType();
-          VarType leftType = new VarType(CodeConstants.TYPE_OBJECT, 0, classname);
 
           if (rightType.equals(VarType.VARTYPE_OBJECT) && !leftType.equals(rightType)) {
             buf.append("((").append(ExprProcessor.getCastTypeName(leftType)).append(")");
@@ -417,8 +439,85 @@ public class InvocationExprent extends Exprent {
       }
     }
 
-    boolean firstParameter = true;
     int start = isEnum ? 2 : 0;
+    List<Exprent> parameters = new ArrayList<>(lstParameters);
+    VarType[] types = Arrays.copyOf(descriptor.params, descriptor.params.length);
+    for (int i = start; i < parameters.size(); i++) {
+      Exprent par = parameters.get(i);
+      if (par.type == Exprent.EXPRENT_INVOCATION) {
+          InvocationExprent inv = (InvocationExprent)par;
+        // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
+        //However, we must make sure we don't accidentally make the call ambiguous.
+        //An example being List<Integer>, remove(Integer.valueOf(1)) and remove(1) are different functions
+        if (inv.isBoxingCall()) {
+          Exprent value = inv.lstParameters.get(0);
+          types[i] = value.getExprType(); //Infer?
+          //Unboxing in this case is lossy, so we need to explicitly set the type
+          if (types[i].typeFamily == CodeConstants.TYPE_FAMILY_INTEGER) {
+            types[i] =
+              "java/lang/Short".equals(inv.classname) ? VarType.VARTYPE_SHORT :
+              "java/lang/Byte".equals(inv.classname) ? VarType.VARTYPE_BYTE :
+              "java/lang/Integer".equals(inv.classname) ? VarType.VARTYPE_INT :
+               VarType.VARTYPE_CHAR;
+          }
+
+          int count = 0;
+          StructClass stClass = DecompilerContext.getStructContext().getClass(classname);
+          if (stClass != null) {
+            nextMethod:
+            for (StructMethod mt : stClass.getMethods()) {
+              if (name.equals(mt.getName())) {
+                MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+                if (md.params.length == descriptor.params.length) {
+                  for (int x = 0; x < md.params.length; x++) {
+                    if (md.params[x].typeFamily != descriptor.params[x].typeFamily &&
+                        md.params[x].typeFamily != types[x].typeFamily) {
+                      continue nextMethod;
+                    }
+                  }
+                  count++;
+                }
+              }
+            }
+          }
+
+          if (count != matches.size()) { //We become more ambiguous? Lets keep the explicit boxing
+            types[i] = descriptor.params[i];
+            inv.forceBoxing = true;
+          } else {
+            value.addBytecodeOffsets(inv.bytecode); //Keep the bytecode for matching/debug
+            parameters.set(i, value);
+          }
+        }
+        // We also need to care about when things are intentionally unboxed to call a different overloaded method,
+        //and skipping unboxing causes us to call ourselves.
+        //  EXA:
+        //  int compare(Integer a, Integer b) { return this.compare(a.intValue(), b.intValue()); }
+        //  int compare(int a, int b) { return a - b; }
+        //  Allowing the first function to unbox would cause infinite recursion
+        // Right now it just do a quick check, but a proper check would be to do compiler like inference of argument
+        // types, and check unboxing as needed. Currently it causes some false forces
+        else if (inv.isUnboxingCall() && !inv.shouldForceUnboxing()) {
+          StructClass stClass = DecompilerContext.getStructContext().getClass(classname);
+          for (StructMethod mt : stClass.getMethods()) {
+            if (name.equals(mt.getName()) && !stringDescriptor.equals(mt.getDescriptor())) {
+              MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+              if (md.params.length == descriptor.params.length) {
+                if (md.params[i].type == CodeConstants.TYPE_OBJECT) {
+                  if (DecompilerContext.getStructContext().instanceOf(inv.getInstance().getExprType().value, md.params[i].value)) {
+                    inv.forceUnboxing(true);
+                    break;
+                  }
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+
+
+    boolean firstParameter = true;
     for (int i = start; i < lstParameters.size(); i++) {
       if (mask == null || mask.get(i) == null) {
         TextBuffer buff = new TextBuffer();
@@ -453,7 +552,7 @@ public class InvocationExprent extends Exprent {
         */
 
         // 'byte' and 'short' literals need an explicit narrowing type cast when used as a parameter
-        ExprProcessor.getCastedExprent(lstParameters.get(i), descriptor.params[i], buff, indent, true, ambiguous, true, true, tracer);
+        ExprProcessor.getCastedExprent(lstParameters.get(i), types[i], buff, indent, true, ambiguous, true, true, tracer);
 
         // the last "new Object[0]" in the vararg call is not printed
         if (buff.length() > 0) {
@@ -506,7 +605,7 @@ public class InvocationExprent extends Exprent {
         }
 
         if (paramType == CodeConstants.TYPE_BYTECHAR || paramType == CodeConstants.TYPE_SHORTCHAR) {
-          if (classname.equals("java/lang/Character")) {
+          if (classname.equals("java/lang/Character") || classname.equals("java/lang/Short")) {
             return true;
           }
         }
@@ -565,6 +664,18 @@ public class InvocationExprent extends Exprent {
     return !isStatic && lstParameters.size() == 0 && classname.equals(UNBOXING_METHODS.get(name));
   }
 
+  public boolean shouldForceBoxing() {
+    return forceBoxing;
+  }
+
+  public void forceUnboxing(boolean value) {
+    this.forceUnboxing = value;
+  }
+
+  public boolean shouldForceUnboxing() {
+    return this.forceUnboxing;
+  }
+
   private List<StructMethod> getMatchedDescriptors() {
     List<StructMethod> matches = new ArrayList<>();
     StructClass cl = DecompilerContext.getStructContext().getClass(classname);
@@ -594,6 +705,8 @@ public class InvocationExprent extends Exprent {
       return EMPTY_BIT_SET;
     }
 
+    BitSet missed = new BitSet(lstParameters.size());
+
     // check if a call is unambiguous
     StructMethod mt = cl.getMethod(InterpreterUtil.makeUniqueKey(name, stringDescriptor));
     if (mt != null) {
@@ -603,18 +716,50 @@ public class InvocationExprent extends Exprent {
         for (int i = 0; i < md.params.length; i++) {
           if (!md.params[i].equals(lstParameters.get(i).getExprType())) {
             exact = false;
-            break;
+            missed.set(i);
           }
         }
         if (exact) return EMPTY_BIT_SET;
       }
     }
 
+    List<StructMethod> mtds = new ArrayList<>();
+    for (StructMethod mtt : matches) {
+      boolean failed = false;
+      MethodDescriptor md = MethodDescriptor.parseDescriptor(mtt.getDescriptor());
+      for (int i = 0; i < lstParameters.size(); i++) {
+        VarType ptype = lstParameters.get(i).getExprType();
+        if (!missed.get(i)) {
+          if (!md.params[i].equals(ptype)) {
+            failed = true;
+            break;
+          }
+        }
+        else {
+          if (md.params[i].type == CodeConstants.TYPE_OBJECT) {
+            if (ptype.type != CodeConstants.TYPE_NULL) {
+              if (!DecompilerContext.getStructContext().instanceOf(ptype.value, md.params[i].value)) {
+                failed = true;
+                break;
+              }
+            }
+          }
+        }
+      }
+      if (!failed) {
+        mtds.add(mtt);
+      }
+    }
+    //TODO: This still causes issues in the case of:
+    //add(Object)
+    //add(Object...)
+    //Try and detect varargs/array?
+
     // mark parameters
     BitSet ambiguous = new BitSet(descriptor.params.length);
     for (int i = 0; i < descriptor.params.length; i++) {
       VarType paramType = descriptor.params[i];
-      for (StructMethod mtt : matches) {
+      for (StructMethod mtt : mtds) {
 
         GenericMethodDescriptor gen = mtt.getSignature(); //TODO: Find synthetic flags for params, as Enum generic signatures do no contain the String,int params
         if (gen != null && gen.parameterTypes.size() > i && gen.parameterTypes.get(i).isGeneric()) {
diff --git a/testData/results/TestPrimitives.dec b/testData/results/TestPrimitives.dec
index a7d1557e6814e071df65c610fbdae860c8ff93bc..07e818e12a3a4371d3cb76ab613b119837332525 100644
--- a/testData/results/TestPrimitives.dec
+++ b/testData/results/TestPrimitives.dec
@@ -3,6 +3,26 @@ package pkg;
 import java.util.HashMap;
 
 public class TestPrimitives {
+   private void testInvalidUnboxing() {
+      List<Integer> lst = null;// 7
+      lst.remove(Integer.valueOf(0));// 8
+      this.genericBoxing((short)0);// 9
+      int a = this.genericReturn(lst);// 10
+      List<Byte> b = null;// 11
+      this.genericParameter(b, (byte)0);// 12
+      this.genericParameter(lst, 0);// 13
+   }// 14
+
+   private <T> void genericBoxing(T value) {
+   }// 16
+
+   private <T> T genericReturn(List<T> value) {
+      return value.get(0);// 17
+   }
+
+   private <T> void genericParameter(List<T> p, T v) {
+   }// 18
+
    public void printAll() {
       this.printBoolean(true);// 8
       this.printByte((byte)123);// 9
@@ -171,179 +191,498 @@ public class TestPrimitives {
 }
 
 class 'pkg/TestPrimitives' {
-   method 'printAll ()V' {
-      0      4
-      1      4
-      2      4
-      3      4
-      4      4
-      5      5
-      6      5
-      7      5
-      8      5
-      9      5
-      a      5
-      b      6
-      c      6
-      d      6
-      e      6
-      f      6
-      10      6
-      11      6
-      12      7
-      13      7
-      14      7
-      15      7
-      16      7
-      17      7
-      18      8
-      19      8
-      1a      8
-      1b      8
-      1c      8
-      1d      8
-      1e      8
+   method 'testInvalidUnboxing ()V' {
+      0      6
+      1      6
+      2      7
+      3      7
+      4      7
+      5      7
+      6      7
+      7      7
+      8      7
+      9      7
+      a      7
+      b      7
+      d      8
+      e      8
+      f      8
+      10      8
+      11      8
+      12      8
+      13      8
+      14      8
+      15      9
+      16      9
+      17      9
+      18      9
+      19      9
+      1d      9
+      1e      9
       1f      9
       20      9
-      21      9
-      22      9
-      23      9
-      24      9
-      25      10
-      26      10
-      27      10
-      28      10
-      29      10
-      2a      10
-      2b      10
-      2c      11
-      2d      11
-      2e      11
-      2f      11
-      30      11
-      31      11
+      21      10
+      22      10
+      23      11
+      24      11
+      25      11
+      26      11
+      27      11
+      28      11
+      29      11
+      2a      11
+      2b      11
+      2c      12
+      2d      12
+      2e      12
+      2f      12
+      30      12
+      31      12
       32      12
       33      12
-      37      12
-      3b      13
-      40      13
-      44      14
-      4a      14
-      4e      15
-      52      15
-      56      16
-      5b      16
-      5f      17
-      65      17
-      69      18
-      6e      18
-      72      19
-      78      19
-      7c      20
-      81      20
-      85      21
-      87      21
-      8a      21
-      8d      21
-      91      22
-      93      22
-      96      22
-      99      22
-      9d      23
-      9f      23
-      a2      23
-      a5      23
-      a9      24
-      ab      24
-      ae      24
-      b1      24
-      b5      25
-      b7      25
-      ba      25
-      bd      25
-      c1      26
-      c3      26
-      c6      26
-      c9      26
-      cd      27
-      cf      27
-      d2      27
-      d5      27
-      dd      28
-      e2      28
-      e5      28
-      ea      29
-      ed      29
-      f0      29
-      f5      30
-      f8      30
-      fb      30
-      fe      31
-      101      31
-      10a      31
-      10b      31
-      111      31
-      112      31
-      118      31
-      11b      31
-      121      31
-      123      31
-      129      31
-      12b      31
-      131      31
-      134      31
-      138      31
-      13c      32
-      13f      32
-      148      32
-      14b      32
-      152      32
-      155      32
-      15c      32
-      15f      32
-      166      32
-      169      32
-      16d      32
-      175      33
-      176      33
-      178      33
-      17b      33
-      17d      33
-      180      33
-      182      33
-      185      33
-      18f      34
-      194      34
-      19a      34
-      19f      34
-      1a5      34
-      1aa      34
-      1b0      34
-      1b5      34
-      1c1      35
-      1c3      35
-      1c6      35
-      1c9      35
-      1cb      35
-      1ce      35
-      1d1      35
-      1d3      35
-      1d6      35
-      1d9      35
-      1db      35
-      1de      35
-      1e1      35
-      1e3      35
-      1e6      35
-      1e9      35
-      1eb      35
-      1ee      35
-      1f1      35
-      1f3      35
-      1f6      35
-      1fd      35
-      202      35
-      209      36
+      34      12
+      35      13
+   }
+
+   method 'genericBoxing (Ljava/lang/Object;)V' {
+      0      16
+   }
+
+   method 'genericReturn (Ljava/util/List;)Ljava/lang/Object;' {
+      0      19
+      1      19
+      2      19
+      3      19
+      4      19
+      5      19
+      6      19
+      7      19
+   }
+
+   method 'genericParameter (Ljava/util/List;Ljava/lang/Object;)V' {
+      0      23
+   }
+
+   method 'printAll ()V' {
+      0      26
+      1      26
+      2      26
+      3      26
+      4      26
+      5      27
+      6      27
+      7      27
+      8      27
+      9      27
+      a      27
+      b      28
+      c      28
+      d      28
+      e      28
+      f      28
+      10      28
+      11      28
+      12      29
+      13      29
+      14      29
+      15      29
+      16      29
+      17      29
+      18      30
+      19      30
+      1a      30
+      1b      30
+      1c      30
+      1d      30
+      1e      30
+      1f      31
+      20      31
+      21      31
+      22      31
+      23      31
+      24      31
+      25      32
+      26      32
+      27      32
+      28      32
+      29      32
+      2a      32
+      2b      32
+      2c      33
+      2d      33
+      2e      33
+      2f      33
+      30      33
+      31      33
+      32      34
+      33      34
+      34      34
+      35      34
+      36      34
+      37      34
+      38      34
+      39      34
+      3a      35
+      3b      35
+      3c      35
+      3d      35
+      3e      35
+      3f      35
+      40      35
+      41      35
+      42      35
+      43      36
+      44      36
+      45      36
+      46      36
+      47      36
+      48      36
+      49      36
+      4a      36
+      4b      36
+      4c      36
+      4d      37
+      4e      37
+      4f      37
+      50      37
+      51      37
+      52      37
+      53      37
+      54      37
+      55      38
+      56      38
+      57      38
+      58      38
+      59      38
+      5a      38
+      5b      38
+      5c      38
+      5d      38
+      5e      39
+      5f      39
+      60      39
+      61      39
+      62      39
+      63      39
+      64      39
+      65      39
+      66      39
+      67      39
+      68      40
+      69      40
+      6a      40
+      6b      40
+      6c      40
+      6d      40
+      6e      40
+      6f      40
+      70      40
+      71      41
+      72      41
+      73      41
+      74      41
+      75      41
+      76      41
+      77      41
+      78      41
+      79      41
+      7a      41
+      7b      42
+      7c      42
+      7d      42
+      7e      42
+      7f      42
+      80      42
+      81      42
+      82      42
+      83      42
+      84      43
+      85      43
+      86      43
+      87      43
+      88      43
+      89      43
+      8a      43
+      8b      43
+      8c      43
+      8d      43
+      8e      43
+      8f      43
+      90      44
+      91      44
+      92      44
+      93      44
+      94      44
+      95      44
+      96      44
+      97      44
+      98      44
+      99      44
+      9a      44
+      9b      44
+      9c      45
+      9d      45
+      9e      45
+      9f      45
+      a0      45
+      a1      45
+      a2      45
+      a3      45
+      a4      45
+      a5      45
+      a6      45
+      a7      45
+      a8      46
+      a9      46
+      aa      46
+      ab      46
+      ac      46
+      ad      46
+      ae      46
+      af      46
+      b0      46
+      b1      46
+      b2      46
+      b3      46
+      b4      47
+      b5      47
+      b6      47
+      b7      47
+      b8      47
+      b9      47
+      ba      47
+      bb      47
+      bc      47
+      bd      47
+      be      47
+      bf      47
+      c0      48
+      c1      48
+      c2      48
+      c3      48
+      c4      48
+      c5      48
+      c6      48
+      c7      48
+      c8      48
+      c9      48
+      ca      48
+      cb      48
+      cc      49
+      cd      49
+      ce      49
+      cf      49
+      d0      49
+      d1      49
+      d2      49
+      d3      49
+      d4      49
+      d5      49
+      d6      49
+      d7      49
+      d8      50
+      dd      50
+      de      50
+      e2      50
+      e3      50
+      e4      50
+      e5      50
+      e6      50
+      e7      50
+      e8      51
+      e9      51
+      ea      51
+      eb      51
+      ec      51
+      ed      51
+      ee      51
+      ef      51
+      f0      51
+      f1      51
+      f2      51
+      f3      52
+      f4      52
+      f5      52
+      f6      52
+      f7      52
+      f8      52
+      f9      52
+      fa      52
+      fb      52
+      fc      52
+      fd      52
+      fe      53
+      ff      53
+      100      53
+      101      53
+      102      53
+      10a      53
+      10b      53
+      10c      53
+      10d      53
+      111      53
+      112      53
+      113      53
+      114      53
+      118      53
+      119      53
+      11a      53
+      11b      53
+      11c      53
+      11d      53
+      121      53
+      122      53
+      123      53
+      124      53
+      125      53
+      129      53
+      12a      53
+      12b      53
+      12c      53
+      12d      53
+      131      53
+      132      53
+      133      53
+      134      53
+      135      53
+      136      53
+      138      53
+      139      53
+      13a      53
+      13c      54
+      13d      54
+      13e      54
+      13f      54
+      140      54
+      147      54
+      148      54
+      149      54
+      14a      54
+      14b      54
+      14c      54
+      14d      54
+      151      54
+      152      54
+      153      54
+      154      54
+      155      54
+      156      54
+      157      54
+      15b      54
+      15c      54
+      15d      54
+      15e      54
+      15f      54
+      160      54
+      161      54
+      165      54
+      166      54
+      167      54
+      168      54
+      169      54
+      16a      54
+      16b      54
+      16d      54
+      16e      54
+      16f      54
+      175      55
+      176      55
+      177      55
+      178      55
+      179      55
+      17a      55
+      17b      55
+      17c      55
+      17d      55
+      17e      55
+      17f      55
+      180      55
+      181      55
+      182      55
+      183      55
+      184      55
+      185      55
+      186      55
+      18f      56
+      190      56
+      194      56
+      195      56
+      196      56
+      19a      56
+      19b      56
+      19f      56
+      1a0      56
+      1a1      56
+      1a5      56
+      1a6      56
+      1aa      56
+      1ab      56
+      1ac      56
+      1b0      56
+      1b1      56
+      1b5      56
+      1c1      57
+      1c2      57
+      1c3      57
+      1c4      57
+      1c5      57
+      1c6      57
+      1c7      57
+      1c8      57
+      1c9      57
+      1ca      57
+      1cb      57
+      1cc      57
+      1cd      57
+      1ce      57
+      1cf      57
+      1d0      57
+      1d1      57
+      1d2      57
+      1d3      57
+      1d4      57
+      1d5      57
+      1d6      57
+      1d7      57
+      1d8      57
+      1d9      57
+      1da      57
+      1db      57
+      1dc      57
+      1dd      57
+      1de      57
+      1df      57
+      1e0      57
+      1e1      57
+      1e2      57
+      1e3      57
+      1e4      57
+      1e5      57
+      1e6      57
+      1e7      57
+      1e8      57
+      1e9      57
+      1ea      57
+      1eb      57
+      1ec      57
+      1ed      57
+      1ee      57
+      1ef      57
+      1f0      57
+      1f1      57
+      1f2      57
+      1f3      57
+      1f4      57
+      1f5      57
+      1f6      57
+      1f7      57
+      1f8      57
+      1fd      57
+      1fe      57
+      202      57
+      203      57
+      204      57
+      209      58
    }
 
    method '<init> (ZBSIJFDC)V' {
diff --git a/testData/src/pkg/TestPrimitives.java b/testData/src/pkg/TestPrimitives.java
index 36302524a2ecfae64e25098eff1318b8b7d11d51..acfe886bf4578fe0cd0b1a58bf4073eb97436025 100644
--- a/testData/src/pkg/TestPrimitives.java
+++ b/testData/src/pkg/TestPrimitives.java
@@ -3,6 +3,19 @@ package pkg;
 import java.util.*;
 
 public class TestPrimitives {
+  private void testInvalidUnboxing() {
+    List<Integer> lst = null;
+    lst.remove(Integer.valueOf(0));
+    this.<Short>genericBoxing((short)0);
+    int a = genericReturn(lst);
+    List<Byte> b = null;
+    this.genericParameter(b, (byte)0);
+    this.genericParameter(lst, 0);
+  }
+
+  private <T> void genericBoxing(T value) {}
+  private <T> T genericReturn(List<T> value) { return value.get(0); }
+  private <T> void genericParameter(List<T> p, T v) {}
 
   public void printAll() {
     printBoolean(true);
