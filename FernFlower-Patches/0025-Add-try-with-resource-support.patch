From 70d6cd9291f773e0d907df5fa51c858552cfab61 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Mon, 6 Aug 2018 20:26:59 -0700
Subject: [PATCH] Add try with resource support


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index 8ac1d92..7212a0a 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -169,6 +169,10 @@ public class MethodProcessorRunnable implements Runnable {
 
       LabelHelper.identifyLabels(root);
 
+      if (TryHelper.enhanceTryStats(root)) {
+        continue;
+      }
+
       if (InlineSingleBlockHelper.inlineSingleBlocks(root)) {
         continue;
       }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java
new file mode 100644
index 0000000..2d8910a
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java
@@ -0,0 +1,260 @@
+package org.jetbrains.java.decompiler.modules.decompiler;
+
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.ExitExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchAllStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
+public class TryHelper
+{
+  public static boolean enhanceTryStats(RootStatement root) {
+    boolean ret = makeTryWithResourceRec(root);
+    if (ret) {
+      SequenceHelper.condenseSequences(root);
+      if (collapseTryRec(root)) {
+        SequenceHelper.condenseSequences(root);
+      }
+    }
+    return ret;
+  }
+
+  private static boolean makeTryWithResourceRec(Statement stat) {
+    if (stat.type == Statement.TYPE_CATCHALL && ((CatchAllStatement)stat).isFinally()) {
+      if (makeTryWithResource((CatchAllStatement)stat)) {
+        return true;
+      }
+    }
+
+    for (Statement st : stat.getStats()) {
+      if (makeTryWithResourceRec(st)) {
+        return true;
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean collapseTryRec(Statement stat) {
+    if (stat.type == Statement.TYPE_TRYCATCH && collapseTry((CatchStatement)stat)) {
+      return true;
+    }
+
+    for (Statement st : stat.getStats()) {
+      if (collapseTryRec(st)) {
+        return true;
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean makeTryWithResource(CatchAllStatement finallyStat) {
+    Statement handler = finallyStat.getHandler();
+
+    // The finally block has a specific statement structure we can check for
+    if (handler.getStats().size() != 2) {
+      return false;
+    }
+
+    Statement toCheck = finallyStat.getHandler().getFirst();
+    if (toCheck.type != Statement.TYPE_IF || ((IfStatement)toCheck).getIfstat().type != Statement.TYPE_IF) {
+      return false;
+    }
+
+    toCheck = ((IfStatement)toCheck).getIfstat();
+
+    if (((IfStatement)toCheck).getElsestat() == null) {
+      return false;
+    }
+
+    Statement elseBlock = ((IfStatement)toCheck).getElsestat();
+    VarExprent var = null;
+
+    if (elseBlock.getExprents() != null && elseBlock.getExprents().size() == 1) {
+      Exprent exp = elseBlock.getExprents().get(0);
+
+      if (isCloseable(exp)) {
+        var = (VarExprent)((InvocationExprent)exp).getInstance();
+      }
+    }
+
+    if (var != null) {
+      AssignmentExprent ass = null;
+      BasicBlockStatement initBlock = null;
+      for (StatEdge edge : finallyStat.getAllPredecessorEdges()) {
+        if (edge.getDestination().equals(finallyStat) && edge.getSource().type == Statement.TYPE_BASICBLOCK) {
+          ass = findResourceDef(var, edge.getSource());
+          if (ass != null) {
+            initBlock = (BasicBlockStatement)edge.getSource();
+            break;
+          }
+        }
+      }
+
+      if (ass != null) {
+        Statement stat = finallyStat.getParent();
+        Statement stat2 = finallyStat.getFirst();
+
+        if (stat2.type == Statement.TYPE_TRYCATCH) {
+          CatchStatement child = (CatchStatement)stat2;
+
+          AssignmentExprent resourceDef = (AssignmentExprent)ass.copy();
+          if (ass.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            if (child.getFirst() != null) {
+              fixResourceAssignment(resourceDef, child.getFirst());
+            }
+          }
+
+          if (resourceDef.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            return false;
+          }
+
+          child.setTryType(CatchStatement.RESORCES);
+          initBlock.getExprents().remove(ass);
+          child.getResources().add(resourceDef);
+
+          if (!finallyStat.getVarDefinitions().isEmpty()) {
+            child.getVarDefinitions().addAll(0, finallyStat.getVarDefinitions());
+          }
+
+          stat.replaceStatement(finallyStat, child);
+          removeRedundantThrow(initBlock, child);
+          return true;
+        }
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean collapseTry(CatchStatement catchStat) {
+    Statement parent = catchStat;
+    if (parent.getFirst() != null && parent.getFirst().type == Statement.TYPE_SEQUENCE) {
+      parent = parent.getFirst();
+    }
+    if (parent != null && parent.getFirst() != null && parent.getFirst().type == Statement.TYPE_TRYCATCH) {
+      CatchStatement toRemove = (CatchStatement)parent.getFirst();
+
+      if (toRemove.getTryType() == CatchStatement.RESORCES) {
+        catchStat.setTryType(CatchStatement.RESORCES);
+        catchStat.getResources().addAll(toRemove.getResources());
+      }
+
+      catchStat.getVarDefinitions().addAll(toRemove.getVarDefinitions());
+      parent.replaceStatement(toRemove, toRemove.getFirst());
+
+      if (!toRemove.getVars().isEmpty()) {
+        for (int i = 0; i < toRemove.getVars().size(); ++i) {
+          catchStat.getVars().add(i, toRemove.getVars().get(i));
+          catchStat.getExctStrings().add(i, toRemove.getExctStrings().get(i));
+
+          catchStat.getStats().add(i + 1, catchStat.getStats().get(i + 1));
+        }
+      }
+      return true;
+    }
+    return false;
+  }
+
+  private static AssignmentExprent findResourceDef(VarExprent var, Statement prevStatement) {
+    for (Exprent exp : prevStatement.getExprents()) {
+      if (exp.type == Exprent.EXPRENT_ASSIGNMENT) {
+        AssignmentExprent ass = (AssignmentExprent)exp;
+        if (ass.getLeft().equals(var)) {
+          return ass;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static boolean isCloseable(Exprent exp) {
+    if (exp.type == Exprent.EXPRENT_INVOCATION) {
+      InvocationExprent invocExp = (InvocationExprent)exp;
+      if (invocExp.getName().equals("close") && invocExp.getStringDescriptor().equals("()V")) {
+        if (invocExp.getInstance() != null && invocExp.getInstance().type == Exprent.EXPRENT_VAR) {
+          return DecompilerContext.getStructContext().instanceOf(invocExp.getClassname(), "java/lang/AutoCloseable");
+        }
+      }
+    }
+
+    return false;
+  }
+
+  private static void fixResourceAssignment(AssignmentExprent ass, Statement statement) {
+    if (statement.getExprents() != null) {
+      for (Exprent exp : statement.getExprents()) {
+        if (exp.type == Exprent.EXPRENT_ASSIGNMENT) {
+          AssignmentExprent toRemove = (AssignmentExprent)exp;
+          if (ass.getLeft().equals(toRemove.getLeft()) && !toRemove.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            ass.setRight(toRemove.getRight());
+            statement.getExprents().remove(toRemove);
+            break;
+          }
+        }
+      }
+    }
+  }
+
+  private static boolean removeRedundantThrow(BasicBlockStatement initBlock, CatchStatement catchStat) {
+    if (catchStat.getStats().size() > 1) {
+      boolean removed = false;
+      Statement temp = null;
+      int i = 1;
+      for (; i < catchStat.getStats().size(); ++i) {
+        temp = catchStat.getStats().get(i);
+
+        if (temp.type == Statement.TYPE_BASICBLOCK && temp.getExprents() != null) {
+          if (temp.getExprents().size() >= 2 && catchStat.getVars().get(i - 1).getVarType().value.equals("java/lang/Throwable")) {
+            if (temp.getExprents().get(temp.getExprents().size() - 1).type == Exprent.EXPRENT_EXIT) {
+              ExitExprent exitExprent = (ExitExprent)temp.getExprents().get(temp.getExprents().size() - 1);
+              if (exitExprent.getExitType() == ExitExprent.EXIT_THROW && exitExprent.getValue().equals(catchStat.getVars().get(i - 1))) {
+
+                catchStat.getExctStrings().remove(i - 1);
+                catchStat.getVars().remove(i - 1);
+                catchStat.getStats().remove(i);
+
+                for (StatEdge edge : temp.getAllPredecessorEdges()) {
+                  edge.getSource().removeSuccessor(edge);
+                }
+
+                for (StatEdge edge : temp.getAllSuccessorEdges()) {
+                  edge.getDestination().removePredecessor(edge);
+                }
+
+                removed = true;
+                break;
+              }
+            }
+          }
+        }
+      }
+
+      if (removed && temp.getExprents().get(temp.getExprents().size() - 2).type == Exprent.EXPRENT_ASSIGNMENT) {
+        AssignmentExprent assignmentExp = (AssignmentExprent)temp.getExprents().get(temp.getExprents().size() - 2);
+        if (assignmentExp.getLeft().getExprType().value.equals("java/lang/Throwable")) {
+          for (Exprent exprent : initBlock.getExprents()) {
+            if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+              AssignmentExprent toRemove = (AssignmentExprent)exprent;
+              if (toRemove.getLeft().equals(assignmentExp.getLeft())) {
+                initBlock.getExprents().remove(toRemove);
+                return true;
+              }
+            }
+          }
+        }
+      }
+    }
+    return false;
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
index f74fe84..08bc8c8 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
@@ -6,6 +6,7 @@ package org.jetbrains.java.decompiler.modules.decompiler.stats;
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.code.cfg.BasicBlock;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
@@ -16,12 +17,19 @@ import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
 import java.util.Set;
 
 public class CatchStatement extends Statement {
+  public static final int NORMAL = 0;
+  public static final int RESORCES = 1;
+
   private final List<List<String>> exctstrings = new ArrayList<>();
   private final List<VarExprent> vars = new ArrayList<>();
+  private final List<Exprent> resources = new ArrayList<>();
+
+  private int tryType;
 
   // *****************************************************************************
   // constructors
@@ -29,6 +37,7 @@ public class CatchStatement extends Statement {
 
   private CatchStatement() {
     type = TYPE_TRYCATCH;
+    tryType = NORMAL;
   }
 
   private CatchStatement(Statement head, Statement next, Set<Statement> setHandlers) {
@@ -142,8 +151,26 @@ public class CatchStatement extends Statement {
       tracer.incrementCurrentSourceLine();
     }
 
-    buf.appendIndent(indent).append("try {").appendLineSeparator();
-    tracer.incrementCurrentSourceLine();
+    if (tryType == NORMAL) {
+      buf.appendIndent(indent).append("try {").appendLineSeparator();
+      tracer.incrementCurrentSourceLine();
+    }
+    else {
+      buf.appendIndent(indent).append("try (");
+      tracer.incrementCurrentSourceLine();
+
+      if (resources.size() > 1) {
+        buf.appendLineSeparator();
+        tracer.incrementCurrentSourceLine();
+        buf.append(ExprProcessor.listToJava(resources, indent + 1, tracer));
+        buf.appendIndent(indent);
+      }
+      else {
+        buf.append(resources.get(0).toJava(indent + 1, tracer));
+      }
+      buf.append(") {").appendLineSeparator();
+      tracer.incrementCurrentSourceLine();
+    }
 
     buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer));
     buf.appendIndent(indent).append("}");
@@ -193,11 +220,35 @@ public class CatchStatement extends Statement {
     return cs;
   }
 
+  public void getOffset(BitSet values) {
+    super.getOffset(values);
+
+    for (Exprent exp : this.getResources()) {
+      exp.getBytecodeRange(values);
+    }
+  }
+
   // *****************************************************************************
   // getter and setter methods
   // *****************************************************************************
 
+  public List<List<String>> getExctStrings() {
+    return exctstrings;
+  }
+
   public List<VarExprent> getVars() {
     return vars;
   }
+
+  public int getTryType() {
+    return tryType;
+  }
+
+  public void setTryType(int tryType) {
+    this.tryType = tryType;
+  }
+
+  public List<Exprent> getResources() {
+    return resources;
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 054abbb..adb62d7 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -107,7 +107,11 @@ public class VarDefinitionHelper {
         lstVars = ((CatchAllStatement)st).getVars();
       }
       else if (st.type == Statement.TYPE_TRYCATCH) {
-        lstVars = ((CatchStatement)st).getVars();
+        lstVars = new ArrayList<>(((CatchStatement)st).getVars());
+        // resource vars must also be included
+        for (Exprent exp : ((CatchStatement)st).getResources()) {
+          lstVars.add((VarExprent)((AssignmentExprent)exp).getLeft());
+        }
       }
 
       if (lstVars != null) {
@@ -230,6 +234,14 @@ public class VarDefinitionHelper {
     if (stat.getExprents() == null) {
       for (Object obj : stat.getSequentialObjects()) {
         if (obj instanceof Statement) {
+          if (((Statement)obj).type == Statement.TYPE_TRYCATCH) {
+            for (Exprent exp : ((CatchStatement)obj).getResources()) {
+              LocalVariable lvt = findLVT(index, exp);
+              if (lvt != null) {
+                return lvt;
+              }
+            }
+          }
           LocalVariable lvt = findLVT(index, (Statement)obj);
           if (lvt != null) {
             return lvt;
@@ -341,6 +353,9 @@ public class VarDefinitionHelper {
               currVars.add(fin.getMonitor());
             }
           }
+          else if (st.type == Statement.TYPE_TRYCATCH) {
+            currVars.addAll(((CatchStatement)st).getResources());
+          }
         }
         else if (obj instanceof Exprent) {
           currVars.add((Exprent)obj);
@@ -596,6 +611,14 @@ public class VarDefinitionHelper {
     if (stat.getExprents() == null) {
       for (Object obj : stat.getSequentialObjects()) {
         if (obj instanceof Statement) {
+          if (((Statement)obj).type == Statement.TYPE_TRYCATCH) {
+            CatchStatement catchStat = (CatchStatement)obj;
+            boolean remapped = false;
+            for (int x = 0; x < catchStat.getResources().size(); x++) {
+              remapped |= remapVar(catchStat.getResources().get(x), from, to);
+            }
+            success |= remapped;
+          }
           success |= remapVar((Statement)obj, from, to);
         }
         else if (obj instanceof Exprent) {
@@ -841,6 +864,11 @@ public class VarDefinitionHelper {
       for (Object obj : stat.getSequentialObjects()) {
         if (obj instanceof Statement) {
           findTypes((Statement)obj, types);
+          if (((Statement)obj).type == Statement.TYPE_TRYCATCH) {
+            for (Exprent exp : ((CatchStatement)obj).getResources()) {
+              findTypes(exp, types);
+            }
+          }
         }
         else if (obj instanceof Exprent) {
           findTypes((Exprent)obj, types);
@@ -885,6 +913,11 @@ public class VarDefinitionHelper {
       for (Object obj : stat.getSequentialObjects()) {
         if (obj instanceof Statement) {
           applyTypes((Statement)obj, types);
+          if (((Statement)obj).type == Statement.TYPE_TRYCATCH) {
+            for (Exprent exp : ((CatchStatement)obj).getResources()) {
+              applyTypes(exp, types);
+            }
+          }
         }
         else if (obj instanceof Exprent) {
           applyTypes((Exprent)obj, types);
@@ -970,6 +1003,13 @@ public class VarDefinitionHelper {
       for (int x = index; x < objs.size(); x++) {
         Object obj = objs.get(x);
         if (obj instanceof Statement) {
+          if (((Statement)obj).type == Statement.TYPE_TRYCATCH) {
+            for (Exprent exp : ((CatchStatement)obj).getResources()) {
+              if (isVarReadFirst(var, exp, whitelist)) {
+                return true;
+              }
+            }
+          }
           if (isVarReadFirst(var, (Statement)obj, 0, whitelist)) {
             return true;
           }
-- 
2.15.2 (Apple Git-101.1)

