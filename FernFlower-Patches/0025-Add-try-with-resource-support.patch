From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <jrd2558@gmail.com>
Date: Mon, 6 Aug 2018 20:26:59 -0700
Subject: [PATCH] Add try with resource support


diff --git a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
index dc3c87371261c64a3a51eed449cac0c69387ff13..015307bf1f17d0d52882b5d400d42437859d102c 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/MethodProcessorRunnable.java
@@ -178,6 +178,10 @@ public class MethodProcessorRunnable implements Runnable {
 
       LabelHelper.identifyLabels(root);
 
+      if (TryHelper.enhanceTryStats(root)) {
+        continue;
+      }
+
       if (InlineSingleBlockHelper.inlineSingleBlocks(root)) {
         continue;
       }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..6484ee0ba087cde20472fdd75247c4e515f15996
--- /dev/null
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/TryHelper.java
@@ -0,0 +1,263 @@
+package org.jetbrains.java.decompiler.modules.decompiler;
+
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.AssignmentExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.ExitExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.InvocationExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.VarExprent;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.BasicBlockStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchAllStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.CatchStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.IfStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
+import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
+public class TryHelper
+{
+  public static boolean enhanceTryStats(RootStatement root) {
+    boolean ret = makeTryWithResourceRec(root);
+    if (ret) {
+      SequenceHelper.condenseSequences(root);
+      if (collapseTryRec(root)) {
+        SequenceHelper.condenseSequences(root);
+      }
+    }
+    return ret;
+  }
+
+  private static boolean makeTryWithResourceRec(Statement stat) {
+    if (stat.type == Statement.TYPE_CATCHALL && ((CatchAllStatement)stat).isFinally()) {
+      if (makeTryWithResource((CatchAllStatement)stat)) {
+        return true;
+      }
+    }
+
+    for (Statement st : stat.getStats()) {
+      if (makeTryWithResourceRec(st)) {
+        return true;
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean collapseTryRec(Statement stat) {
+    if (stat.type == Statement.TYPE_TRYCATCH && collapseTry((CatchStatement)stat)) {
+      return true;
+    }
+
+    for (Statement st : stat.getStats()) {
+      if (collapseTryRec(st)) {
+        return true;
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean makeTryWithResource(CatchAllStatement finallyStat) {
+    Statement handler = finallyStat.getHandler();
+
+    // The finally block has a specific statement structure we can check for
+    if (handler.getStats().size() != 2) {
+      return false;
+    }
+
+    Statement toCheck = finallyStat.getHandler().getFirst();
+    if (toCheck.type != Statement.TYPE_IF || ((IfStatement)toCheck).getIfstat().type != Statement.TYPE_IF) {
+      return false;
+    }
+
+    toCheck = ((IfStatement)toCheck).getIfstat();
+
+    if (((IfStatement)toCheck).getElsestat() == null) {
+      return false;
+    }
+
+    Statement elseBlock = ((IfStatement)toCheck).getElsestat();
+    VarExprent var = null;
+
+    if (elseBlock.getExprents() != null && elseBlock.getExprents().size() == 1) {
+      Exprent exp = elseBlock.getExprents().get(0);
+
+      if (isCloseable(exp)) {
+        var = (VarExprent)((InvocationExprent)exp).getInstance();
+      }
+    }
+
+    if (var != null) {
+      AssignmentExprent ass = null;
+      BasicBlockStatement initBlock = null;
+      for (StatEdge edge : finallyStat.getAllPredecessorEdges()) {
+        if (edge.getDestination().equals(finallyStat) && edge.getSource().type == Statement.TYPE_BASICBLOCK) {
+          ass = findResourceDef(var, edge.getSource());
+          if (ass != null) {
+            initBlock = (BasicBlockStatement)edge.getSource();
+            break;
+          }
+        }
+      }
+
+      if (ass != null) {
+        Statement stat = finallyStat.getParent();
+        Statement stat2 = finallyStat.getFirst();
+
+        if (stat2.type == Statement.TYPE_TRYCATCH) {
+          CatchStatement child = (CatchStatement)stat2;
+
+          AssignmentExprent resourceDef = (AssignmentExprent)ass.copy();
+          if (ass.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            if (child.getFirst() != null) {
+              fixResourceAssignment(resourceDef, child.getFirst());
+            }
+          }
+
+          if (resourceDef.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            return false;
+          }
+
+          child.setTryType(CatchStatement.RESORCES);
+          initBlock.getExprents().remove(ass);
+          child.getResources().add(resourceDef);
+
+          if (!finallyStat.getVarDefinitions().isEmpty()) {
+            child.getVarDefinitions().addAll(0, finallyStat.getVarDefinitions());
+          }
+
+          stat.replaceStatement(finallyStat, child);
+          removeRedundantThrow(initBlock, child);
+          return true;
+        }
+      }
+    }
+
+    return false;
+  }
+
+  private static boolean collapseTry(CatchStatement catchStat) {
+    Statement parent = catchStat;
+    if (parent.getFirst() != null && parent.getFirst().type == Statement.TYPE_SEQUENCE) {
+      parent = parent.getFirst();
+    }
+    if (parent != null && parent.getFirst() != null && parent.getFirst().type == Statement.TYPE_TRYCATCH) {
+      CatchStatement toRemove = (CatchStatement)parent.getFirst();
+
+      if (toRemove.getTryType() == CatchStatement.RESORCES) {
+        catchStat.setTryType(CatchStatement.RESORCES);
+        catchStat.getResources().addAll(toRemove.getResources());
+
+        catchStat.getVarDefinitions().addAll(toRemove.getVarDefinitions());
+        parent.replaceStatement(toRemove, toRemove.getFirst());
+
+        if (!toRemove.getVars().isEmpty()) {
+          for (int i = 0; i < toRemove.getVars().size(); ++i) {
+            catchStat.getVars().add(i, toRemove.getVars().get(i));
+            catchStat.getExctStrings().add(i, toRemove.getExctStrings().get(i));
+
+            catchStat.getStats().add(i + 1, catchStat.getStats().get(i + 1));
+          }
+        }
+        return true;
+      }
+    }
+    return false;
+  }
+
+  private static AssignmentExprent findResourceDef(VarExprent var, Statement prevStatement) {
+    for (Exprent exp : prevStatement.getExprents()) {
+      if (exp.type == Exprent.EXPRENT_ASSIGNMENT) {
+        AssignmentExprent ass = (AssignmentExprent)exp;
+        if (ass.getLeft().type == Exprent.EXPRENT_VAR) { // cannot use equals as var's varType may be unknown and not match
+          VarExprent left = (VarExprent)ass.getLeft();
+          if (left.getVarVersionPair().equals(var.getVarVersionPair())) {
+            return ass;
+          }
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private static boolean isCloseable(Exprent exp) {
+    if (exp.type == Exprent.EXPRENT_INVOCATION) {
+      InvocationExprent invocExp = (InvocationExprent)exp;
+      if (invocExp.getName().equals("close") && invocExp.getStringDescriptor().equals("()V")) {
+        if (invocExp.getInstance() != null && invocExp.getInstance().type == Exprent.EXPRENT_VAR) {
+          return DecompilerContext.getStructContext().instanceOf(invocExp.getClassname(), "java/lang/AutoCloseable");
+        }
+      }
+    }
+
+    return false;
+  }
+
+  private static void fixResourceAssignment(AssignmentExprent ass, Statement statement) {
+    if (statement.getExprents() != null) {
+      for (Exprent exp : statement.getExprents()) {
+        if (exp.type == Exprent.EXPRENT_ASSIGNMENT) {
+          AssignmentExprent toRemove = (AssignmentExprent)exp;
+          if (ass.getLeft().equals(toRemove.getLeft()) && !toRemove.getRight().getExprType().equals(VarType.VARTYPE_NULL)) {
+            ass.setRight(toRemove.getRight());
+            statement.getExprents().remove(toRemove);
+            break;
+          }
+        }
+      }
+    }
+  }
+
+  private static boolean removeRedundantThrow(BasicBlockStatement initBlock, CatchStatement catchStat) {
+    if (catchStat.getStats().size() > 1) {
+      boolean removed = false;
+      Statement temp = null;
+      int i = 1;
+      for (; i < catchStat.getStats().size(); ++i) {
+        temp = catchStat.getStats().get(i);
+
+        if (temp.type == Statement.TYPE_BASICBLOCK && temp.getExprents() != null) {
+          if (temp.getExprents().size() >= 2 && catchStat.getVars().get(i - 1).getVarType().value.equals("java/lang/Throwable")) {
+            if (temp.getExprents().get(temp.getExprents().size() - 1).type == Exprent.EXPRENT_EXIT) {
+              ExitExprent exitExprent = (ExitExprent)temp.getExprents().get(temp.getExprents().size() - 1);
+              if (exitExprent.getExitType() == ExitExprent.EXIT_THROW && exitExprent.getValue().equals(catchStat.getVars().get(i - 1))) {
+
+                catchStat.getExctStrings().remove(i - 1);
+                catchStat.getVars().remove(i - 1);
+                catchStat.getStats().remove(i);
+
+                for (StatEdge edge : temp.getAllPredecessorEdges()) {
+                  edge.getSource().removeSuccessor(edge);
+                }
+
+                for (StatEdge edge : temp.getAllSuccessorEdges()) {
+                  edge.getDestination().removePredecessor(edge);
+                }
+
+                removed = true;
+                break;
+              }
+            }
+          }
+        }
+      }
+
+      if (removed && temp.getExprents().get(temp.getExprents().size() - 2).type == Exprent.EXPRENT_ASSIGNMENT) {
+        AssignmentExprent assignmentExp = (AssignmentExprent)temp.getExprents().get(temp.getExprents().size() - 2);
+        if (assignmentExp.getLeft().getExprType().value.equals("java/lang/Throwable")) {
+          for (Exprent exprent : initBlock.getExprents()) {
+            if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
+              AssignmentExprent toRemove = (AssignmentExprent)exprent;
+              if (toRemove.getLeft().equals(assignmentExp.getLeft())) {
+                initBlock.getExprents().remove(toRemove);
+                return true;
+              }
+            }
+          }
+        }
+      }
+    }
+    return false;
+  }
+}
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
index 23713c94c72373f76284bc7a8615f74419531651..bdafd77466aacfeb3499eff76052054b4856df31 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/FlattenStatementsHelper.java
@@ -126,6 +126,13 @@ public class FlattenStatementsHelper {
           case Statement.TYPE_TRYCATCH:
             DirectNode firstnd = new DirectNode(DirectNode.NODE_TRY, stat, stat.id + "_try");
 
+            if (stat.type == Statement.TYPE_TRYCATCH) {
+              CatchStatement catchStat = (CatchStatement)stat;
+              if (catchStat.getTryType() == CatchStatement.RESORCES) {
+                firstnd.exprents = catchStat.getResources();
+              }
+            }
+
             mapDestinationNodes.put(stat.id, new String[]{firstnd.id, null});
             graph.nodes.putWithKey(firstnd, firstnd.id);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
index 5582b3781f6ff71684d6802c11d4d361899c196e..5ca160553acd8e5992f7cd676a34269ea982e81d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/CatchStatement.java
@@ -4,6 +4,8 @@ package org.jetbrains.java.decompiler.modules.decompiler.stats;
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.code.cfg.BasicBlock;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.modules.decompiler.exps.Exprent;
+import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.modules.decompiler.DecHelper;
@@ -14,12 +16,19 @@ import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 
 import java.util.ArrayList;
+import java.util.BitSet;
 import java.util.List;
 import java.util.Set;
 
 public class CatchStatement extends Statement {
+  public static final int NORMAL = 0;
+  public static final int RESORCES = 1;
+
   private final List<List<String>> exctstrings = new ArrayList<>();
   private final List<VarExprent> vars = new ArrayList<>();
+  private final List<Exprent> resources = new ArrayList<>();
+
+  private int tryType;
 
   // *****************************************************************************
   // constructors
@@ -27,6 +36,7 @@ public class CatchStatement extends Statement {
 
   private CatchStatement() {
     type = TYPE_TRYCATCH;
+    tryType = NORMAL;
   }
 
   private CatchStatement(Statement head, Statement next, Set<Statement> setHandlers) {
@@ -141,8 +151,25 @@ public class CatchStatement extends Statement {
       tracer.incrementCurrentSourceLine();
     }
 
-    buf.appendIndent(indent).append("try {").appendLineSeparator();
-    tracer.incrementCurrentSourceLine();
+    if (tryType == NORMAL) {
+      buf.appendIndent(indent).append("try {").appendLineSeparator();
+      tracer.incrementCurrentSourceLine();
+    }
+    else {
+      buf.appendIndent(indent).append("try (");
+
+      if (resources.size() > 1) {
+        buf.appendLineSeparator();
+        tracer.incrementCurrentSourceLine();
+        buf.append(ExprProcessor.listToJava(resources, indent + 1, tracer));
+        buf.appendIndent(indent);
+      }
+      else {
+        buf.append(resources.get(0).toJava(indent + 1, tracer));
+      }
+      buf.append(") {").appendLineSeparator();
+      tracer.incrementCurrentSourceLine();
+    }
 
     buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer));
     buf.appendIndent(indent).append("}");
@@ -179,6 +206,15 @@ public class CatchStatement extends Statement {
     return buf;
   }
 
+  public List<Object> getSequentialObjects() {
+
+    List<Object> lst = new ArrayList<>(resources);
+    lst.addAll(stats);
+    lst.addAll(vars);
+
+    return lst;
+  }
+
   @Override
   public Statement getSimpleCopy() {
     CatchStatement cs = new CatchStatement();
@@ -193,11 +229,35 @@ public class CatchStatement extends Statement {
     return cs;
   }
 
+  public void getOffset(BitSet values) {
+    super.getOffset(values);
+
+    for (Exprent exp : this.getResources()) {
+      exp.getBytecodeRange(values);
+    }
+  }
+
   // *****************************************************************************
   // getter and setter methods
   // *****************************************************************************
 
+  public List<List<String>> getExctStrings() {
+    return exctstrings;
+  }
+
   public List<VarExprent> getVars() {
     return vars;
   }
+
+  public int getTryType() {
+    return tryType;
+  }
+
+  public void setTryType(int tryType) {
+    this.tryType = tryType;
+  }
+
+  public List<Exprent> getResources() {
+    return resources;
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 06d6cbad98176e0b86eaa464e799620ca51fd25c..8574fe25782da90f36888186fb3d977c33eeaad1 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -110,7 +110,11 @@ public class VarDefinitionHelper {
         lstVars = ((CatchAllStatement)st).getVars();
       }
       else if (st.type == Statement.TYPE_TRYCATCH) {
-        lstVars = ((CatchStatement)st).getVars();
+        lstVars = new ArrayList<>(((CatchStatement)st).getVars());
+        // resource vars must also be included
+        for (Exprent exp : ((CatchStatement)st).getResources()) {
+          lstVars.add((VarExprent)((AssignmentExprent)exp).getLeft());
+        }
       }
 
       if (lstVars != null) {
diff --git a/test/org/jetbrains/java/decompiler/SingleClassesTest.java b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
index f8ba12410a1b3d20dadf0780cae14ff8a3631446..d9ac0365a2fc8c7886feaf07674ad1640baf8a82 100644
--- a/test/org/jetbrains/java/decompiler/SingleClassesTest.java
+++ b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
@@ -114,4 +114,5 @@ public class SingleClassesTest extends SingleClassesTestBase {
   @Test public void testSuspendLambda() { doTest("pkg/TestSuspendLambdaKt"); }
   @Test public void testNamedSuspendFun2Kt() { doTest("pkg/TestNamedSuspendFun2Kt"); }
   @Test public void testGenericArgs() { doTest("pkg/TestGenericArgs"); }
+  @Test public void testTryWithResources() { doTest("pkg/TestTryWithResources"); }
 }
\ No newline at end of file
diff --git a/testData/classes/pkg/TestTryWithResources.class b/testData/classes/pkg/TestTryWithResources.class
new file mode 100644
index 0000000000000000000000000000000000000000..dba49d9ec1c81714d3b6d7debe6db5697fc5a9bc
GIT binary patch
literal 2427
zcmc&#-%nd*7=BJ^d&;4Ou53yN9fLWAwzLB_b?tufW8EtKfwY4V7n1^KPzG(&9^AMv
zOEi%S6TL9;lAFbGVZ0zwoW{u=i8C=#{}2BJ@%he=wwNth%o0gB?|I+v{hsfApXdEf
zpZ@*h&j8M2R>3QHUB(+O3@8{xP(cV`1w)9q5S4Mxg<%&)6pZ4$cwCV2rUDP%lJT~T
zi!x#g;<%*XGOmaR*RRUBCc$~BSSo5)B(w|+&PuRPl$TTq9jRhT&1|eMsMUO7VT}=o
zrq;A!37(u*SiGAqRP?xvF&;!LGhsx=xcNHDV<jlL@<w%0O%w%&KTnK&b#tz$t<0!3
zeWeyzEqqXL<5hG?=&IaZjy@}i<z=#Y853?y;<}848#i!MM$(OUFvYT`$MQENcm-B;
ztx#Hy=Co?Dv@F4v&vH4DOmWwk8!4pS$cVE#8@c(FYWbdM(~T^qC3NdcB~^>wnn~t1
zOIqRn_4|uzMJtv|*2ZEvn#?vuyNo>y-(j!OY(*_)^$jxKbz=rOGUG-bw=4j?$|iuO
z+OrF*>Y_$Ej$#TDbDK3yUAHhq5v9t8#%9$5qaBT&Ce{kInuNAxRkNs;&_9rBWEc#^
z2aS-?Z7MFoZJeripAur0$pX0@IFgxUrvG{M@n8=RZZ0@z9&NH(Kh`3wkxO8io2Luf
ziiG$xDt_<zO;~7RGjSY?YvmdT&r?`h%579CRkc=Amq=_gYF+)fxB$jjlq?`o7Q1OL
zsrQaBov_-m67>_!%IdotQ(*PW^d=mZXs2?lh_^3^KG=B6#h)FLxDkB%=>=#dT1W7E
zNV|NIaFS1_9&AG^x~){{B%=<lm3=l}%O31|a6E={N=gNNvf~L{^DVyC+`QeV<o3`u
z7d*gZ=m4F;J-BypF&zr;p?wGE41X{kPKEa~ObRgRgc0<`>>)p4nI?<K(EbkWQ@fD)
zDH`U7$^$RX@{$@h$x>!8i+TE!ysE+nR<Vu_(|XynXyz0Vpzmtu{tg`>NxMqC5{{vV
ztCyi1@(7!ZfXodNAFc!+ll(tquH9U)7L}Gmog$3O=mmK?UFYd9^3+PmUtff$mM1v&
z7{0WWAwQjS;R8$!kq|n^cW^CcA2JEKU_>G@yWgJi+xKG*rUn|RzL;~!?=-j*seZ>k
z$xSpAh+7Jb7-WZZ1!D5QC2)oOu7(7D+0?+zPyAJklf?*s0`jK4%{K4ooO>91AHv_l
zr}#`~`vJC1`;hT(u#0c$Z{sTnA2`4-x>mwkT1C*tmE-hJAWR$K)Q)mq^L)QeyG{F$
z_JDLh<pc}uK7{X(rI`}R=&Oq)6uhA;=!Mfz&|I#kP)A!`c4QcD(%lP}sk^B6=pF_v
z?fWh5ZQZ8!fBw(f@4%Jj<w?KP8EAju8Svr(KB9)genKTb#~1igpM@<vGVRwS@H_l~
zpXfj0bO;~#4ZrI%A*?kMF|>1~hkk(baEkNL%XtWJ9(sx2$CFOuW7;kB6RC$t{lqzg
dKk%A9AFSYI%?A}fGa+vLe;E{s^?=iM_8)B@@HPMd

literal 0
HcmV?d00001

diff --git a/testData/results/TestTryWithResources.dec b/testData/results/TestTryWithResources.dec
new file mode 100644
index 0000000000000000000000000000000000000000..419b0df6fc1731027c783900f7b8e407826a6f5e
--- /dev/null
+++ b/testData/results/TestTryWithResources.dec
@@ -0,0 +1,176 @@
+package pkg;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URISyntaxException;
+import java.nio.file.FileSystem;
+import java.nio.file.FileSystems;
+import java.nio.file.Files;
+
+public class TestTryWithResources {
+   public static void test1() {
+      try (FileSystem var0 = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI())) {// 13
+         var0.getPath("PATH", "TO", "FILE");// 14
+      } catch (IOException | URISyntaxException var13) {// 16
+         ;
+      }
+
+   }// 17
+
+   public static void test2() {
+      try (
+         FileSystem var0 = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI());// 20
+         InputStream var2 = Files.newInputStream(var0.getPath("PATH", "TO", "FILE"));// 21
+      ) {
+         var2.read();// 22
+      } catch (IOException | URISyntaxException var32) {// 24
+         ;
+      }
+
+   }// 25
+
+   public static void test3() {
+      try (FileSystem var0 = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI())) {// 28
+         try (InputStream var2 = Files.newInputStream(var0.getPath("PATH", "TO", "FILE"))) {// 29
+            var2.read();// 30
+         } catch (IOException var34) {// 32
+            ;
+         } catch (Exception var35) {// 33
+            ;
+         }
+      } catch (IOException | URISyntaxException var38) {// 35
+         ;
+      }
+
+   }// 36
+}
+
+class 'pkg/TestTryWithResources' {
+   method 'test1 ()V' {
+      0      11
+      1      11
+      2      11
+      3      11
+      4      11
+      5      11
+      6      11
+      7      11
+      8      11
+      9      11
+      a      11
+      b      11
+      c      11
+      d      11
+      10      12
+      11      12
+      12      12
+      19      12
+      1a      12
+      1e      12
+      1f      12
+      21      12
+      22      12
+      23      12
+      6d      13
+      6e      17
+   }
+
+   method 'test2 ()V' {
+      0      21
+      1      21
+      2      21
+      3      21
+      4      21
+      5      21
+      6      21
+      7      21
+      8      21
+      9      21
+      a      21
+      b      21
+      c      21
+      d      21
+      10      22
+      11      22
+      12      22
+      19      22
+      1a      22
+      1e      22
+      1f      22
+      21      22
+      22      22
+      23      22
+      28      22
+      29      22
+      2a      22
+      2b      22
+      2e      24
+      2f      24
+      30      24
+      31      24
+      c9      25
+      ca      29
+   }
+
+   method 'test3 ()V' {
+      0      32
+      1      32
+      2      32
+      3      32
+      4      32
+      5      32
+      6      32
+      7      32
+      8      32
+      9      32
+      a      32
+      b      32
+      c      32
+      d      32
+      10      33
+      11      33
+      12      33
+      19      33
+      1a      33
+      1e      33
+      1f      33
+      21      33
+      22      33
+      23      33
+      28      33
+      29      33
+      2a      33
+      2b      33
+      2e      34
+      2f      34
+      30      34
+      31      34
+      82      35
+      86      37
+      d1      40
+      d2      44
+   }
+}
+
+Lines mapping:
+13 <-> 12
+14 <-> 13
+16 <-> 14
+17 <-> 18
+20 <-> 22
+21 <-> 23
+22 <-> 25
+24 <-> 26
+25 <-> 30
+28 <-> 33
+29 <-> 34
+30 <-> 35
+32 <-> 36
+33 <-> 38
+35 <-> 41
+36 <-> 45
+Not mapped:
+15
+23
+31
+34
diff --git a/testData/src/pkg/TestTryWithResources.java b/testData/src/pkg/TestTryWithResources.java
new file mode 100644
index 0000000000000000000000000000000000000000..0c217fe0bc40af775d817bac86c68f26a11e7fb5
--- /dev/null
+++ b/testData/src/pkg/TestTryWithResources.java
@@ -0,0 +1,37 @@
+package pkg;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URISyntaxException;
+import java.nio.file.FileSystem;
+import java.nio.file.FileSystems;
+import java.nio.file.Files;
+import java.nio.file.Path;
+
+public class TestTryWithResources {
+  public static void test1() {
+     try(FileSystem fileSystem = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI())) {
+       fileSystem.getPath("PATH", "TO", "FILE");
+     }
+     catch (URISyntaxException | IOException e) {}
+  }
+
+  public static void test2() {
+    try(FileSystem fileSystem = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI());
+        InputStream stream = Files.newInputStream(fileSystem.getPath("PATH", "TO", "FILE"))) {
+      stream.read();
+    }
+    catch (URISyntaxException | IOException e) {}
+  }
+
+  public static void test3() {
+    try(FileSystem fileSystem = FileSystems.getFileSystem(TestTryWithResources.class.getResource("NOT").toURI())) {
+      try (InputStream stream = Files.newInputStream(fileSystem.getPath("PATH", "TO", "FILE"))) {
+        stream.read();
+      }
+      catch (IOException e) {}
+      catch (Exception e) {}
+    }
+    catch (URISyntaxException | IOException e) {}
+  }
+}
\ No newline at end of file
