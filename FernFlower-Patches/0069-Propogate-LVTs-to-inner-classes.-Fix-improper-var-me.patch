From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lex Manos <LexManos@gmail.com>
Date: Sun, 4 Oct 2015 16:52:33 -0700
Subject: [PATCH] Propogate LVTs to inner classes. Fix improper var merging in
 var handlers.


diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index c6eda1b630480cdec964a3571fc44e1c90626b24..33785497b358346846ce58824ce3c2f0aa2be815 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -28,6 +28,7 @@ import org.jetbrains.java.decompiler.modules.decompiler.sforms.DirectNode;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.DoStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.RootStatement;
 import org.jetbrains.java.decompiler.modules.decompiler.stats.Statement;
+import org.jetbrains.java.decompiler.modules.decompiler.vars.LVTVariable;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarTypeProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.StructClass;
@@ -454,6 +455,8 @@ public class NestedClassProcessor {
         HashMap<VarVersionPair, String> mapNewNames = new HashMap<VarVersionPair, String>();
         // local var types
         HashMap<VarVersionPair, VarType> mapNewTypes = new HashMap<VarVersionPair, VarType>();
+        // local var table entries
+        HashMap<VarVersionPair, LVTVariable> mapNewLVTs = new HashMap<VarVersionPair, LVTVariable>();
 
         final HashMap<Integer, VarVersionPair> mapParamsToNewVars = new HashMap<Integer, VarVersionPair>();
         if (meth.signatureFields != null) {
@@ -469,15 +472,17 @@ public class NestedClassProcessor {
 
               String varname = null;
               VarType vartype = null;
+              LVTVariable varlvt = null;
 
               if (child.type != ClassNode.CLASS_MEMBER) {
                 varname = encmeth.varproc.getVarName(paar);
                 vartype = encmeth.varproc.getVarType(paar);
+                varlvt = encmeth.varproc.getVarLVT(paar);
 
                 encmeth.varproc.setVarFinal(paar, VarTypeProcessor.VAR_EXPLICIT_FINAL);
               }
 
-              if (paar.var == -1 || "this".equals(varname)) {
+              if (paar.var == -1 || "this".equals(varname) || (varlvt != null && "this".equals(varlvt.name))) {
                 if (parent.simpleName == null) {
                   // anonymous enclosing class, no access to this
                   varname = VarExprent.VAR_NAMELESS_ENCLOSURE;
@@ -485,11 +490,15 @@ public class NestedClassProcessor {
                 else {
                   varname = parent.simpleName + ".this";
                 }
+                if (varlvt != null) {
+                  varlvt = varlvt.rename(varname);
+                }
                 meth.varproc.getThisVars().put(newvar, parent.classStruct.qualifiedName);
               }
 
               mapNewNames.put(newvar, varname);
               mapNewTypes.put(newvar, vartype);
+              mapNewLVTs.put(newvar, varlvt);
             }
             varindex += md.params[index++].stackSize;
           }
@@ -507,6 +516,7 @@ public class NestedClassProcessor {
 
             String varname = null;
             VarType vartype = null;
+            LVTVariable varlvt = null;
 
             if (clnode.type != ClassNode.CLASS_MEMBER) {
 
@@ -514,11 +524,12 @@ public class NestedClassProcessor {
 
               varname = enclosing_method.varproc.getVarName(entr.getValue());
               vartype = enclosing_method.varproc.getVarType(entr.getValue());
+              varlvt  = enclosing_method.varproc.getVarLVT(entr.getValue());
 
               enclosing_method.varproc.setVarFinal(entr.getValue(), VarTypeProcessor.VAR_EXPLICIT_FINAL);
             }
 
-            if (entr.getValue().var == -1 || "this".equals(varname)) {
+            if (entr.getValue().var == -1 || "this".equals(varname) || (varlvt != null && "this".equals(varlvt.name))) {
               if (clnode.parent.simpleName == null) {
                 // anonymous enclosing class, no access to this
                 varname = VarExprent.VAR_NAMELESS_ENCLOSURE;
@@ -526,11 +537,15 @@ public class NestedClassProcessor {
               else {
                 varname = clnode.parent.simpleName + ".this";
               }
+              if (varlvt != null) {
+                varlvt = varlvt.rename(varname);
+              }
               meth.varproc.getThisVars().put(newvar, clnode.parent.classStruct.qualifiedName);
             }
 
             mapNewNames.put(newvar, varname);
             mapNewTypes.put(newvar, vartype);
+            mapNewLVTs.put(newvar, varlvt);
 
             // hide synthetic field
             if (clnode == child) { // fields higher up the chain were already handled with their classes
@@ -549,11 +564,15 @@ public class NestedClassProcessor {
         for (Entry<VarVersionPair, String> entr : mapNewNames.entrySet()) {
           VarVersionPair varpaar = entr.getKey();
           VarType vartype = mapNewTypes.get(varpaar);
+          LVTVariable varlvt = mapNewLVTs.get(varpaar);
 
           meth.varproc.setVarName(varpaar, entr.getValue());
           if (vartype != null) {
             meth.varproc.setVarType(varpaar, vartype);
           }
+          if (varlvt != null) {
+            meth.varproc.setVarLVT(varpaar, varlvt);
+          }
         }
 
         DirectGraph graph = meth.getOrBuildGraph();
@@ -602,7 +621,12 @@ public class NestedClassProcessor {
               if (mapParamsToNewVars.containsKey(varindex)) {
                 VarVersionPair newvar = mapParamsToNewVars.get(varindex);
                 meth.varproc.getExternalVars().add(newvar);
-                return new VarExprent(newvar.var, meth.varproc.getVarType(newvar), meth.varproc);
+                VarExprent ret = new VarExprent(newvar.var, meth.varproc.getVarType(newvar), meth.varproc);
+                LVTVariable lvt = meth.varproc.getVarLVT(newvar);
+                if (lvt != null) {
+                  ret.setLVT(lvt);
+                }
+                return ret;
               }
             }
             else if (exprent.type == Exprent.EXPRENT_FIELD) {
@@ -616,7 +640,12 @@ public class NestedClassProcessor {
                 //		mapFieldsToNewVars.containsKey(keyField)) {
                 VarVersionPair newvar = mapFieldsToNewVars.get(keyField);
                 meth.varproc.getExternalVars().add(newvar);
-                return new VarExprent(newvar.var, meth.varproc.getVarType(newvar), meth.varproc);
+                VarExprent ret = new VarExprent(newvar.var, meth.varproc.getVarType(newvar), meth.varproc);
+                LVTVariable lvt = meth.varproc.getVarLVT(newvar);
+                if (lvt != null) {
+                  ret.setLVT(lvt);
+                }
+                return ret;
               }
             }
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
index 209d3e081f58e2d54b231dbe2c90fe11c319f66c..cb376d9b480f06971c71647037a17a166764e805 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/LVTVariable.java
@@ -83,7 +83,11 @@ public class LVTVariable implements Comparable<LVTVariable> {
     return sig;
   }
 
-public VarType getVarType() {
+  public VarType getVarType() {
     return new VarType(desc);
-}
+  }
+
+  public LVTVariable rename(String newName) {
+    return new LVTVariable(newName, desc, start, end, index, isLVTT);
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 88dae4d81ca4ebc059cc575cf5e97d9f5bfe0fee..0427e3b329d4599d42ef5f8ac35fd84581c5f8c6 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -440,6 +440,10 @@ public class VarDefinitionHelper {
 
     findTypes(stat, types);
 
+    for (Entry<VarVersionPair, LVTVariable> e : types.entrySet()) {
+      varproc.setVarLVT(e.getKey(), e.getValue());
+    }
+
     applyTypes(stat, types);
   }
 
@@ -470,23 +474,24 @@ public class VarDefinitionHelper {
   }
 
   private void findTypes(Exprent exp, Map<VarVersionPair, LVTVariable> types) {
-    VarExprent var = null;
+    List<Exprent> lst = exp.getAllExprents(true);
+    lst.add(exp);
 
-    if (exp.type == Exprent.EXPRENT_ASSIGNMENT) {
-      AssignmentExprent ass = (AssignmentExprent)exp;
-      if (ass.getLeft().type == Exprent.EXPRENT_VAR) {
-        var = (VarExprent)ass.getLeft();
+    for (Exprent exprent : lst) {
+      if (exprent.type == Exprent.EXPRENT_VAR) {
+        VarExprent var = (VarExprent)exprent;
+        if (var.getLVT() == null) {
+          continue;
+        }
+        VarVersionPair ver = new VarVersionPair(var);
+        if (var.isDefinition()) {
+          types.put(ver, var.getLVT());
+        }
+        else if (!types.containsKey(ver)) {
+          types.put(ver, var.getLVT());
+        }
       }
     }
-    else if (exp.type == Exprent.EXPRENT_VAR) {
-      var = (VarExprent)exp;
-    }
-
-    if (var == null || !var.isDefinition()) {
-      return;
-    }
-
-    types.put(new VarVersionPair(var), var.getLVT());
   }
 
 
@@ -495,6 +500,10 @@ public class VarDefinitionHelper {
       return;
     }
 
+    for (Exprent exp : stat.getVarDefinitions()) {
+        applyTypes(exp, types);
+    }
+
     if (stat.getExprents() == null) {
       for (Object obj : stat.getSequentialObjects()) {
         if (obj instanceof Statement) {
@@ -637,6 +646,10 @@ public class VarDefinitionHelper {
                 leaked.putAll(leaked_n); //First is outside the scope so leak!
               }
             }
+            else if (stat.type == Statement.TYPE_TRYCATCH ||
+                     stat.type == Statement.TYPE_CATCHALL) {
+              leaked_n.clear(); // Catches can't leak anything mwhahahahah!
+            }
             this_vars.putAll(leaked_n);
           }
         }
@@ -732,6 +745,18 @@ public class VarDefinitionHelper {
       }
       success |= remapped;
     }
+    if (success) {
+      Iterator<Exprent> itr = stat.getVarDefinitions().iterator();
+      while (itr.hasNext()) {
+        Exprent exp = itr.next();
+        if (exp.type == Exprent.EXPRENT_VAR) {
+          VarExprent var = (VarExprent)exp;
+          if (from.var == var.getIndex() && from.version == var.getVersion()) {
+            itr.remove();
+          }
+        }
+      }
+    }
     return success;
   }
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
index 89f24f365a7c01b7920fd8002dda2ec0b955f96c..04ee48f75b4d78b117e6fe1e70cf41fa0073b99d 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarProcessor.java
@@ -29,6 +29,7 @@ import java.util.Map.Entry;
 public class VarProcessor {
 
   private Map<VarVersionPair, String> mapVarNames = new HashMap<VarVersionPair, String>();
+  private Map<VarVersionPair, LVTVariable> mapVarLVTs = new HashMap<VarVersionPair, LVTVariable>();
   private VarVersionsProcessor varVersions;
   private final Map<VarVersionPair, String> thisVars = new HashMap<VarVersionPair, String>();
   private final Set<VarVersionPair> externalVars = new HashSet<VarVersionPair>();
@@ -127,7 +128,7 @@ public class VarProcessor {
 
   public void setVarType(VarVersionPair pair, VarType type) {
     if (varVersions != null) {
-        varVersions.setVarType(pair, type);
+      varVersions.setVarType(pair, type);
     }
   }
 
@@ -185,5 +186,13 @@ public class VarProcessor {
 
   public VarVersionsProcessor getVarVersions() {
     return varVersions;
-}
+  }
+
+  public void setVarLVT(VarVersionPair var, LVTVariable lvt) {
+    mapVarLVTs.put(var, lvt);
+  }
+
+  public LVTVariable getVarLVT(VarVersionPair var) {
+    return mapVarLVTs.get(var);
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
index d201157f241a77410bbd495ed43c5a54540ee59c..a1acd195bb107e423f2ed29c1e1554a7fa63442f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
@@ -323,5 +323,5 @@ public class VarVersionsProcessor {
   }
   public VarTypeProcessor getTypeProcessor() {
     return typeProcessor;
-}
+  }
 }
